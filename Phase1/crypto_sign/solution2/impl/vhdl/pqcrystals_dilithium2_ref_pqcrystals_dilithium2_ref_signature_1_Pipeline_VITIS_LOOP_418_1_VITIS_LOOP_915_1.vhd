-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium2_ref_pqcrystals_dilithium2_ref_signature_1_Pipeline_VITIS_LOOP_418_1_VITIS_LOOP_915_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    w1_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    w1_vec_coeffs_ce0 : OUT STD_LOGIC;
    w1_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    w1_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    w1_vec_coeffs_ce1 : OUT STD_LOGIC;
    w1_vec_coeffs_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sm_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sm_ce0 : OUT STD_LOGIC;
    sm_we0 : OUT STD_LOGIC;
    sm_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sm_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sm_ce1 : OUT STD_LOGIC;
    sm_we1 : OUT STD_LOGIC;
    sm_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of pqcrystals_dilithium2_ref_pqcrystals_dilithium2_ref_signature_1_Pipeline_VITIS_LOOP_418_1_VITIS_LOOP_915_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln418_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal trunc_ln419_fu_193_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln419_reg_583 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln418_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln915_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln915_reg_593 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln418_fu_224_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln418_reg_598 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln419_1_fu_240_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln419_1_reg_603 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln419_2_fu_244_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln419_2_reg_609 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln6_fu_252_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln6_reg_615 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln418_2_fu_371_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln418_2_reg_632 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal sub_ln916_fu_388_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln916_reg_638 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln_reg_643 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln916_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln917_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln917_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln919_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln921_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln919_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln921_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_86 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln915_fu_294_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (6 downto 0);
    signal i_6_fu_90 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln418_1_fu_232_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_7 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten48_fu_94 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln418_1_fu_203_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten48_load : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln917_1_fu_421_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln921_1_fu_555_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln418_fu_212_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln916_fu_248_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_260_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln917_fu_275_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_281_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln5_fu_315_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln419_1_fu_326_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln419_fu_322_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln419_1_fu_333_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln419_mid1_fu_343_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln419_1_mid1_fu_354_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln419_2_fu_350_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln419_3_fu_361_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln419_1_fu_365_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln419_fu_337_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln916_1_fu_381_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_31_cast22_fu_378_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln916_1_fu_394_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln916_fu_398_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln917_fu_409_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln7_fu_413_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln916_1_fu_384_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln919_fu_438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_443_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln921_fu_455_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_460_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln418_fu_472_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln418_1_fu_481_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln916_fu_490_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln418_fu_477_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln918_fu_493_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln919_fu_504_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln8_fu_508_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln418_1_fu_486_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln920_fu_532_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln921_fu_543_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln9_fu_547_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1_fu_522_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pqcrystals_dilithium2_ref_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component pqcrystals_dilithium2_ref_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_6_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln418_fu_197_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_6_fu_90 <= select_ln418_1_fu_232_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_6_fu_90 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln418_fu_197_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_86 <= add_ln915_fu_294_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_86 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten48_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln418_fu_197_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten48_fu_94 <= add_ln418_1_fu_203_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten48_fu_94 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln418_reg_589 <= icmp_ln418_fu_197_p2;
                trunc_ln419_reg_583 <= trunc_ln419_fu_193_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln418_fu_197_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln915_reg_593 <= icmp_ln915_fu_218_p2;
                select_ln418_reg_598 <= select_ln418_fu_224_p3;
                    shl_ln6_reg_615(7 downto 2) <= shl_ln6_fu_252_p3(7 downto 2);
                trunc_ln419_1_reg_603 <= trunc_ln419_1_fu_240_p1;
                trunc_ln419_2_reg_609 <= trunc_ln419_2_fu_244_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln418_reg_589 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    select_ln418_2_reg_632(10 downto 6) <= select_ln418_2_fu_371_p3(10 downto 6);
                sub_ln916_reg_638 <= sub_ln916_fu_388_p2;
                trunc_ln_reg_643 <= w1_vec_coeffs_q0(9 downto 2);
            end if;
        end if;
    end process;
    shl_ln6_reg_615(1 downto 0) <= "00";
    select_ln418_2_reg_632(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln418_1_fu_203_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten48_load) + unsigned(ap_const_lv9_1));
    add_ln418_fu_212_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_7) + unsigned(ap_const_lv3_1));
    add_ln915_fu_294_p2 <= std_logic_vector(unsigned(select_ln418_fu_224_p3) + unsigned(ap_const_lv7_1));
    add_ln916_fu_398_p2 <= std_logic_vector(signed(sext_ln916_1_fu_394_p1) + signed(select_ln418_2_fu_371_p3));
    add_ln918_fu_493_p2 <= std_logic_vector(signed(sext_ln916_fu_490_p1) + signed(sext_ln418_fu_477_p1));
    add_ln920_fu_532_p2 <= std_logic_vector(signed(sext_ln916_fu_490_p1) + signed(sext_ln418_1_fu_486_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln418_reg_589)
    begin
        if (((icmp_ln418_reg_589 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_6_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_7 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_7 <= i_6_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_86, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_86;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten48_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten48_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten48_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten48_load <= indvar_flatten48_fu_94;
        end if; 
    end process;

    i_31_cast22_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln418_reg_598),9));
    icmp_ln418_fu_197_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten48_load = ap_const_lv9_100) else "0";
    icmp_ln915_fu_218_p2 <= "1" when (ap_sig_allocacmp_i_load = ap_const_lv7_40) else "0";
    or_ln418_1_fu_481_p2 <= (select_ln418_2_reg_632 or ap_const_lv11_2);
    or_ln418_fu_472_p2 <= (select_ln418_2_reg_632 or ap_const_lv11_1);
    or_ln917_1_fu_421_p2 <= (trunc_ln916_1_fu_384_p1 or shl_ln7_fu_413_p3);
    or_ln917_fu_275_p2 <= (shl_ln6_fu_252_p3 or ap_const_lv8_1);
    or_ln919_fu_438_p2 <= (shl_ln6_reg_615 or ap_const_lv8_2);
    or_ln921_1_fu_555_p2 <= (trunc_ln1_fu_522_p4 or shl_ln9_fu_547_p3);
    or_ln921_fu_455_p2 <= (shl_ln6_reg_615 or ap_const_lv8_3);
    select_ln418_1_fu_232_p3 <= 
        add_ln418_fu_212_p2 when (icmp_ln915_fu_218_p2(0) = '1') else 
        ap_sig_allocacmp_i_7;
    select_ln418_2_fu_371_p3 <= 
        sub_ln419_1_fu_365_p2 when (icmp_ln915_reg_593(0) = '1') else 
        sub_ln419_fu_337_p2;
    select_ln418_fu_224_p3 <= 
        ap_const_lv7_0 when (icmp_ln915_fu_218_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
        sext_ln418_1_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln418_1_fu_481_p2),12));

        sext_ln418_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln418_fu_472_p2),12));

        sext_ln916_1_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln916_fu_388_p2),11));

        sext_ln916_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln916_reg_638),12));

        sext_ln917_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln916_fu_398_p2),64));

        sext_ln919_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln918_fu_493_p2),64));

        sext_ln921_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln920_fu_532_p2),64));

    shl_ln419_1_fu_326_p3 <= (trunc_ln419_reg_583 & ap_const_lv6_0);
    shl_ln419_1_mid1_fu_354_p3 <= (trunc_ln419_2_reg_609 & ap_const_lv6_0);
    shl_ln419_mid1_fu_343_p3 <= (trunc_ln419_2_reg_609 & ap_const_lv8_0);
    shl_ln5_fu_315_p3 <= (trunc_ln419_reg_583 & ap_const_lv8_0);
    shl_ln6_fu_252_p3 <= (trunc_ln916_fu_248_p1 & ap_const_lv2_0);
    shl_ln7_fu_413_p3 <= (trunc_ln917_fu_409_p1 & ap_const_lv6_0);
    shl_ln8_fu_508_p3 <= (trunc_ln919_fu_504_p1 & ap_const_lv4_0);
    shl_ln9_fu_547_p3 <= (trunc_ln921_fu_543_p1 & ap_const_lv2_0);

    sm_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, sext_ln917_fu_404_p1, ap_block_pp0_stage1, sext_ln921_fu_538_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sm_address0 <= sext_ln921_fu_538_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sm_address0 <= sext_ln917_fu_404_p1(13 - 1 downto 0);
        else 
            sm_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    sm_address1 <= sext_ln919_fu_499_p1(13 - 1 downto 0);

    sm_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            sm_ce0 <= ap_const_logic_1;
        else 
            sm_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sm_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sm_ce1 <= ap_const_logic_1;
        else 
            sm_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sm_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, or_ln917_1_fu_421_p2, or_ln921_1_fu_555_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sm_d0 <= or_ln921_1_fu_555_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sm_d0 <= or_ln917_1_fu_421_p2;
        else 
            sm_d0 <= "XXXXXXXX";
        end if; 
    end process;

    sm_d1 <= (trunc_ln_reg_643 or shl_ln8_fu_508_p3);

    sm_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln418_reg_589, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln418_reg_589 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            sm_we0 <= ap_const_logic_1;
        else 
            sm_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sm_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sm_we1 <= ap_const_logic_1;
        else 
            sm_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln419_1_fu_365_p2 <= std_logic_vector(unsigned(zext_ln419_2_fu_350_p1) - unsigned(zext_ln419_3_fu_361_p1));
    sub_ln419_fu_337_p2 <= std_logic_vector(unsigned(zext_ln419_fu_322_p1) - unsigned(zext_ln419_1_fu_333_p1));
    sub_ln916_fu_388_p2 <= std_logic_vector(unsigned(zext_ln916_1_fu_381_p1) - unsigned(i_31_cast22_fu_378_p1));
    tmp_1_fu_281_p3 <= (trunc_ln419_1_fu_240_p1 & or_ln917_fu_275_p2);
    tmp_2_fu_443_p3 <= (trunc_ln419_1_reg_603 & or_ln919_fu_438_p2);
    tmp_3_fu_460_p3 <= (trunc_ln419_1_reg_603 & or_ln921_fu_455_p2);
    tmp_s_fu_260_p4 <= ((trunc_ln419_1_fu_240_p1 & trunc_ln916_fu_248_p1) & ap_const_lv2_0);
    trunc_ln1_fu_522_p4 <= w1_vec_coeffs_q1(11 downto 4);
    trunc_ln419_1_fu_240_p1 <= select_ln418_1_fu_232_p3(2 - 1 downto 0);
    trunc_ln419_2_fu_244_p1 <= add_ln418_fu_212_p2(2 - 1 downto 0);
    trunc_ln419_fu_193_p1 <= ap_sig_allocacmp_i_7(2 - 1 downto 0);
    trunc_ln916_1_fu_384_p1 <= w1_vec_coeffs_q1(8 - 1 downto 0);
    trunc_ln916_fu_248_p1 <= select_ln418_fu_224_p3(6 - 1 downto 0);
    trunc_ln917_fu_409_p1 <= w1_vec_coeffs_q0(2 - 1 downto 0);
    trunc_ln919_fu_504_p1 <= w1_vec_coeffs_q1(4 - 1 downto 0);
    trunc_ln921_fu_543_p1 <= w1_vec_coeffs_q0(6 - 1 downto 0);

    w1_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln917_fu_289_p1, ap_block_pp0_stage1, zext_ln921_fu_467_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                w1_vec_coeffs_address0 <= zext_ln921_fu_467_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                w1_vec_coeffs_address0 <= zext_ln917_fu_289_p1(10 - 1 downto 0);
            else 
                w1_vec_coeffs_address0 <= "XXXXXXXXXX";
            end if;
        else 
            w1_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    w1_vec_coeffs_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln916_fu_270_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln919_fu_450_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                w1_vec_coeffs_address1 <= zext_ln919_fu_450_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                w1_vec_coeffs_address1 <= zext_ln916_fu_270_p1(10 - 1 downto 0);
            else 
                w1_vec_coeffs_address1 <= "XXXXXXXXXX";
            end if;
        else 
            w1_vec_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    w1_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            w1_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            w1_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w1_vec_coeffs_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            w1_vec_coeffs_ce1 <= ap_const_logic_1;
        else 
            w1_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln419_1_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln419_1_fu_326_p3),11));
    zext_ln419_2_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln419_mid1_fu_343_p3),11));
    zext_ln419_3_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln419_1_mid1_fu_354_p3),11));
    zext_ln419_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_315_p3),11));
    zext_ln916_1_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_reg_615),9));
    zext_ln916_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_260_p4),64));
    zext_ln917_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_281_p3),64));
    zext_ln919_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_443_p3),64));
    zext_ln921_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_460_p3),64));
end behav;
