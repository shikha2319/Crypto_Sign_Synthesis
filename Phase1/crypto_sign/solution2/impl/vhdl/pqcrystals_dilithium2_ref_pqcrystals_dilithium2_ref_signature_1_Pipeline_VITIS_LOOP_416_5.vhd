-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium2_ref_pqcrystals_dilithium2_ref_signature_1_Pipeline_VITIS_LOOP_416_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    seedbuf_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    seedbuf_ce0 : OUT STD_LOGIC;
    seedbuf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    seedbuf_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    seedbuf_ce1 : OUT STD_LOGIC;
    seedbuf_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_s_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_s_0_ce0 : OUT STD_LOGIC;
    state_s_0_we0 : OUT STD_LOGIC;
    state_s_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    state_s_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_s_0_ce1 : OUT STD_LOGIC;
    state_s_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of pqcrystals_dilithium2_ref_pqcrystals_dilithium2_ref_signature_1_Pipeline_VITIS_LOOP_416_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln416_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln416_reg_367 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal shl_ln4_fu_171_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln4_reg_371 : STD_LOGIC_VECTOR (6 downto 0);
    signal state_s_0_addr_reg_391 : STD_LOGIC_VECTOR (4 downto 0);
    signal seedbuf_load_reg_397 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal seedbuf_load_1_reg_402 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_s_0_load_reg_417 : STD_LOGIC_VECTOR (63 downto 0);
    signal seedbuf_load_2_reg_422 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal seedbuf_load_3_reg_427 : STD_LOGIC_VECTOR (7 downto 0);
    signal seedbuf_load_4_reg_442 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal seedbuf_load_5_reg_447 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln31_1_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln31_3_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_5_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln31_7_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_9_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln31_11_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_13_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln31_15_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_52 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_9_fu_160_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_8 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln31_fu_179_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_fu_183_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln31_fu_194_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_2_fu_200_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_1_fu_204_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln31_1_fu_220_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_4_fu_225_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_2_fu_229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln31_2_fu_240_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_6_fu_245_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_3_fu_249_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln31_3_fu_260_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_8_fu_265_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_4_fu_269_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln31_4_fu_280_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_10_fu_285_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_5_fu_289_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln31_5_fu_300_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_12_fu_305_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_6_fu_309_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln31_6_fu_320_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_14_fu_325_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_7_fu_329_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_15_7_i_fu_340_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pqcrystals_dilithium2_ref_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component pqcrystals_dilithium2_ref_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln416_fu_154_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_52 <= i_9_fu_160_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_52 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln416_reg_367 <= icmp_ln416_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_reg_367 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                seedbuf_load_1_reg_402 <= seedbuf_q0;
                seedbuf_load_reg_397 <= seedbuf_q1;
                state_s_0_load_reg_417 <= state_s_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_reg_367 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                seedbuf_load_2_reg_422 <= seedbuf_q1;
                seedbuf_load_3_reg_427 <= seedbuf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_reg_367 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                seedbuf_load_4_reg_442 <= seedbuf_q1;
                seedbuf_load_5_reg_447 <= seedbuf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_fu_154_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    shl_ln4_reg_371(6 downto 3) <= shl_ln4_fu_171_p3(6 downto 3);
                    state_s_0_addr_reg_391(3 downto 0) <= zext_ln416_fu_166_p1(5 - 1 downto 0)(3 downto 0);
            end if;
        end if;
    end process;
    shl_ln4_reg_371(2 downto 0) <= "000";
    state_s_0_addr_reg_391(4) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage3_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln31_1_fu_204_p2 <= std_logic_vector(unsigned(zext_ln31_2_fu_200_p1) + unsigned(ap_const_lv8_50));
    add_ln31_2_fu_229_p2 <= std_logic_vector(unsigned(zext_ln31_4_fu_225_p1) + unsigned(ap_const_lv8_50));
    add_ln31_3_fu_249_p2 <= std_logic_vector(unsigned(zext_ln31_6_fu_245_p1) + unsigned(ap_const_lv8_50));
    add_ln31_4_fu_269_p2 <= std_logic_vector(unsigned(zext_ln31_8_fu_265_p1) + unsigned(ap_const_lv8_50));
    add_ln31_5_fu_289_p2 <= std_logic_vector(unsigned(zext_ln31_10_fu_285_p1) + unsigned(ap_const_lv8_50));
    add_ln31_6_fu_309_p2 <= std_logic_vector(unsigned(zext_ln31_12_fu_305_p1) + unsigned(ap_const_lv8_50));
    add_ln31_7_fu_329_p2 <= std_logic_vector(unsigned(zext_ln31_14_fu_325_p1) + unsigned(ap_const_lv8_50));
    add_ln31_fu_183_p2 <= std_logic_vector(unsigned(zext_ln31_fu_179_p1) + unsigned(ap_const_lv8_50));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln416_fu_154_p2)
    begin
        if (((icmp_ln416_fu_154_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_8_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_52, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_8 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_8 <= i_fu_52;
        end if; 
    end process;

    i_9_fu_160_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_8) + unsigned(ap_const_lv4_1));
    icmp_ln416_fu_154_p2 <= "1" when (ap_sig_allocacmp_i_8 = ap_const_lv4_A) else "0";
    or_ln31_1_fu_220_p2 <= (shl_ln4_reg_371 or ap_const_lv7_2);
    or_ln31_2_fu_240_p2 <= (shl_ln4_reg_371 or ap_const_lv7_3);
    or_ln31_3_fu_260_p2 <= (shl_ln4_reg_371 or ap_const_lv7_4);
    or_ln31_4_fu_280_p2 <= (shl_ln4_reg_371 or ap_const_lv7_5);
    or_ln31_5_fu_300_p2 <= (shl_ln4_reg_371 or ap_const_lv7_6);
    or_ln31_6_fu_320_p2 <= (shl_ln4_reg_371 or ap_const_lv7_7);
    or_ln31_fu_194_p2 <= (shl_ln4_fu_171_p3 or ap_const_lv7_1);
    r_15_7_i_fu_340_p9 <= (((((((seedbuf_q0 & seedbuf_q1) & seedbuf_load_5_reg_447) & seedbuf_load_4_reg_442) & seedbuf_load_3_reg_427) & seedbuf_load_2_reg_422) & seedbuf_load_1_reg_402) & seedbuf_load_reg_397);

    seedbuf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln31_3_fu_210_p1, ap_block_pp0_stage1, zext_ln31_7_fu_255_p1, ap_block_pp0_stage2, zext_ln31_11_fu_295_p1, ap_block_pp0_stage3, zext_ln31_15_fu_335_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                seedbuf_address0 <= zext_ln31_15_fu_335_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                seedbuf_address0 <= zext_ln31_11_fu_295_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                seedbuf_address0 <= zext_ln31_7_fu_255_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                seedbuf_address0 <= zext_ln31_3_fu_210_p1(8 - 1 downto 0);
            else 
                seedbuf_address0 <= "XXXXXXXX";
            end if;
        else 
            seedbuf_address0 <= "XXXXXXXX";
        end if; 
    end process;


    seedbuf_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln31_1_fu_189_p1, ap_block_pp0_stage0, zext_ln31_5_fu_235_p1, ap_block_pp0_stage1, zext_ln31_9_fu_275_p1, ap_block_pp0_stage2, zext_ln31_13_fu_315_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                seedbuf_address1 <= zext_ln31_13_fu_315_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                seedbuf_address1 <= zext_ln31_9_fu_275_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                seedbuf_address1 <= zext_ln31_5_fu_235_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                seedbuf_address1 <= zext_ln31_1_fu_189_p1(8 - 1 downto 0);
            else 
                seedbuf_address1 <= "XXXXXXXX";
            end if;
        else 
            seedbuf_address1 <= "XXXXXXXX";
        end if; 
    end process;


    seedbuf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            seedbuf_ce0 <= ap_const_logic_1;
        else 
            seedbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seedbuf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            seedbuf_ce1 <= ap_const_logic_1;
        else 
            seedbuf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln4_fu_171_p3 <= (ap_sig_allocacmp_i_8 & ap_const_lv3_0);
    state_s_0_address0 <= state_s_0_addr_reg_391;
    state_s_0_address1 <= zext_ln416_fu_166_p1(5 - 1 downto 0);

    state_s_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_s_0_ce0 <= ap_const_logic_1;
        else 
            state_s_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_s_0_ce1 <= ap_const_logic_1;
        else 
            state_s_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_s_0_d0 <= (state_s_0_load_reg_417 xor r_15_7_i_fu_340_p9);

    state_s_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_s_0_we0 <= ap_const_logic_1;
        else 
            state_s_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln31_10_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_4_fu_280_p2),8));
    zext_ln31_11_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_5_fu_289_p2),64));
    zext_ln31_12_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_5_fu_300_p2),8));
    zext_ln31_13_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_6_fu_309_p2),64));
    zext_ln31_14_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_6_fu_320_p2),8));
    zext_ln31_15_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_7_fu_329_p2),64));
    zext_ln31_1_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_183_p2),64));
    zext_ln31_2_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_fu_194_p2),8));
    zext_ln31_3_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_1_fu_204_p2),64));
    zext_ln31_4_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_1_fu_220_p2),8));
    zext_ln31_5_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_2_fu_229_p2),64));
    zext_ln31_6_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_2_fu_240_p2),8));
    zext_ln31_7_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_3_fu_249_p2),64));
    zext_ln31_8_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_3_fu_260_p2),8));
    zext_ln31_9_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_4_fu_269_p2),64));
    zext_ln31_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_171_p3),8));
    zext_ln416_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_8),64));
end behav;
