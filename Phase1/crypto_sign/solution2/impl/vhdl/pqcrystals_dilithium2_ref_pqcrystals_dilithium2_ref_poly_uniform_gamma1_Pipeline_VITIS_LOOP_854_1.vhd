-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium2_ref_pqcrystals_dilithium2_ref_poly_uniform_gamma1_Pipeline_VITIS_LOOP_854_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_offset : IN STD_LOGIC_VECTOR (1 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
end;


architecture behav of pqcrystals_dilithium2_ref_pqcrystals_dilithium2_ref_poly_uniform_gamma1_Pipeline_VITIS_LOOP_854_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv19_20000 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln854_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal reg_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln854_reg_720 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_248 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln855_fu_276_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln855_reg_724 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln855_fu_292_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln855_reg_730 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_397_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_771 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln855_1_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln856_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln857_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln861_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln855_2_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln862_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln866_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln860_2_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln867_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln871_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln865_2_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln872_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln870_2_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_116 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln854_fu_266_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_30 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln875_fu_390_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln876_fu_510_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln877_fu_612_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln878_fu_698_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln855_1_fu_280_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln855_fu_288_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_62_cast1_fu_272_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln856_fu_303_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln857_fu_319_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln861_fu_329_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_387_fu_339_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln858_fu_352_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_356_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln862_fu_370_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln866_fu_380_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln860_fu_366_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln_fu_404_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln860_fu_418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_388_fu_424_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln860_1_fu_414_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln861_fu_436_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_452_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_389_fu_444_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln863_fu_440_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_421_fu_466_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln863_fu_460_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln_fu_476_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln867_fu_490_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln871_fu_500_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln865_fu_486_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln7_fu_517_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln865_fu_531_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_390_fu_536_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln865_1_fu_527_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln866_fu_548_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_422_fu_564_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_391_fu_556_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln868_fu_552_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_423_fu_578_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln868_fu_572_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln8_fu_588_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln872_fu_602_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln870_fu_598_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln8_fu_619_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln870_fu_633_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_392_fu_638_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln870_1_fu_629_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln871_fu_650_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_424_fu_662_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_393_fu_654_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_425_fu_676_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln872_fu_670_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln9_fu_684_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln875_fu_694_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pqcrystals_dilithium2_ref_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component pqcrystals_dilithium2_ref_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln854_fu_260_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_116 <= add_ln854_fu_266_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_116 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln854_fu_260_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln855_reg_730 <= add_ln855_fu_292_p2;
                trunc_ln855_reg_724 <= trunc_ln855_fu_276_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln854_reg_720 <= icmp_ln854_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln854_reg_720 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln854_reg_720 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln854_reg_720 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln854_reg_720 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then
                reg_244 <= buf_r_q1;
                reg_248 <= buf_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln854_reg_720 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    shl_ln_reg_771(7 downto 2) <= shl_ln_fu_397_p3(7 downto 2);
            end if;
        end if;
    end process;
    shl_ln_reg_771(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage4_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln855_2_fu_347_p1, ap_block_pp0_stage2, zext_ln860_2_fu_431_p1, ap_block_pp0_stage3, zext_ln865_2_fu_543_p1, ap_block_pp0_stage4, zext_ln870_2_fu_645_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_address0 <= zext_ln870_2_fu_645_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            a_address0 <= zext_ln865_2_fu_543_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            a_address0 <= zext_ln860_2_fu_431_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            a_address0 <= zext_ln855_2_fu_347_p1(10 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, sub_ln875_fu_390_p2, sub_ln876_fu_510_p2, sub_ln877_fu_612_p2, sub_ln878_fu_698_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_d0 <= sub_ln878_fu_698_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            a_d0 <= sub_ln877_fu_612_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            a_d0 <= sub_ln876_fu_510_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            a_d0 <= sub_ln875_fu_390_p2;
        else 
            a_d0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, icmp_ln854_reg_720, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln854_reg_720 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln854_reg_720 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln854_reg_720 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln854_fu_266_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_30) + unsigned(ap_const_lv7_1));
    add_ln855_fu_292_p2 <= std_logic_vector(unsigned(zext_ln855_fu_288_p1) + unsigned(i_62_cast1_fu_272_p1));
    add_ln856_fu_303_p2 <= std_logic_vector(unsigned(add_ln855_fu_292_p2) + unsigned(ap_const_lv10_1));
    add_ln857_fu_319_p2 <= std_logic_vector(unsigned(add_ln855_reg_730) + unsigned(ap_const_lv10_2));
    add_ln861_fu_329_p2 <= std_logic_vector(unsigned(add_ln855_reg_730) + unsigned(ap_const_lv10_3));
    add_ln862_fu_370_p2 <= std_logic_vector(unsigned(add_ln855_reg_730) + unsigned(ap_const_lv10_4));
    add_ln866_fu_380_p2 <= std_logic_vector(unsigned(add_ln855_reg_730) + unsigned(ap_const_lv10_5));
    add_ln867_fu_490_p2 <= std_logic_vector(unsigned(add_ln855_reg_730) + unsigned(ap_const_lv10_6));
    add_ln871_fu_500_p2 <= std_logic_vector(unsigned(add_ln855_reg_730) + unsigned(ap_const_lv10_7));
    add_ln872_fu_602_p2 <= std_logic_vector(unsigned(add_ln855_reg_730) + unsigned(ap_const_lv10_8));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln854_fu_260_p2)
    begin
        if (((icmp_ln854_fu_260_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_30_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_116, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_30 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_30 <= i_fu_116;
        end if; 
    end process;


    buf_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln856_fu_309_p1, ap_block_pp0_stage1, zext_ln861_fu_334_p1, ap_block_pp0_stage2, zext_ln866_fu_385_p1, ap_block_pp0_stage3, zext_ln871_fu_505_p1, ap_block_pp0_stage4, zext_ln872_fu_607_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                buf_r_address0 <= zext_ln872_fu_607_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                buf_r_address0 <= zext_ln871_fu_505_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                buf_r_address0 <= zext_ln866_fu_385_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                buf_r_address0 <= zext_ln861_fu_334_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                buf_r_address0 <= zext_ln856_fu_309_p1(10 - 1 downto 0);
            else 
                buf_r_address0 <= "XXXXXXXXXX";
            end if;
        else 
            buf_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buf_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, zext_ln855_1_fu_298_p1, ap_block_pp0_stage0, zext_ln857_fu_324_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln862_fu_375_p1, ap_block_pp0_stage3, zext_ln867_fu_495_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                buf_r_address1 <= zext_ln867_fu_495_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                buf_r_address1 <= zext_ln862_fu_375_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                buf_r_address1 <= zext_ln857_fu_324_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                buf_r_address1 <= zext_ln855_1_fu_298_p1(10 - 1 downto 0);
            else 
                buf_r_address1 <= "XXXXXXXXXX";
            end if;
        else 
            buf_r_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    buf_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            buf_r_ce1 <= ap_const_logic_1;
        else 
            buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    i_62_cast1_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_30),10));
    icmp_ln854_fu_260_p2 <= "1" when (ap_sig_allocacmp_i_30 = ap_const_lv7_40) else "0";
    lshr_ln7_fu_517_p4 <= reg_244(7 downto 4);
    lshr_ln8_fu_619_p4 <= reg_244(7 downto 6);
    lshr_ln_fu_404_p4 <= reg_244(7 downto 2);
    or_ln860_fu_418_p2 <= (shl_ln_fu_397_p3 or ap_const_lv8_1);
    or_ln863_fu_460_p2 <= (tmp_fu_452_p3 or tmp_389_fu_444_p3);
    or_ln865_fu_531_p2 <= (shl_ln_reg_771 or ap_const_lv8_2);
    or_ln868_fu_572_p2 <= (tmp_422_fu_564_p3 or tmp_391_fu_556_p3);
    or_ln870_fu_633_p2 <= (shl_ln_reg_771 or ap_const_lv8_3);
    or_ln872_fu_670_p2 <= (tmp_424_fu_662_p3 or tmp_393_fu_654_p3);
    or_ln8_fu_588_p4 <= ((trunc_ln868_fu_552_p1 & tmp_423_fu_578_p4) & or_ln868_fu_572_p2);
    or_ln9_fu_684_p4 <= ((buf_r_q0 & tmp_425_fu_676_p3) & or_ln872_fu_670_p2);
    or_ln_fu_476_p4 <= ((trunc_ln863_fu_440_p1 & tmp_421_fu_466_p4) & or_ln863_fu_460_p2);
    shl_ln855_1_fu_280_p3 <= (trunc_ln855_fu_276_p1 & ap_const_lv3_0);
    shl_ln_fu_397_p3 <= (trunc_ln855_reg_724 & ap_const_lv2_0);
    sub_ln875_fu_390_p2 <= std_logic_vector(unsigned(ap_const_lv19_20000) - unsigned(zext_ln860_fu_366_p1));
    sub_ln876_fu_510_p2 <= std_logic_vector(unsigned(ap_const_lv19_20000) - unsigned(zext_ln865_fu_486_p1));
    sub_ln877_fu_612_p2 <= std_logic_vector(unsigned(ap_const_lv19_20000) - unsigned(zext_ln870_fu_598_p1));
    sub_ln878_fu_698_p2 <= std_logic_vector(unsigned(ap_const_lv19_20000) - unsigned(zext_ln875_fu_694_p1));
    tmp_387_fu_339_p4 <= ((a_offset & trunc_ln855_reg_724) & ap_const_lv2_0);
    tmp_388_fu_424_p3 <= (a_offset & or_ln860_fu_418_p2);
    tmp_389_fu_444_p3 <= (ap_const_lv1_0 & zext_ln860_1_fu_414_p1);
    tmp_390_fu_536_p3 <= (a_offset & or_ln865_fu_531_p2);
    tmp_391_fu_556_p3 <= (ap_const_lv1_0 & zext_ln865_1_fu_527_p1);
    tmp_392_fu_638_p3 <= (a_offset & or_ln870_fu_633_p2);
    tmp_393_fu_654_p3 <= (ap_const_lv1_0 & zext_ln870_1_fu_629_p1);
    tmp_421_fu_466_p4 <= reg_248(7 downto 3);
    tmp_422_fu_564_p3 <= (trunc_ln866_fu_548_p1 & ap_const_lv4_0);
    tmp_423_fu_578_p4 <= reg_248(7 downto 5);
    tmp_424_fu_662_p3 <= (trunc_ln871_fu_650_p1 & ap_const_lv2_0);
    tmp_425_fu_676_p3 <= reg_248(7 downto 7);
    tmp_fu_452_p3 <= (trunc_ln861_fu_436_p1 & ap_const_lv6_0);
    tmp_s_fu_356_p4 <= ((trunc_ln858_fu_352_p1 & reg_248) & reg_244);
    trunc_ln855_fu_276_p1 <= ap_sig_allocacmp_i_30(6 - 1 downto 0);
    trunc_ln858_fu_352_p1 <= buf_r_q1(2 - 1 downto 0);
    trunc_ln861_fu_436_p1 <= reg_248(3 - 1 downto 0);
    trunc_ln863_fu_440_p1 <= buf_r_q1(4 - 1 downto 0);
    trunc_ln866_fu_548_p1 <= reg_248(5 - 1 downto 0);
    trunc_ln868_fu_552_p1 <= buf_r_q1(6 - 1 downto 0);
    trunc_ln871_fu_650_p1 <= reg_248(7 - 1 downto 0);
    zext_ln855_1_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln855_fu_292_p2),64));
    zext_ln855_2_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_387_fu_339_p4),64));
    zext_ln855_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln855_1_fu_280_p3),10));
    zext_ln856_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln856_fu_303_p2),64));
    zext_ln857_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln857_fu_319_p2),64));
    zext_ln860_1_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_404_p4),8));
    zext_ln860_2_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_388_fu_424_p3),64));
    zext_ln860_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_356_p4),19));
    zext_ln861_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln861_fu_329_p2),64));
    zext_ln862_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln862_fu_370_p2),64));
    zext_ln865_1_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln7_fu_517_p4),8));
    zext_ln865_2_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_390_fu_536_p3),64));
    zext_ln865_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_476_p4),19));
    zext_ln866_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln866_fu_380_p2),64));
    zext_ln867_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln867_fu_490_p2),64));
    zext_ln870_1_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln8_fu_619_p4),8));
    zext_ln870_2_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_392_fu_638_p3),64));
    zext_ln870_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln8_fu_588_p4),19));
    zext_ln871_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln871_fu_500_p2),64));
    zext_ln872_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln872_fu_602_p2),64));
    zext_ln875_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln9_fu_684_p4),19));
end behav;
