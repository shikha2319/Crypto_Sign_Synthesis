-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium2_ref_pqcrystals_dilithium2_ref_signature_1_Pipeline_VITIS_LOOP_371_1_VITIS_LOOP_225_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    w1_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    w1_vec_coeffs_ce0 : OUT STD_LOGIC;
    w1_vec_coeffs_we0 : OUT STD_LOGIC;
    w1_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w1_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    w1_vec_coeffs_ce1 : OUT STD_LOGIC;
    w1_vec_coeffs_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    w0_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    w0_vec_coeffs_ce0 : OUT STD_LOGIC;
    w0_vec_coeffs_we0 : OUT STD_LOGIC;
    w0_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of pqcrystals_dilithium2_ref_pqcrystals_dilithium2_ref_signature_1_Pipeline_VITIS_LOOP_371_1_VITIS_LOOP_225_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv9_2B : STD_LOGIC_VECTOR (8 downto 0) := "000101011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_3FF000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001111111111000000000000";
    constant ap_const_lv32_7FE001 : STD_LOGIC_VECTOR (31 downto 0) := "00000000011111111110000000000001";
    constant ap_const_lv32_2C0B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010110000001011";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv27_7FD1800 : STD_LOGIC_VECTOR (26 downto 0) := "111111111010001100000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln371_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln226_1_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln226_1_reg_380 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln226_1_reg_380_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln226_1_reg_380_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln226_1_reg_380_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln226_1_reg_380_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln226_1_reg_380_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln226_1_reg_380_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w1_vec_coeffs_addr_reg_385 : STD_LOGIC_VECTOR (9 downto 0);
    signal w1_vec_coeffs_addr_reg_385_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal w1_vec_coeffs_addr_reg_385_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal w1_vec_coeffs_addr_reg_385_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal w1_vec_coeffs_load_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_vec_coeffs_load_reg_391_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_vec_coeffs_load_reg_391_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_vec_coeffs_load_reg_391_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_vec_coeffs_load_reg_391_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_80 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln225_fu_213_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (8 downto 0);
    signal i_11_fu_84 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln371_1_fu_178_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_11_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten41_fu_88 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln371_1_fu_146_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten41_load : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln225_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln371_fu_158_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln226_fu_186_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln371_fu_170_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_190_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln226_fu_198_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln226_fu_202_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln42_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a1_fu_240_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal a1_1_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a1_1_fu_254_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln40_fu_263_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln48_fu_267_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_273_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln48_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln48_fu_287_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal a1_2_fu_295_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_346_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln52_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sub_ln52_fu_310_p2 : signal is "no";
    signal tmp_1_fu_315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_323_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_346_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pqcrystals_dilithium2_ref_mac_muladd_25s_14ns_24ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pqcrystals_dilithium2_ref_mac_muladd_8s_19s_32s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pqcrystals_dilithium2_ref_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_25s_14ns_24ns_32_4_1_U234 : component pqcrystals_dilithium2_ref_mac_muladd_25s_14ns_24ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 14,
        din2_WIDTH => 24,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a1_fu_240_p4,
        din1 => grp_fu_337_p1,
        din2 => grp_fu_337_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_337_p3);

    mac_muladd_8s_19s_32s_32_4_1_U235 : component pqcrystals_dilithium2_ref_mac_muladd_8s_19s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 19,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a1_2_fu_295_p2,
        din1 => grp_fu_346_p1,
        din2 => w1_vec_coeffs_load_reg_391_pp0_iter5_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_346_p3);

    flow_control_loop_pipe_sequential_init_U : component pqcrystals_dilithium2_ref_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    i_11_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln371_fu_140_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_11_fu_84 <= select_ln371_1_fu_178_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_11_fu_84 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln371_fu_140_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_80 <= add_ln225_fu_213_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_80 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten41_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln371_fu_140_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten41_fu_88 <= add_ln371_1_fu_146_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten41_fu_88 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                w1_vec_coeffs_addr_reg_385_pp0_iter1_reg <= w1_vec_coeffs_addr_reg_385;
                    zext_ln226_1_reg_380_pp0_iter1_reg(9 downto 0) <= zext_ln226_1_reg_380(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                w1_vec_coeffs_addr_reg_385_pp0_iter2_reg <= w1_vec_coeffs_addr_reg_385_pp0_iter1_reg;
                w1_vec_coeffs_addr_reg_385_pp0_iter3_reg <= w1_vec_coeffs_addr_reg_385_pp0_iter2_reg;
                w1_vec_coeffs_load_reg_391_pp0_iter2_reg <= w1_vec_coeffs_load_reg_391;
                w1_vec_coeffs_load_reg_391_pp0_iter3_reg <= w1_vec_coeffs_load_reg_391_pp0_iter2_reg;
                w1_vec_coeffs_load_reg_391_pp0_iter4_reg <= w1_vec_coeffs_load_reg_391_pp0_iter3_reg;
                w1_vec_coeffs_load_reg_391_pp0_iter5_reg <= w1_vec_coeffs_load_reg_391_pp0_iter4_reg;
                    zext_ln226_1_reg_380_pp0_iter2_reg(9 downto 0) <= zext_ln226_1_reg_380_pp0_iter1_reg(9 downto 0);
                    zext_ln226_1_reg_380_pp0_iter3_reg(9 downto 0) <= zext_ln226_1_reg_380_pp0_iter2_reg(9 downto 0);
                    zext_ln226_1_reg_380_pp0_iter4_reg(9 downto 0) <= zext_ln226_1_reg_380_pp0_iter3_reg(9 downto 0);
                    zext_ln226_1_reg_380_pp0_iter5_reg(9 downto 0) <= zext_ln226_1_reg_380_pp0_iter4_reg(9 downto 0);
                    zext_ln226_1_reg_380_pp0_iter6_reg(9 downto 0) <= zext_ln226_1_reg_380_pp0_iter5_reg(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln371_fu_140_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w1_vec_coeffs_addr_reg_385 <= zext_ln226_1_fu_208_p1(10 - 1 downto 0);
                    zext_ln226_1_reg_380(9 downto 0) <= zext_ln226_1_fu_208_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w1_vec_coeffs_load_reg_391 <= w1_vec_coeffs_q1;
            end if;
        end if;
    end process;
    zext_ln226_1_reg_380(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln226_1_reg_380_pp0_iter1_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln226_1_reg_380_pp0_iter2_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln226_1_reg_380_pp0_iter3_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln226_1_reg_380_pp0_iter4_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln226_1_reg_380_pp0_iter5_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln226_1_reg_380_pp0_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a1_1_fu_254_p1 <= grp_fu_337_p3;
    a1_1_fu_254_p4 <= a1_1_fu_254_p1(31 downto 24);
    a1_2_fu_295_p2 <= (select_ln48_fu_287_p3 and a1_1_fu_254_p4);
    a1_fu_240_p4 <= add_ln42_fu_234_p2(31 downto 7);
    add_ln225_fu_213_p2 <= std_logic_vector(unsigned(select_ln371_fu_170_p3) + unsigned(ap_const_lv9_1));
    add_ln226_fu_202_p2 <= std_logic_vector(unsigned(tmp_s_fu_190_p3) + unsigned(zext_ln226_fu_198_p1));
    add_ln371_1_fu_146_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten41_load) + unsigned(ap_const_lv11_1));
    add_ln371_fu_158_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_11_load) + unsigned(ap_const_lv3_1));
    add_ln42_fu_234_p2 <= std_logic_vector(unsigned(w1_vec_coeffs_q1) + unsigned(ap_const_lv32_7F));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln371_fu_140_p2)
    begin
        if (((icmp_ln371_fu_140_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_11_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_11_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_11_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_11_load <= i_11_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_80, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten41_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten41_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten41_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten41_load <= indvar_flatten41_fu_88;
        end if; 
    end process;

    grp_fu_337_p1 <= ap_const_lv32_2C0B(14 - 1 downto 0);
    grp_fu_337_p2 <= ap_const_lv32_800000(24 - 1 downto 0);
    grp_fu_346_p1 <= ap_const_lv27_7FD1800(19 - 1 downto 0);
    icmp_ln225_fu_164_p2 <= "1" when (ap_sig_allocacmp_i_load = ap_const_lv9_100) else "0";
    icmp_ln371_fu_140_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten41_load = ap_const_lv11_400) else "0";
    select_ln371_1_fu_178_p3 <= 
        add_ln371_fu_158_p2 when (icmp_ln225_fu_164_p2(0) = '1') else 
        ap_sig_allocacmp_i_11_load;
    select_ln371_fu_170_p3 <= 
        ap_const_lv9_0 when (icmp_ln225_fu_164_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln48_fu_287_p3 <= 
        ap_const_lv8_FF when (xor_ln48_fu_281_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln52_fu_323_p3 <= 
        ap_const_lv32_7FE001 when (tmp_1_fu_315_p3(0) = '1') else 
        ap_const_lv32_0;
        sext_ln40_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a1_1_fu_254_p4),9));

    sub_ln48_fu_267_p2 <= std_logic_vector(unsigned(ap_const_lv9_2B) - unsigned(sext_ln40_fu_263_p1));
    sub_ln52_fu_310_p2 <= std_logic_vector(unsigned(ap_const_lv32_3FF000) - unsigned(grp_fu_346_p3));
    tmp_1_fu_315_p3 <= sub_ln52_fu_310_p2(31 downto 31);
    tmp_fu_273_p3 <= sub_ln48_fu_267_p2(8 downto 8);
    tmp_s_fu_190_p3 <= (trunc_ln226_fu_186_p1 & ap_const_lv8_0);
    trunc_ln226_fu_186_p1 <= select_ln371_1_fu_178_p3(2 - 1 downto 0);
    w0_vec_coeffs_address0 <= zext_ln226_1_reg_380_pp0_iter6_reg(10 - 1 downto 0);

    w0_vec_coeffs_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            w0_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            w0_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w0_vec_coeffs_d0 <= std_logic_vector(signed(grp_fu_346_p3) - signed(select_ln52_fu_323_p3));

    w0_vec_coeffs_we0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            w0_vec_coeffs_we0 <= ap_const_logic_1;
        else 
            w0_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w1_vec_coeffs_address0 <= w1_vec_coeffs_addr_reg_385_pp0_iter3_reg;
    w1_vec_coeffs_address1 <= zext_ln226_1_fu_208_p1(10 - 1 downto 0);

    w1_vec_coeffs_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            w1_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            w1_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w1_vec_coeffs_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w1_vec_coeffs_ce1 <= ap_const_logic_1;
        else 
            w1_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        w1_vec_coeffs_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(a1_2_fu_295_p2),32));


    w1_vec_coeffs_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            w1_vec_coeffs_we0 <= ap_const_logic_1;
        else 
            w1_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln48_fu_281_p2 <= (tmp_fu_273_p3 xor ap_const_lv1_1);
    zext_ln226_1_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln226_fu_202_p2),64));
    zext_ln226_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln371_fu_170_p3),10));
end behav;
