// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pqcrystals_dilithium2_ref_pqcrystals_dilithium2_ref_poly_uniform_gamma1_Pipeline_VITIS_LOOP_416_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        seed_address0,
        seed_ce0,
        seed_q0,
        seed_address1,
        seed_ce1,
        seed_q1,
        state_s_address0,
        state_s_ce0,
        state_s_we0,
        state_s_d0,
        state_s_address1,
        state_s_ce1,
        state_s_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] seed_address0;
output   seed_ce0;
input  [7:0] seed_q0;
output  [7:0] seed_address1;
output   seed_ce1;
input  [7:0] seed_q1;
output  [4:0] state_s_address0;
output   state_s_ce0;
output   state_s_we0;
output  [63:0] state_s_d0;
output  [4:0] state_s_address1;
output   state_s_ce1;
input  [63:0] state_s_q1;

reg ap_idle;
reg[7:0] seed_address0;
reg seed_ce0;
reg[7:0] seed_address1;
reg seed_ce1;
reg state_s_ce0;
reg state_s_we0;
reg state_s_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln416_fu_152_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln416_reg_365;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] shl_ln_fu_169_p3;
reg   [5:0] shl_ln_reg_369;
reg   [4:0] state_s_addr_reg_389;
reg   [7:0] seed_load_reg_395;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] seed_load_1_reg_400;
reg   [63:0] state_s_load_reg_415;
reg   [7:0] seed_load_2_reg_420;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [7:0] seed_load_3_reg_425;
reg   [7:0] seed_load_4_reg_440;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] seed_load_5_reg_445;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln31_16_fu_187_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln31_18_fu_208_p1;
wire   [63:0] zext_ln416_fu_164_p1;
wire   [63:0] zext_ln31_20_fu_233_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln31_22_fu_253_p1;
wire   [63:0] zext_ln31_24_fu_273_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln31_26_fu_293_p1;
wire   [63:0] zext_ln31_28_fu_313_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln31_30_fu_333_p1;
reg   [2:0] i_fu_50;
wire   [2:0] i_33_fu_158_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_32;
wire   [7:0] zext_ln31_fu_177_p1;
wire   [7:0] add_ln31_fu_181_p2;
wire   [5:0] or_ln31_fu_192_p2;
wire   [7:0] zext_ln31_17_fu_198_p1;
wire   [7:0] add_ln31_8_fu_202_p2;
wire   [5:0] or_ln31_7_fu_218_p2;
wire   [7:0] zext_ln31_19_fu_223_p1;
wire   [7:0] add_ln31_9_fu_227_p2;
wire   [5:0] or_ln31_8_fu_238_p2;
wire   [7:0] zext_ln31_21_fu_243_p1;
wire   [7:0] add_ln31_10_fu_247_p2;
wire   [5:0] or_ln31_9_fu_258_p2;
wire   [7:0] zext_ln31_23_fu_263_p1;
wire   [7:0] add_ln31_11_fu_267_p2;
wire   [5:0] or_ln31_10_fu_278_p2;
wire   [7:0] zext_ln31_25_fu_283_p1;
wire   [7:0] add_ln31_12_fu_287_p2;
wire   [5:0] or_ln31_11_fu_298_p2;
wire   [7:0] zext_ln31_27_fu_303_p1;
wire   [7:0] add_ln31_13_fu_307_p2;
wire   [5:0] or_ln31_12_fu_318_p2;
wire   [7:0] zext_ln31_29_fu_323_p1;
wire   [7:0] add_ln31_14_fu_327_p2;
wire   [63:0] r_15_7_i_fu_338_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

pqcrystals_dilithium2_ref_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln416_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_50 <= i_33_fu_158_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln416_reg_365 <= icmp_ln416_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln416_reg_365 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        seed_load_1_reg_400 <= seed_q0;
        seed_load_reg_395 <= seed_q1;
        state_s_load_reg_415 <= state_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln416_reg_365 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        seed_load_2_reg_420 <= seed_q1;
        seed_load_3_reg_425 <= seed_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln416_reg_365 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        seed_load_4_reg_440 <= seed_q1;
        seed_load_5_reg_445 <= seed_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln416_fu_152_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shl_ln_reg_369[5 : 3] <= shl_ln_fu_169_p3[5 : 3];
        state_s_addr_reg_389[2 : 0] <= zext_ln416_fu_164_p1[2 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln416_fu_152_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_32 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_32 = i_fu_50;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            seed_address0 = zext_ln31_30_fu_333_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            seed_address0 = zext_ln31_26_fu_293_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            seed_address0 = zext_ln31_22_fu_253_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            seed_address0 = zext_ln31_18_fu_208_p1;
        end else begin
            seed_address0 = 'bx;
        end
    end else begin
        seed_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            seed_address1 = zext_ln31_28_fu_313_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            seed_address1 = zext_ln31_24_fu_273_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            seed_address1 = zext_ln31_20_fu_233_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            seed_address1 = zext_ln31_16_fu_187_p1;
        end else begin
            seed_address1 = 'bx;
        end
    end else begin
        seed_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        seed_ce0 = 1'b1;
    end else begin
        seed_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        seed_ce1 = 1'b1;
    end else begin
        seed_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_s_ce0 = 1'b1;
    end else begin
        state_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_s_ce1 = 1'b1;
    end else begin
        state_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_s_we0 = 1'b1;
    end else begin
        state_s_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_10_fu_247_p2 = ($signed(zext_ln31_21_fu_243_p1) + $signed(8'd160));

assign add_ln31_11_fu_267_p2 = ($signed(zext_ln31_23_fu_263_p1) + $signed(8'd160));

assign add_ln31_12_fu_287_p2 = ($signed(zext_ln31_25_fu_283_p1) + $signed(8'd160));

assign add_ln31_13_fu_307_p2 = ($signed(zext_ln31_27_fu_303_p1) + $signed(8'd160));

assign add_ln31_14_fu_327_p2 = ($signed(zext_ln31_29_fu_323_p1) + $signed(8'd160));

assign add_ln31_8_fu_202_p2 = ($signed(zext_ln31_17_fu_198_p1) + $signed(8'd160));

assign add_ln31_9_fu_227_p2 = ($signed(zext_ln31_19_fu_223_p1) + $signed(8'd160));

assign add_ln31_fu_181_p2 = ($signed(zext_ln31_fu_177_p1) + $signed(8'd160));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_33_fu_158_p2 = (ap_sig_allocacmp_i_32 + 3'd1);

assign icmp_ln416_fu_152_p2 = ((ap_sig_allocacmp_i_32 == 3'd6) ? 1'b1 : 1'b0);

assign or_ln31_10_fu_278_p2 = (shl_ln_reg_369 | 6'd5);

assign or_ln31_11_fu_298_p2 = (shl_ln_reg_369 | 6'd6);

assign or_ln31_12_fu_318_p2 = (shl_ln_reg_369 | 6'd7);

assign or_ln31_7_fu_218_p2 = (shl_ln_reg_369 | 6'd2);

assign or_ln31_8_fu_238_p2 = (shl_ln_reg_369 | 6'd3);

assign or_ln31_9_fu_258_p2 = (shl_ln_reg_369 | 6'd4);

assign or_ln31_fu_192_p2 = (shl_ln_fu_169_p3 | 6'd1);

assign r_15_7_i_fu_338_p9 = {{{{{{{{seed_q0}, {seed_q1}}, {seed_load_5_reg_445}}, {seed_load_4_reg_440}}, {seed_load_3_reg_425}}, {seed_load_2_reg_420}}, {seed_load_1_reg_400}}, {seed_load_reg_395}};

assign shl_ln_fu_169_p3 = {{ap_sig_allocacmp_i_32}, {3'd0}};

assign state_s_address0 = state_s_addr_reg_389;

assign state_s_address1 = zext_ln416_fu_164_p1;

assign state_s_d0 = (state_s_load_reg_415 ^ r_15_7_i_fu_338_p9);

assign zext_ln31_16_fu_187_p1 = add_ln31_fu_181_p2;

assign zext_ln31_17_fu_198_p1 = or_ln31_fu_192_p2;

assign zext_ln31_18_fu_208_p1 = add_ln31_8_fu_202_p2;

assign zext_ln31_19_fu_223_p1 = or_ln31_7_fu_218_p2;

assign zext_ln31_20_fu_233_p1 = add_ln31_9_fu_227_p2;

assign zext_ln31_21_fu_243_p1 = or_ln31_8_fu_238_p2;

assign zext_ln31_22_fu_253_p1 = add_ln31_10_fu_247_p2;

assign zext_ln31_23_fu_263_p1 = or_ln31_9_fu_258_p2;

assign zext_ln31_24_fu_273_p1 = add_ln31_11_fu_267_p2;

assign zext_ln31_25_fu_283_p1 = or_ln31_10_fu_278_p2;

assign zext_ln31_26_fu_293_p1 = add_ln31_12_fu_287_p2;

assign zext_ln31_27_fu_303_p1 = or_ln31_11_fu_298_p2;

assign zext_ln31_28_fu_313_p1 = add_ln31_13_fu_307_p2;

assign zext_ln31_29_fu_323_p1 = or_ln31_12_fu_318_p2;

assign zext_ln31_30_fu_333_p1 = add_ln31_14_fu_327_p2;

assign zext_ln31_fu_177_p1 = shl_ln_fu_169_p3;

assign zext_ln416_fu_164_p1 = ap_sig_allocacmp_i_32;

always @ (posedge ap_clk) begin
    shl_ln_reg_369[2:0] <= 3'b000;
    state_s_addr_reg_389[4:3] <= 2'b00;
end

endmodule //pqcrystals_dilithium2_ref_pqcrystals_dilithium2_ref_poly_uniform_gamma1_Pipeline_VITIS_LOOP_416_5
