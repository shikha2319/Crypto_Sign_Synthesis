// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pqcrystals_dilithium2_ref_keccak_absorb_1_Pipeline_VITIS_LOOP_400_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        trunc_ln400_1,
        m_offset_cast,
        m_addr_1_idx,
        sm_address0,
        sm_ce0,
        sm_q0,
        sm_address1,
        sm_ce1,
        sm_q1,
        trunc_ln57,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_address1,
        s_ce1,
        s_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [28:0] trunc_ln400_1;
input  [11:0] m_offset_cast;
input  [12:0] m_addr_1_idx;
output  [12:0] sm_address0;
output   sm_ce0;
input  [7:0] sm_q0;
output  [12:0] sm_address1;
output   sm_ce1;
input  [7:0] sm_q1;
input  [4:0] trunc_ln57;
output  [4:0] s_address0;
output   s_ce0;
output   s_we0;
output  [63:0] s_d0;
output  [4:0] s_address1;
output   s_ce1;
input  [63:0] s_q1;

reg ap_idle;
reg[12:0] sm_address0;
reg sm_ce0;
reg[12:0] sm_address1;
reg sm_ce1;
reg s_ce0;
reg s_we0;
reg s_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln400_fu_216_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [12:0] m_offset_cast_cast_fu_194_p1;
reg   [12:0] m_offset_cast_cast_reg_429;
reg   [0:0] icmp_ln400_reg_434;
wire    ap_block_pp0_stage1_11001;
wire   [12:0] add_ln31_22_fu_248_p2;
reg   [12:0] add_ln31_22_reg_438;
reg   [4:0] s_addr_reg_458;
wire   [0:0] addr_cmp_fu_282_p2;
reg   [0:0] addr_cmp_reg_464;
reg   [7:0] sm_load_1_reg_469;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [7:0] sm_load_2_reg_474;
reg   [63:0] s_load_reg_489;
reg   [7:0] sm_load_3_reg_494;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] sm_load_5_reg_499;
reg   [7:0] sm_load_6_reg_514;
reg   [7:0] sm_load_7_reg_519;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln31_53_fu_253_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln31_54_fu_264_p1;
wire   [63:0] zext_ln401_fu_274_p1;
wire   [63:0] zext_ln31_fu_303_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln31_55_fu_313_p1;
wire   [63:0] zext_ln31_56_fu_323_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln31_57_fu_333_p1;
wire   [63:0] zext_ln31_58_fu_343_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln31_59_fu_353_p1;
reg   [63:0] reuse_addr_reg_fu_68;
wire    ap_loop_init;
reg   [63:0] reuse_reg_fu_72;
wire   [63:0] xor_ln401_fu_381_p2;
reg   [28:0] i_fu_76;
wire   [28:0] add_ln400_fu_221_p2;
wire   [9:0] trunc_ln401_fu_231_p1;
wire   [12:0] shl_ln_fu_235_p3;
wire   [12:0] add_ln31_fu_243_p2;
wire   [12:0] add_ln31_23_fu_258_p2;
wire   [4:0] empty_fu_227_p1;
wire   [4:0] add_ln401_fu_269_p2;
wire   [12:0] add_ln31_24_fu_298_p2;
wire   [12:0] add_ln31_25_fu_308_p2;
wire   [12:0] add_ln31_26_fu_318_p2;
wire   [12:0] add_ln31_27_fu_328_p2;
wire   [12:0] add_ln31_28_fu_338_p2;
wire   [12:0] add_ln31_29_fu_348_p2;
wire   [63:0] reuse_select_fu_375_p3;
wire   [63:0] r_3_7_fu_358_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

pqcrystals_dilithium2_ref_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_76 <= 29'd0;
    end else if (((icmp_ln400_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_76 <= add_ln400_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reuse_addr_reg_fu_68 <= 64'd18446744073709551615;
    end else if (((icmp_ln400_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reuse_addr_reg_fu_68 <= zext_ln401_fu_274_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reuse_reg_fu_72 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reuse_reg_fu_72 <= xor_ln401_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln400_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln31_22_reg_438 <= add_ln31_22_fu_248_p2;
        addr_cmp_reg_464 <= addr_cmp_fu_282_p2;
        s_addr_reg_458 <= zext_ln401_fu_274_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln400_reg_434 <= icmp_ln400_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_offset_cast_cast_reg_429[11 : 0] <= m_offset_cast_cast_fu_194_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln400_reg_434 == 1'd0))) begin
        s_load_reg_489 <= s_q1;
        sm_load_1_reg_469 <= sm_q1;
        sm_load_2_reg_474 <= sm_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln400_reg_434 == 1'd0))) begin
        sm_load_3_reg_494 <= sm_q1;
        sm_load_5_reg_499 <= sm_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln400_reg_434 == 1'd0))) begin
        sm_load_6_reg_514 <= sm_q1;
        sm_load_7_reg_519 <= sm_q0;
    end
end

always @ (*) begin
    if (((icmp_ln400_fu_216_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        s_ce0 = 1'b1;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        s_ce1 = 1'b1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        s_we0 = 1'b1;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sm_address0 = zext_ln31_59_fu_353_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        sm_address0 = zext_ln31_57_fu_333_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sm_address0 = zext_ln31_55_fu_313_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sm_address0 = zext_ln31_54_fu_264_p1;
    end else begin
        sm_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sm_address1 = zext_ln31_58_fu_343_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        sm_address1 = zext_ln31_56_fu_323_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sm_address1 = zext_ln31_fu_303_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sm_address1 = zext_ln31_53_fu_253_p1;
    end else begin
        sm_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        sm_ce0 = 1'b1;
    end else begin
        sm_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        sm_ce1 = 1'b1;
    end else begin
        sm_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_22_fu_248_p2 = (add_ln31_fu_243_p2 + m_addr_1_idx);

assign add_ln31_23_fu_258_p2 = (add_ln31_22_fu_248_p2 + 13'd1);

assign add_ln31_24_fu_298_p2 = (add_ln31_22_reg_438 + 13'd2);

assign add_ln31_25_fu_308_p2 = (add_ln31_22_reg_438 + 13'd3);

assign add_ln31_26_fu_318_p2 = (add_ln31_22_reg_438 + 13'd4);

assign add_ln31_27_fu_328_p2 = (add_ln31_22_reg_438 + 13'd5);

assign add_ln31_28_fu_338_p2 = (add_ln31_22_reg_438 + 13'd6);

assign add_ln31_29_fu_348_p2 = (add_ln31_22_reg_438 + 13'd7);

assign add_ln31_fu_243_p2 = (shl_ln_fu_235_p3 + m_offset_cast_cast_reg_429);

assign add_ln400_fu_221_p2 = (i_fu_76 + 29'd1);

assign add_ln401_fu_269_p2 = (empty_fu_227_p1 + trunc_ln57);

assign addr_cmp_fu_282_p2 = ((reuse_addr_reg_fu_68 == zext_ln401_fu_274_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign empty_fu_227_p1 = i_fu_76[4:0];

assign icmp_ln400_fu_216_p2 = ((i_fu_76 == trunc_ln400_1) ? 1'b1 : 1'b0);

assign m_offset_cast_cast_fu_194_p1 = m_offset_cast;

assign r_3_7_fu_358_p9 = {{{{{{{{sm_q0}, {sm_q1}}, {sm_load_7_reg_519}}, {sm_load_6_reg_514}}, {sm_load_5_reg_499}}, {sm_load_3_reg_494}}, {sm_load_2_reg_474}}, {sm_load_1_reg_469}};

assign reuse_select_fu_375_p3 = ((addr_cmp_reg_464[0:0] == 1'b1) ? reuse_reg_fu_72 : s_load_reg_489);

assign s_address0 = s_addr_reg_458;

assign s_address1 = zext_ln401_fu_274_p1;

assign s_d0 = (reuse_select_fu_375_p3 ^ r_3_7_fu_358_p9);

assign shl_ln_fu_235_p3 = {{trunc_ln401_fu_231_p1}, {3'd0}};

assign trunc_ln401_fu_231_p1 = i_fu_76[9:0];

assign xor_ln401_fu_381_p2 = (reuse_select_fu_375_p3 ^ r_3_7_fu_358_p9);

assign zext_ln31_53_fu_253_p1 = add_ln31_22_fu_248_p2;

assign zext_ln31_54_fu_264_p1 = add_ln31_23_fu_258_p2;

assign zext_ln31_55_fu_313_p1 = add_ln31_25_fu_308_p2;

assign zext_ln31_56_fu_323_p1 = add_ln31_26_fu_318_p2;

assign zext_ln31_57_fu_333_p1 = add_ln31_27_fu_328_p2;

assign zext_ln31_58_fu_343_p1 = add_ln31_28_fu_338_p2;

assign zext_ln31_59_fu_353_p1 = add_ln31_29_fu_348_p2;

assign zext_ln31_fu_303_p1 = add_ln31_24_fu_298_p2;

assign zext_ln401_fu_274_p1 = add_ln401_fu_269_p2;

always @ (posedge ap_clk) begin
    m_offset_cast_cast_reg_429[12] <= 1'b0;
end

endmodule //pqcrystals_dilithium2_ref_keccak_absorb_1_Pipeline_VITIS_LOOP_400_2
