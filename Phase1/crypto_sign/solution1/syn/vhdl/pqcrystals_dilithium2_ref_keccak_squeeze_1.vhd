-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium2_ref_keccak_squeeze_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sm_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sm_ce0 : OUT STD_LOGIC;
    sm_we0 : OUT STD_LOGIC;
    sm_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sm_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sm_ce1 : OUT STD_LOGIC;
    sm_we1 : OUT STD_LOGIC;
    sm_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of pqcrystals_dilithium2_ref_keccak_squeeze_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln540_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln541_1_fu_205_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln541_1_reg_388 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_219_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_393 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln13_reg_403 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln14_reg_408 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln15_reg_413 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln16_reg_418 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln17_reg_423 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln18_reg_428 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_172_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_172_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_172_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_172_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_172_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_172_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_172_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_172_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_172_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_172_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_172_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_172_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_172_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln540_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln542_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln543_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln544_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln545_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln546_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln547_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln548_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_82 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln540_fu_199_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln541_fu_214_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln542_fu_242_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln543_fu_313_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln544_fu_323_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln545_fu_333_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln546_fu_343_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln547_fu_353_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln548_fu_363_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pqcrystals_dilithium2_ref_KeccakF1600_StatePermute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_KeccakF1600_StatePermute_fu_172 : component pqcrystals_dilithium2_ref_KeccakF1600_StatePermute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePermute_fu_172_ap_start,
        ap_done => grp_KeccakF1600_StatePermute_fu_172_ap_done,
        ap_idle => grp_KeccakF1600_StatePermute_fu_172_ap_idle,
        ap_ready => grp_KeccakF1600_StatePermute_fu_172_ap_ready,
        state_address0 => grp_KeccakF1600_StatePermute_fu_172_state_address0,
        state_ce0 => grp_KeccakF1600_StatePermute_fu_172_state_ce0,
        state_we0 => grp_KeccakF1600_StatePermute_fu_172_state_we0,
        state_d0 => grp_KeccakF1600_StatePermute_fu_172_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePermute_fu_172_state_address1,
        state_ce1 => grp_KeccakF1600_StatePermute_fu_172_state_ce1,
        state_we1 => grp_KeccakF1600_StatePermute_fu_172_state_we1,
        state_d1 => grp_KeccakF1600_StatePermute_fu_172_state_d1,
        state_q1 => s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePermute_fu_172_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePermute_fu_172_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_KeccakF1600_StatePermute_fu_172_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePermute_fu_172_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePermute_fu_172_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_82 <= ap_const_lv3_0;
            elsif (((icmp_ln540_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_fu_82 <= add_ln540_fu_199_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    shl_ln_reg_393(4 downto 3) <= shl_ln_fu_219_p3(4 downto 3);
                trunc_ln13_reg_403 <= s_q0(23 downto 16);
                trunc_ln14_reg_408 <= s_q0(31 downto 24);
                trunc_ln15_reg_413 <= s_q0(39 downto 32);
                trunc_ln16_reg_418 <= s_q0(47 downto 40);
                trunc_ln17_reg_423 <= s_q0(55 downto 48);
                trunc_ln18_reg_428 <= s_q0(63 downto 56);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                trunc_ln541_1_reg_388 <= trunc_ln541_1_fu_205_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_393(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln540_fu_193_p2, grp_KeccakF1600_StatePermute_fu_172_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_KeccakF1600_StatePermute_fu_172_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln540_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln540_fu_199_p2 <= std_logic_vector(unsigned(i_fu_82) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_KeccakF1600_StatePermute_fu_172_ap_done)
    begin
        if ((grp_KeccakF1600_StatePermute_fu_172_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln540_fu_193_p2)
    begin
        if ((((icmp_ln540_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln540_fu_193_p2)
    begin
        if (((icmp_ln540_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakF1600_StatePermute_fu_172_ap_start <= grp_KeccakF1600_StatePermute_fu_172_ap_start_reg;
    icmp_ln540_fu_193_p2 <= "1" when (i_fu_82 = ap_const_lv3_4) else "0";
    or_ln542_fu_242_p2 <= (shl_ln_fu_219_p3 or ap_const_lv5_1);
    or_ln543_fu_313_p2 <= (shl_ln_reg_393 or ap_const_lv5_2);
    or_ln544_fu_323_p2 <= (shl_ln_reg_393 or ap_const_lv5_3);
    or_ln545_fu_333_p2 <= (shl_ln_reg_393 or ap_const_lv5_4);
    or_ln546_fu_343_p2 <= (shl_ln_reg_393 or ap_const_lv5_5);
    or_ln547_fu_353_p2 <= (shl_ln_reg_393 or ap_const_lv5_6);
    or_ln548_fu_363_p2 <= (shl_ln_reg_393 or ap_const_lv5_7);

    s_address0_assign_proc : process(ap_CS_fsm_state3, grp_KeccakF1600_StatePermute_fu_172_state_address0, ap_CS_fsm_state2, zext_ln540_fu_188_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_address0 <= zext_ln540_fu_188_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_address0 <= grp_KeccakF1600_StatePermute_fu_172_state_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;

    s_address1 <= grp_KeccakF1600_StatePermute_fu_172_state_address1;

    s_ce0_assign_proc : process(ap_CS_fsm_state3, grp_KeccakF1600_StatePermute_fu_172_state_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_ce0 <= grp_KeccakF1600_StatePermute_fu_172_state_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(grp_KeccakF1600_StatePermute_fu_172_state_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_ce1 <= grp_KeccakF1600_StatePermute_fu_172_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    s_d0 <= grp_KeccakF1600_StatePermute_fu_172_state_d0;
    s_d1 <= grp_KeccakF1600_StatePermute_fu_172_state_d1;

    s_we0_assign_proc : process(grp_KeccakF1600_StatePermute_fu_172_state_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_we0 <= grp_KeccakF1600_StatePermute_fu_172_state_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(grp_KeccakF1600_StatePermute_fu_172_state_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_we1 <= grp_KeccakF1600_StatePermute_fu_172_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_219_p3 <= (trunc_ln541_1_reg_388 & ap_const_lv3_0);

    sm_address0_assign_proc : process(ap_CS_fsm_state4, zext_ln542_fu_248_p1, ap_CS_fsm_state5, zext_ln544_fu_328_p1, ap_CS_fsm_state6, zext_ln546_fu_348_p1, ap_CS_fsm_state7, zext_ln548_fu_368_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sm_address0 <= zext_ln548_fu_368_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sm_address0 <= zext_ln546_fu_348_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sm_address0 <= zext_ln544_fu_328_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sm_address0 <= zext_ln542_fu_248_p1(13 - 1 downto 0);
        else 
            sm_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sm_address1_assign_proc : process(ap_CS_fsm_state4, zext_ln541_fu_226_p1, zext_ln543_fu_318_p1, ap_CS_fsm_state5, zext_ln545_fu_338_p1, ap_CS_fsm_state6, zext_ln547_fu_358_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sm_address1 <= zext_ln547_fu_358_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sm_address1 <= zext_ln545_fu_338_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sm_address1 <= zext_ln543_fu_318_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sm_address1 <= zext_ln541_fu_226_p1(13 - 1 downto 0);
        else 
            sm_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sm_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sm_ce0 <= ap_const_logic_1;
        else 
            sm_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sm_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sm_ce1 <= ap_const_logic_1;
        else 
            sm_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sm_d0_assign_proc : process(s_q0, ap_CS_fsm_state4, trunc_ln14_reg_408, trunc_ln16_reg_418, trunc_ln18_reg_428, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sm_d0 <= trunc_ln18_reg_428;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sm_d0 <= trunc_ln16_reg_418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sm_d0 <= trunc_ln14_reg_408;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sm_d0 <= s_q0(15 downto 8);
        else 
            sm_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sm_d1_assign_proc : process(ap_CS_fsm_state4, trunc_ln13_reg_403, trunc_ln15_reg_413, trunc_ln17_reg_423, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, trunc_ln541_fu_214_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sm_d1 <= trunc_ln17_reg_423;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sm_d1 <= trunc_ln15_reg_413;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sm_d1 <= trunc_ln13_reg_403;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sm_d1 <= trunc_ln541_fu_214_p1;
        else 
            sm_d1 <= "XXXXXXXX";
        end if; 
    end process;


    sm_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sm_we0 <= ap_const_logic_1;
        else 
            sm_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sm_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sm_we1 <= ap_const_logic_1;
        else 
            sm_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln541_1_fu_205_p1 <= i_fu_82(2 - 1 downto 0);
    trunc_ln541_fu_214_p1 <= s_q0(8 - 1 downto 0);
    zext_ln540_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_82),64));
    zext_ln541_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_219_p3),64));
    zext_ln542_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln542_fu_242_p2),64));
    zext_ln543_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln543_fu_313_p2),64));
    zext_ln544_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln544_fu_323_p2),64));
    zext_ln545_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln545_fu_333_p2),64));
    zext_ln546_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln546_fu_343_p2),64));
    zext_ln547_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln547_fu_353_p2),64));
    zext_ln548_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln548_fu_363_p2),64));
end behav;
