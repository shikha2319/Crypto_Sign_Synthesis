-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium2_ref_pqcrystals_dilithium2_ref_pack_sig_1_Pipeline_VITIS_LOOP_167_2_VITIS_LOOP_804_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    z_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    z_ce0 : OUT STD_LOGIC;
    z_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    z_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    z_ce1 : OUT STD_LOGIC;
    z_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sm_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sm_ce0 : OUT STD_LOGIC;
    sm_we0 : OUT STD_LOGIC;
    sm_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of pqcrystals_dilithium2_ref_pqcrystals_dilithium2_ref_pack_sig_1_Pipeline_VITIS_LOOP_167_2_VITIS_LOOP_804_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_20 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_const_lv24_20000 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_const_lv22_20000 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv11_21 : STD_LOGIC_VECTOR (10 downto 0) := "00000100001";
    constant ap_const_lv20_20000 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv11_22 : STD_LOGIC_VECTOR (10 downto 0) := "00000100010";
    constant ap_const_lv11_23 : STD_LOGIC_VECTOR (10 downto 0) := "00000100011";
    constant ap_const_lv11_24 : STD_LOGIC_VECTOR (10 downto 0) := "00000100100";
    constant ap_const_lv11_25 : STD_LOGIC_VECTOR (10 downto 0) := "00000100101";
    constant ap_const_lv11_26 : STD_LOGIC_VECTOR (10 downto 0) := "00000100110";
    constant ap_const_lv11_27 : STD_LOGIC_VECTOR (10 downto 0) := "00000100111";
    constant ap_const_lv11_28 : STD_LOGIC_VECTOR (10 downto 0) := "00000101000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln167_reg_878 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal trunc_ln168_fu_293_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln168_reg_872 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln167_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln804_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln804_reg_882 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln168_1_fu_340_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln168_1_reg_887 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln168_2_fu_344_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln168_2_reg_893 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_356_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_899 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln810_1_fu_410_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln810_1_reg_915 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln167_2_fu_457_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln167_2_reg_920 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal zext_ln810_1_fu_533_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln810_1_reg_942 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln_reg_954 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln813_fu_579_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln813_reg_959 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln7_reg_964 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln8_reg_969 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln816_fu_656_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln816_reg_974 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal trunc_ln9_reg_979 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln819_fu_693_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln819_reg_984 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln11_reg_989 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln12_reg_994 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln821_fu_842_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln821_reg_999 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln805_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln806_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln807_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln808_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln810_2_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln811_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln813_fu_733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln814_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln816_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln817_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln819_fu_809_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln820_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln821_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_52_fu_142 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln804_fu_416_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_52_load : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_146 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln167_1_fu_332_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_53 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_150 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln167_1_fu_303_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln810_fu_528_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal add_ln167_fu_312_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln167_fu_324_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln805_fu_352_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_364_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln806_fu_379_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_395_fu_385_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln2_fu_398_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln810_fu_406_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_76_cast3_fu_348_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln_mid1_fu_447_p5 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln_fu_437_p5 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln167_fu_464_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln805_1_fu_474_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln806_fu_484_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal or_ln807_fu_494_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_396_fu_499_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln808_fu_511_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_397_fu_516_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_fu_478_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln167_fu_470_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln810_fu_536_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_23_fu_488_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln813_fu_567_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln3_fu_571_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln6_fu_557_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln167_1_fu_605_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln807_fu_614_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln808_fu_624_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln167_1_fu_610_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln811_fu_634_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_24_fu_618_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln816_fu_644_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln4_fu_648_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_25_fu_628_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln819_fu_681_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln5_fu_685_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln10_fu_671_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln167_2_fu_719_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln167_2_fu_724_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln812_fu_728_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln167_3_fu_738_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln167_3_fu_743_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln814_fu_747_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln167_4_fu_757_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln167_4_fu_762_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln815_fu_766_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln167_5_fu_776_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln167_5_fu_781_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln817_fu_785_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln167_6_fu_795_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln167_6_fu_800_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln818_fu_804_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln167_7_fu_814_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln167_8_fu_823_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln167_7_fu_819_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln820_fu_832_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln167_8_fu_828_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pqcrystals_dilithium2_ref_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component pqcrystals_dilithium2_ref_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_52_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln167_fu_297_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_52_fu_142 <= add_ln804_fu_416_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_52_fu_142 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln167_fu_297_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_146 <= select_ln167_1_fu_332_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_146 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln167_fu_297_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_150 <= add_ln167_1_fu_303_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_150 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_fu_297_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln810_1_reg_915 <= add_ln810_1_fu_410_p2;
                icmp_ln804_reg_882 <= icmp_ln804_fu_318_p2;
                    shl_ln_reg_899(7 downto 2) <= shl_ln_fu_356_p3(7 downto 2);
                trunc_ln168_1_reg_887 <= trunc_ln168_1_fu_340_p1;
                trunc_ln168_2_reg_893 <= trunc_ln168_2_fu_344_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_reg_878 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                add_ln821_reg_999 <= add_ln821_fu_842_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln167_reg_878 <= icmp_ln167_fu_297_p2;
                trunc_ln168_reg_872 <= trunc_ln168_fu_293_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_reg_878 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                or_ln813_reg_959 <= or_ln813_fu_579_p2;
                    select_ln167_2_reg_920(7 downto 6) <= select_ln167_2_fu_457_p3(7 downto 6);    select_ln167_2_reg_920(10 downto 9) <= select_ln167_2_fu_457_p3(10 downto 9);
                trunc_ln7_reg_964 <= t_23_fu_488_p2(13 downto 6);
                trunc_ln8_reg_969 <= t_23_fu_488_p2(21 downto 14);
                trunc_ln_reg_954 <= t_fu_478_p2(15 downto 8);
                    zext_ln810_1_reg_942(9 downto 0) <= zext_ln810_1_fu_533_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_reg_878 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                or_ln816_reg_974 <= or_ln816_fu_656_p2;
                or_ln819_reg_984 <= or_ln819_fu_693_p2;
                trunc_ln11_reg_989 <= t_25_fu_628_p2(9 downto 2);
                trunc_ln12_reg_994 <= t_25_fu_628_p2(17 downto 10);
                trunc_ln9_reg_979 <= t_24_fu_618_p2(11 downto 4);
            end if;
        end if;
    end process;
    shl_ln_reg_899(1 downto 0) <= "00";
    select_ln167_2_reg_920(5 downto 0) <= "000000";
    select_ln167_2_reg_920(8) <= '0';
    zext_ln810_1_reg_942(11 downto 10) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage8_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln167_1_fu_303_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv9_1));
    add_ln167_fu_312_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_53) + unsigned(ap_const_lv3_1));
    add_ln804_fu_416_p2 <= std_logic_vector(unsigned(select_ln167_fu_324_p3) + unsigned(ap_const_lv7_1));
    add_ln810_1_fu_410_p2 <= std_logic_vector(unsigned(zext_ln810_fu_406_p1) + unsigned(i_76_cast3_fu_348_p1));
    add_ln810_fu_536_p2 <= std_logic_vector(unsigned(zext_ln810_1_fu_533_p1) + unsigned(zext_ln167_fu_470_p1));
    add_ln811_fu_634_p2 <= std_logic_vector(unsigned(zext_ln810_1_reg_942) + unsigned(zext_ln167_1_fu_610_p1));
    add_ln812_fu_728_p2 <= std_logic_vector(unsigned(zext_ln810_1_reg_942) + unsigned(zext_ln167_2_fu_724_p1));
    add_ln814_fu_747_p2 <= std_logic_vector(unsigned(zext_ln810_1_reg_942) + unsigned(zext_ln167_3_fu_743_p1));
    add_ln815_fu_766_p2 <= std_logic_vector(unsigned(zext_ln810_1_reg_942) + unsigned(zext_ln167_4_fu_762_p1));
    add_ln817_fu_785_p2 <= std_logic_vector(unsigned(zext_ln810_1_reg_942) + unsigned(zext_ln167_5_fu_781_p1));
    add_ln818_fu_804_p2 <= std_logic_vector(unsigned(zext_ln810_1_reg_942) + unsigned(zext_ln167_6_fu_800_p1));
    add_ln820_fu_832_p2 <= std_logic_vector(unsigned(zext_ln810_1_reg_942) + unsigned(zext_ln167_7_fu_819_p1));
    add_ln821_fu_842_p2 <= std_logic_vector(unsigned(zext_ln810_1_reg_942) + unsigned(zext_ln167_8_fu_828_p1));
    add_ln_fu_437_p5 <= (((trunc_ln168_reg_872 & ap_const_lv1_0) & trunc_ln168_reg_872) & ap_const_lv6_0);
    add_ln_mid1_fu_447_p5 <= (((trunc_ln168_2_reg_893 & ap_const_lv1_0) & trunc_ln168_2_reg_893) & ap_const_lv6_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln167_reg_878)
    begin
        if (((icmp_ln167_reg_878 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_52_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_52_fu_142, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_52_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_52_load <= i_52_fu_142;
        end if; 
    end process;


    ap_sig_allocacmp_i_53_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_146)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_53 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_53 <= i_fu_146;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_150)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_150;
        end if; 
    end process;

    i_76_cast3_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln167_fu_324_p3),10));
    icmp_ln167_fu_297_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv9_100) else "0";
    icmp_ln804_fu_318_p2 <= "1" when (ap_sig_allocacmp_i_52_load = ap_const_lv7_40) else "0";
    or_ln167_1_fu_605_p2 <= (select_ln167_2_reg_920 or ap_const_lv11_21);
    or_ln167_2_fu_719_p2 <= (select_ln167_2_reg_920 or ap_const_lv11_22);
    or_ln167_3_fu_738_p2 <= (select_ln167_2_reg_920 or ap_const_lv11_23);
    or_ln167_4_fu_757_p2 <= (select_ln167_2_reg_920 or ap_const_lv11_24);
    or_ln167_5_fu_776_p2 <= (select_ln167_2_reg_920 or ap_const_lv11_25);
    or_ln167_6_fu_795_p2 <= (select_ln167_2_reg_920 or ap_const_lv11_26);
    or_ln167_7_fu_814_p2 <= (select_ln167_2_reg_920 or ap_const_lv11_27);
    or_ln167_8_fu_823_p2 <= (select_ln167_2_reg_920 or ap_const_lv11_28);
    or_ln167_fu_464_p2 <= (select_ln167_2_fu_457_p3 or ap_const_lv11_20);
    or_ln806_fu_379_p2 <= (shl_ln_fu_356_p3 or ap_const_lv8_1);
    or_ln807_fu_494_p2 <= (shl_ln_reg_899 or ap_const_lv8_2);
    or_ln808_fu_511_p2 <= (shl_ln_reg_899 or ap_const_lv8_3);
    or_ln813_fu_579_p2 <= (trunc_ln6_fu_557_p4 or shl_ln3_fu_571_p3);
    or_ln816_fu_656_p2 <= (trunc_ln8_reg_969 or shl_ln4_fu_648_p3);
    or_ln819_fu_693_p2 <= (trunc_ln10_fu_671_p4 or shl_ln5_fu_685_p3);
    select_ln167_1_fu_332_p3 <= 
        add_ln167_fu_312_p2 when (icmp_ln804_fu_318_p2(0) = '1') else 
        ap_sig_allocacmp_i_53;
    select_ln167_2_fu_457_p3 <= 
        add_ln_mid1_fu_447_p5 when (icmp_ln804_reg_882(0) = '1') else 
        add_ln_fu_437_p5;
    select_ln167_fu_324_p3 <= 
        ap_const_lv7_0 when (icmp_ln804_fu_318_p2(0) = '1') else 
        ap_sig_allocacmp_i_52_load;
    shl_ln2_fu_398_p3 <= (trunc_ln805_fu_352_p1 & ap_const_lv3_0);
    shl_ln3_fu_571_p3 <= (trunc_ln813_fu_567_p1 & ap_const_lv2_0);
    shl_ln4_fu_648_p3 <= (trunc_ln816_fu_644_p1 & ap_const_lv4_0);
    shl_ln5_fu_685_p3 <= (trunc_ln819_fu_681_p1 & ap_const_lv6_0);
    shl_ln_fu_356_p3 <= (trunc_ln805_fu_352_p1 & ap_const_lv2_0);

    sm_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln810_2_fu_542_p1, zext_ln811_fu_639_p1, ap_block_pp0_stage2, zext_ln813_fu_733_p1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, zext_ln814_fu_752_p1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, zext_ln816_fu_771_p1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, zext_ln817_fu_790_p1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, zext_ln819_fu_809_p1, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, zext_ln820_fu_837_p1, ap_block_pp0_stage8, zext_ln821_fu_847_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sm_address0 <= zext_ln821_fu_847_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            sm_address0 <= zext_ln820_fu_837_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            sm_address0 <= zext_ln819_fu_809_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            sm_address0 <= zext_ln817_fu_790_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            sm_address0 <= zext_ln816_fu_771_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            sm_address0 <= zext_ln814_fu_752_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            sm_address0 <= zext_ln813_fu_733_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            sm_address0 <= zext_ln811_fu_639_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sm_address0 <= zext_ln810_2_fu_542_p1(13 - 1 downto 0);
        else 
            sm_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sm_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            sm_ce0 <= ap_const_logic_1;
        else 
            sm_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sm_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage8, trunc_ln_reg_954, or_ln813_reg_959, trunc_ln7_reg_964, or_ln816_reg_974, ap_CS_fsm_pp0_stage2, trunc_ln9_reg_979, or_ln819_reg_984, trunc_ln11_reg_989, trunc_ln12_reg_994, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_block_pp0_stage8, trunc_ln810_fu_528_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sm_d0 <= trunc_ln12_reg_994;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            sm_d0 <= trunc_ln11_reg_989;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            sm_d0 <= or_ln819_reg_984;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            sm_d0 <= trunc_ln9_reg_979;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            sm_d0 <= or_ln816_reg_974;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            sm_d0 <= trunc_ln7_reg_964;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            sm_d0 <= or_ln813_reg_959;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            sm_d0 <= trunc_ln_reg_954;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sm_d0 <= trunc_ln810_fu_528_p1;
        else 
            sm_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sm_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln167_reg_878, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln167_reg_878 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((icmp_ln167_reg_878 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln167_reg_878 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln167_reg_878 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln167_reg_878 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln167_reg_878 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((icmp_ln167_reg_878 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln167_reg_878 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            sm_we0 <= ap_const_logic_1;
        else 
            sm_we0 <= ap_const_logic_0;
        end if; 
    end process;

    t_23_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv22_20000) - unsigned(trunc_ln806_fu_484_p1));
    t_24_fu_618_p2 <= std_logic_vector(unsigned(ap_const_lv20_20000) - unsigned(trunc_ln807_fu_614_p1));
    t_25_fu_628_p2 <= std_logic_vector(signed(ap_const_lv18_20000) - signed(trunc_ln808_fu_624_p1));
    t_fu_478_p2 <= std_logic_vector(unsigned(ap_const_lv24_20000) - unsigned(trunc_ln805_1_fu_474_p1));
    tmp_395_fu_385_p3 <= (trunc_ln168_1_fu_340_p1 & or_ln806_fu_379_p2);
    tmp_396_fu_499_p3 <= (trunc_ln168_1_reg_887 & or_ln807_fu_494_p2);
    tmp_397_fu_516_p3 <= (trunc_ln168_1_reg_887 & or_ln808_fu_511_p2);
    tmp_s_fu_364_p4 <= ((trunc_ln168_1_fu_340_p1 & trunc_ln805_fu_352_p1) & ap_const_lv2_0);
    trunc_ln10_fu_671_p4 <= t_24_fu_618_p2(19 downto 12);
    trunc_ln168_1_fu_340_p1 <= select_ln167_1_fu_332_p3(2 - 1 downto 0);
    trunc_ln168_2_fu_344_p1 <= add_ln167_fu_312_p2(2 - 1 downto 0);
    trunc_ln168_fu_293_p1 <= ap_sig_allocacmp_i_53(2 - 1 downto 0);
    trunc_ln6_fu_557_p4 <= t_fu_478_p2(23 downto 16);
    trunc_ln805_1_fu_474_p1 <= z_q1(24 - 1 downto 0);
    trunc_ln805_fu_352_p1 <= select_ln167_fu_324_p3(6 - 1 downto 0);
    trunc_ln806_fu_484_p1 <= z_q0(22 - 1 downto 0);
    trunc_ln807_fu_614_p1 <= z_q1(20 - 1 downto 0);
    trunc_ln808_fu_624_p1 <= z_q0(18 - 1 downto 0);
    trunc_ln810_fu_528_p1 <= t_fu_478_p2(8 - 1 downto 0);
    trunc_ln813_fu_567_p1 <= t_23_fu_488_p2(6 - 1 downto 0);
    trunc_ln816_fu_644_p1 <= t_24_fu_618_p2(4 - 1 downto 0);
    trunc_ln819_fu_681_p1 <= t_25_fu_628_p2(2 - 1 downto 0);

    z_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln806_fu_393_p1, ap_block_pp0_stage1, zext_ln808_fu_523_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                z_address0 <= zext_ln808_fu_523_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                z_address0 <= zext_ln806_fu_393_p1(10 - 1 downto 0);
            else 
                z_address0 <= "XXXXXXXXXX";
            end if;
        else 
            z_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    z_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln805_fu_374_p1, ap_block_pp0_stage0, zext_ln807_fu_506_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                z_address1 <= zext_ln807_fu_506_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                z_address1 <= zext_ln805_fu_374_p1(10 - 1 downto 0);
            else 
                z_address1 <= "XXXXXXXXXX";
            end if;
        else 
            z_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    z_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            z_ce0 <= ap_const_logic_1;
        else 
            z_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            z_ce1 <= ap_const_logic_1;
        else 
            z_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln167_1_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln167_1_fu_605_p2),12));
    zext_ln167_2_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln167_2_fu_719_p2),12));
    zext_ln167_3_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln167_3_fu_738_p2),12));
    zext_ln167_4_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln167_4_fu_757_p2),12));
    zext_ln167_5_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln167_5_fu_776_p2),12));
    zext_ln167_6_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln167_6_fu_795_p2),12));
    zext_ln167_7_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln167_7_fu_814_p2),12));
    zext_ln167_8_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln167_8_fu_823_p2),12));
    zext_ln167_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln167_fu_464_p2),12));
    zext_ln805_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_364_p4),64));
    zext_ln806_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_395_fu_385_p3),64));
    zext_ln807_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_396_fu_499_p3),64));
    zext_ln808_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_397_fu_516_p3),64));
    zext_ln810_1_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln810_1_reg_915),12));
    zext_ln810_2_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln810_fu_536_p2),64));
    zext_ln810_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_398_p3),10));
    zext_ln811_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln811_fu_634_p2),64));
    zext_ln813_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln812_fu_728_p2),64));
    zext_ln814_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln814_fu_747_p2),64));
    zext_ln816_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln815_fu_766_p2),64));
    zext_ln817_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln817_fu_785_p2),64));
    zext_ln819_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln818_fu_804_p2),64));
    zext_ln820_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln820_fu_832_p2),64));
    zext_ln821_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln821_reg_999),64));
end behav;
