-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium_19 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_s_ce0 : OUT STD_LOGIC;
    state_s_we0 : OUT STD_LOGIC;
    state_s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    state_s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_s_ce1 : OUT STD_LOGIC;
    state_s_we1 : OUT STD_LOGIC;
    state_s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    state_s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    seed_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    seed_ce0 : OUT STD_LOGIC;
    seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    seed_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    seed_ce1 : OUT STD_LOGIC;
    seed_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    nonce : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pqcrystals_dilithium_19 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv8_A1 : STD_LOGIC_VECTOR (7 downto 0) := "10100001";
    constant ap_const_lv8_A2 : STD_LOGIC_VECTOR (7 downto 0) := "10100010";
    constant ap_const_lv8_A3 : STD_LOGIC_VECTOR (7 downto 0) := "10100011";
    constant ap_const_lv8_A4 : STD_LOGIC_VECTOR (7 downto 0) := "10100100";
    constant ap_const_lv8_A5 : STD_LOGIC_VECTOR (7 downto 0) := "10100101";
    constant ap_const_lv8_A6 : STD_LOGIC_VECTOR (7 downto 0) := "10100110";
    constant ap_const_lv8_A7 : STD_LOGIC_VECTOR (7 downto 0) := "10100111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_1F0000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000111110000000000000000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_376_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln416_fu_398_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln416_reg_646 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln417_fu_412_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln417_reg_651 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln416_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_s_addr_1_reg_671 : STD_LOGIC_VECTOR (4 downto 0);
    signal seed_load_reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal seed_load_1_reg_681 : STD_LOGIC_VECTOR (7 downto 0);
    signal seed_load_2_reg_696 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal seed_load_3_reg_701 : STD_LOGIC_VECTOR (7 downto 0);
    signal seed_load_4_reg_716 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal seed_load_5_reg_721 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln387_fu_519_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_41_fu_542_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_42_fu_564_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln425_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_load_reg_770 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_load_8_reg_775 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_load_9_reg_790 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal t_load_10_reg_795 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_load_11_reg_810 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal t_load_12_reg_815 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal i_0_i_i1_reg_315 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln362_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_i_i31_reg_326 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal phi_ln387_reg_337 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln387_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_i_i_reg_348 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln423_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_i_i_reg_359 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln363_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln417_2_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_7_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_8_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_9_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_10_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_11_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_12_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln387_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln424_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln425_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln417_fu_512_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal xor_ln451_fu_622_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln426_fu_586_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_404_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln417_fu_416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_fu_427_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_7_fu_438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_8_fu_448_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_9_fu_458_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_10_fu_468_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_11_fu_478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_12_fu_488_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_7_i_fu_498_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln426_fu_570_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_574_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln426_1_fu_583_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_7_i2_fu_595_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln450_1_fu_609_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component shake128_absorb_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component shake128_absorb_t
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        q1 => t_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_i_i1_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_fu_370_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_i1_reg_315 <= i_fu_376_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_i1_reg_315 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_3_i_i31_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln362_fu_370_p2 = ap_const_lv1_1))) then 
                i_3_i_i31_reg_326 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_3_i_i31_reg_326 <= add_ln416_reg_646;
            end if; 
        end if;
    end process;

    i_4_i_i_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln387_fu_530_p2 = ap_const_lv1_1))) then 
                i_4_i_i_reg_348 <= ap_const_lv4_0;
            elsif (((icmp_ln423_fu_536_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_4_i_i_reg_348 <= i_41_fu_542_p2;
            end if; 
        end if;
    end process;

    i_5_i_i_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln423_fu_536_p2 = ap_const_lv1_1))) then 
                i_5_i_i_reg_359 <= ap_const_lv2_0;
            elsif (((icmp_ln425_fu_558_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_5_i_i_reg_359 <= i_42_fu_564_p2;
            end if; 
        end if;
    end process;

    phi_ln387_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln387_fu_530_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                phi_ln387_reg_337 <= add_ln387_fu_519_p2;
            elsif (((icmp_ln416_fu_392_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln387_reg_337 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln416_reg_646 <= add_ln416_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                seed_load_1_reg_681 <= seed_q1;
                seed_load_reg_676 <= seed_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                seed_load_2_reg_696 <= seed_q0;
                seed_load_3_reg_701 <= seed_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                seed_load_4_reg_716 <= seed_q0;
                seed_load_5_reg_721 <= seed_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_fu_392_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    state_s_addr_1_reg_671(2 downto 0) <= zext_ln416_fu_387_p1(5 - 1 downto 0)(2 downto 0);
                    zext_ln417_reg_651(5 downto 3) <= zext_ln417_fu_412_p1(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                t_load_10_reg_795 <= t_q0;
                t_load_9_reg_790 <= t_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                t_load_11_reg_810 <= t_q1;
                t_load_12_reg_815 <= t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                t_load_8_reg_775 <= t_q1;
                t_load_reg_770 <= t_q0;
            end if;
        end if;
    end process;
    zext_ln417_reg_651(2 downto 0) <= "000";
    zext_ln417_reg_651(7 downto 6) <= "00";
    state_s_addr_1_reg_671(4 downto 3) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln416_fu_392_p2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, icmp_ln425_fu_558_p2, icmp_ln362_fu_370_p2, icmp_ln387_fu_530_p2, icmp_ln423_fu_536_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln362_fu_370_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln416_fu_392_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln387_fu_530_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln423_fu_536_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln425_fu_558_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_10_fu_468_p2 <= std_logic_vector(unsigned(zext_ln417_reg_651) + unsigned(ap_const_lv8_A5));
    add_ln31_11_fu_478_p2 <= std_logic_vector(unsigned(zext_ln417_reg_651) + unsigned(ap_const_lv8_A6));
    add_ln31_12_fu_488_p2 <= std_logic_vector(unsigned(zext_ln417_reg_651) + unsigned(ap_const_lv8_A7));
    add_ln31_7_fu_438_p2 <= std_logic_vector(unsigned(zext_ln417_reg_651) + unsigned(ap_const_lv8_A2));
    add_ln31_8_fu_448_p2 <= std_logic_vector(unsigned(zext_ln417_reg_651) + unsigned(ap_const_lv8_A3));
    add_ln31_9_fu_458_p2 <= std_logic_vector(unsigned(zext_ln417_reg_651) + unsigned(ap_const_lv8_A4));
    add_ln31_fu_427_p2 <= std_logic_vector(unsigned(zext_ln417_fu_412_p1) + unsigned(ap_const_lv8_A1));
    add_ln387_fu_519_p2 <= std_logic_vector(unsigned(phi_ln387_reg_337) + unsigned(ap_const_lv3_1));
    add_ln416_fu_398_p2 <= std_logic_vector(unsigned(i_3_i_i31_reg_326) + unsigned(ap_const_lv3_1));
    add_ln417_fu_416_p2 <= std_logic_vector(unsigned(zext_ln417_fu_412_p1) + unsigned(ap_const_lv8_A0));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_41_fu_542_p2 <= std_logic_vector(unsigned(i_4_i_i_reg_348) + unsigned(ap_const_lv4_1));
    i_42_fu_564_p2 <= std_logic_vector(unsigned(i_5_i_i_reg_359) + unsigned(ap_const_lv2_1));
    i_fu_376_p2 <= std_logic_vector(unsigned(i_0_i_i1_reg_315) + unsigned(ap_const_lv5_1));
    icmp_ln362_fu_370_p2 <= "1" when (i_0_i_i1_reg_315 = ap_const_lv5_19) else "0";
    icmp_ln387_fu_530_p2 <= "1" when (phi_ln387_reg_337 = ap_const_lv3_7) else "0";
    icmp_ln416_fu_392_p2 <= "1" when (i_3_i_i31_reg_326 = ap_const_lv3_6) else "0";
    icmp_ln423_fu_536_p2 <= "1" when (i_4_i_i_reg_348 = ap_const_lv4_8) else "0";
    icmp_ln425_fu_558_p2 <= "1" when (i_5_i_i_reg_359 = ap_const_lv2_2) else "0";
    r_7_i2_fu_595_p9 <= (((((((t_q0 & t_q1) & t_load_12_reg_815) & t_load_11_reg_810) & t_load_10_reg_795) & t_load_9_reg_790) & t_load_8_reg_775) & t_load_reg_770);
    r_7_i_fu_498_p9 <= (((((((seed_q1 & seed_q0) & seed_load_5_reg_721) & seed_load_4_reg_716) & seed_load_3_reg_701) & seed_load_2_reg_696) & seed_load_1_reg_681) & seed_load_reg_676);

    seed_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln417_2_fu_422_p1, zext_ln31_7_fu_443_p1, zext_ln31_9_fu_463_p1, zext_ln31_11_fu_483_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_address0 <= zext_ln31_11_fu_483_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            seed_address0 <= zext_ln31_9_fu_463_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_address0 <= zext_ln31_7_fu_443_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seed_address0 <= zext_ln417_2_fu_422_p1(8 - 1 downto 0);
        else 
            seed_address0 <= "XXXXXXXX";
        end if; 
    end process;


    seed_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln31_fu_433_p1, zext_ln31_8_fu_453_p1, zext_ln31_10_fu_473_p1, zext_ln31_12_fu_493_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_address1 <= zext_ln31_12_fu_493_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            seed_address1 <= zext_ln31_10_fu_473_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_address1 <= zext_ln31_8_fu_453_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seed_address1 <= zext_ln31_fu_433_p1(8 - 1 downto 0);
        else 
            seed_address1 <= "XXXXXXXX";
        end if; 
    end process;


    seed_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            seed_ce0 <= ap_const_logic_1;
        else 
            seed_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            seed_ce1 <= ap_const_logic_1;
        else 
            seed_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln426_fu_586_p3 <= 
        tmp_fu_574_p4 when (trunc_ln426_fu_570_p1(0) = '1') else 
        trunc_ln426_1_fu_583_p1;
    shl_ln_fu_404_p3 <= (i_3_i_i31_reg_326 & ap_const_lv3_0);

    state_s_address0_assign_proc : process(ap_CS_fsm_state2, state_s_addr_1_reg_671, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, zext_ln363_fu_382_p1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_s_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_s_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_address0 <= state_s_addr_1_reg_671;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_s_address0 <= zext_ln363_fu_382_p1(5 - 1 downto 0);
        else 
            state_s_address0 <= "XXXXX";
        end if; 
    end process;


    state_s_address1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_s_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_s_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        else 
            state_s_address1 <= "XXXXX";
        end if; 
    end process;


    state_s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_ce0 <= ap_const_logic_1;
        else 
            state_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_ce1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_s_ce1 <= ap_const_logic_1;
        else 
            state_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, xor_ln417_fu_512_p2, ap_CS_fsm_state14, xor_ln451_fu_622_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_s_d0 <= xor_ln451_fu_622_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_s_d0 <= xor_ln417_fu_512_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_s_d0 <= ap_const_lv64_0;
        else 
            state_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    state_s_d1 <= (xor_ln450_1_fu_609_p2 xor state_s_q0);

    state_s_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln362_fu_370_p2, ap_CS_fsm_state7, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln362_fu_370_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            state_s_we0 <= ap_const_logic_1;
        else 
            state_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_we1_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_s_we1 <= ap_const_logic_1;
        else 
            state_s_we1 <= ap_const_logic_0;
        end if; 
    end process;


    t_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, icmp_ln425_fu_558_p2, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, zext_ln387_fu_525_p1, zext_ln424_fu_548_p1, zext_ln425_fu_553_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            t_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln425_fu_558_p2 = ap_const_lv1_1))) then 
            t_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((icmp_ln425_fu_558_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            t_address0 <= zext_ln425_fu_553_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_address0 <= zext_ln424_fu_548_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_address0 <= zext_ln387_fu_525_p1(3 - 1 downto 0);
        else 
            t_address0 <= "XXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            t_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            t_address1 <= "XXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, icmp_ln425_fu_558_p2, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln425_fu_558_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln425_fu_558_p2 = ap_const_lv1_1)))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, icmp_ln425_fu_558_p2, select_ln426_fu_586_p3)
    begin
        if (((icmp_ln425_fu_558_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            t_d0 <= select_ln426_fu_586_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, icmp_ln425_fu_558_p2, icmp_ln423_fu_536_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln425_fu_558_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln423_fu_536_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_574_p4 <= nonce(15 downto 8);
    trunc_ln426_1_fu_583_p1 <= nonce(8 - 1 downto 0);
    trunc_ln426_fu_570_p1 <= i_5_i_i_reg_359(1 - 1 downto 0);
    xor_ln417_fu_512_p2 <= (state_s_q0 xor r_7_i_fu_498_p9);
    xor_ln450_1_fu_609_p2 <= (r_7_i2_fu_595_p9 xor ap_const_lv64_1F0000);
    xor_ln451_fu_622_p2 <= (state_s_q1 xor ap_const_lv64_8000000000000000);
    zext_ln31_10_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_10_fu_468_p2),64));
    zext_ln31_11_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_11_fu_478_p2),64));
    zext_ln31_12_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_12_fu_488_p2),64));
    zext_ln31_7_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_7_fu_438_p2),64));
    zext_ln31_8_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_8_fu_448_p2),64));
    zext_ln31_9_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_9_fu_458_p2),64));
    zext_ln31_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_427_p2),64));
    zext_ln363_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i1_reg_315),64));
    zext_ln387_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln387_reg_337),64));
    zext_ln416_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i_i31_reg_326),64));
    zext_ln417_2_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln417_fu_416_p2),64));
    zext_ln417_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_404_p3),8));
    zext_ln424_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_i_i_reg_348),64));
    zext_ln425_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_i_i_reg_359),64));
end behav;
