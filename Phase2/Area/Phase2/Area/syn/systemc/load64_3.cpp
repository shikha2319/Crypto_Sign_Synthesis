// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "load64_3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic load64_3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic load64_3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> load64_3::ap_ST_fsm_state1 = "1";
const sc_lv<5> load64_3::ap_ST_fsm_state2 = "10";
const sc_lv<5> load64_3::ap_ST_fsm_state3 = "100";
const sc_lv<5> load64_3::ap_ST_fsm_state4 = "1000";
const sc_lv<5> load64_3::ap_ST_fsm_state5 = "10000";
const sc_lv<32> load64_3::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> load64_3::ap_const_lv32_1 = "1";
const sc_lv<32> load64_3::ap_const_lv32_2 = "10";
const sc_lv<32> load64_3::ap_const_lv32_3 = "11";
const sc_lv<14> load64_3::ap_const_lv14_1 = "1";
const sc_lv<14> load64_3::ap_const_lv14_2 = "10";
const sc_lv<14> load64_3::ap_const_lv14_3 = "11";
const sc_lv<14> load64_3::ap_const_lv14_4 = "100";
const sc_lv<14> load64_3::ap_const_lv14_5 = "101";
const sc_lv<14> load64_3::ap_const_lv14_6 = "110";
const sc_lv<14> load64_3::ap_const_lv14_7 = "111";
const sc_lv<32> load64_3::ap_const_lv32_4 = "100";
const sc_lv<64> load64_3::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const bool load64_3::ap_const_boolean_1 = true;

load64_3::load64_3(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln31_1_fu_119_p2);
    sensitive << ( trunc_ln31_reg_198 );

    SC_METHOD(thread_add_ln31_2_fu_129_p2);
    sensitive << ( trunc_ln31_reg_198 );

    SC_METHOD(thread_add_ln31_3_fu_139_p2);
    sensitive << ( trunc_ln31_reg_198 );

    SC_METHOD(thread_add_ln31_4_fu_149_p2);
    sensitive << ( trunc_ln31_reg_198 );

    SC_METHOD(thread_add_ln31_5_fu_159_p2);
    sensitive << ( trunc_ln31_reg_198 );

    SC_METHOD(thread_add_ln31_6_fu_169_p2);
    sensitive << ( trunc_ln31_reg_198 );

    SC_METHOD(thread_add_ln31_fu_108_p2);
    sensitive << ( trunc_ln31_fu_104_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( r_7_fu_179_p9 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_r_7_fu_179_p9);
    sensitive << ( x_q0 );
    sensitive << ( x_q1 );
    sensitive << ( x_load_reg_213 );
    sensitive << ( x_load_1_reg_218 );
    sensitive << ( x_load_2_reg_233 );
    sensitive << ( x_load_3_reg_238 );
    sensitive << ( x_load_4_reg_253 );
    sensitive << ( x_load_5_reg_258 );

    SC_METHOD(thread_trunc_ln31_fu_104_p1);
    sensitive << ( x_offset );

    SC_METHOD(thread_x_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_offset );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln31_25_fu_124_p1 );
    sensitive << ( zext_ln31_27_fu_144_p1 );
    sensitive << ( zext_ln31_29_fu_164_p1 );

    SC_METHOD(thread_x_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln31_fu_114_p1 );
    sensitive << ( zext_ln31_26_fu_134_p1 );
    sensitive << ( zext_ln31_28_fu_154_p1 );
    sensitive << ( zext_ln31_30_fu_174_p1 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_x_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_zext_ln31_25_fu_124_p1);
    sensitive << ( add_ln31_1_fu_119_p2 );

    SC_METHOD(thread_zext_ln31_26_fu_134_p1);
    sensitive << ( add_ln31_2_fu_129_p2 );

    SC_METHOD(thread_zext_ln31_27_fu_144_p1);
    sensitive << ( add_ln31_3_fu_139_p2 );

    SC_METHOD(thread_zext_ln31_28_fu_154_p1);
    sensitive << ( add_ln31_4_fu_149_p2 );

    SC_METHOD(thread_zext_ln31_29_fu_164_p1);
    sensitive << ( add_ln31_5_fu_159_p2 );

    SC_METHOD(thread_zext_ln31_30_fu_174_p1);
    sensitive << ( add_ln31_6_fu_169_p2 );

    SC_METHOD(thread_zext_ln31_fu_114_p1);
    sensitive << ( add_ln31_fu_108_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "00001";
    ap_return_preg = "0000000000000000000000000000000000000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "load64_3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_address0, "(port)x_address0");
    sc_trace(mVcdFile, x_ce0, "(port)x_ce0");
    sc_trace(mVcdFile, x_q0, "(port)x_q0");
    sc_trace(mVcdFile, x_address1, "(port)x_address1");
    sc_trace(mVcdFile, x_ce1, "(port)x_ce1");
    sc_trace(mVcdFile, x_q1, "(port)x_q1");
    sc_trace(mVcdFile, x_offset, "(port)x_offset");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, trunc_ln31_fu_104_p1, "trunc_ln31_fu_104_p1");
    sc_trace(mVcdFile, trunc_ln31_reg_198, "trunc_ln31_reg_198");
    sc_trace(mVcdFile, x_load_reg_213, "x_load_reg_213");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, x_load_1_reg_218, "x_load_1_reg_218");
    sc_trace(mVcdFile, x_load_2_reg_233, "x_load_2_reg_233");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, x_load_3_reg_238, "x_load_3_reg_238");
    sc_trace(mVcdFile, x_load_4_reg_253, "x_load_4_reg_253");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, x_load_5_reg_258, "x_load_5_reg_258");
    sc_trace(mVcdFile, zext_ln31_fu_114_p1, "zext_ln31_fu_114_p1");
    sc_trace(mVcdFile, zext_ln31_25_fu_124_p1, "zext_ln31_25_fu_124_p1");
    sc_trace(mVcdFile, zext_ln31_26_fu_134_p1, "zext_ln31_26_fu_134_p1");
    sc_trace(mVcdFile, zext_ln31_27_fu_144_p1, "zext_ln31_27_fu_144_p1");
    sc_trace(mVcdFile, zext_ln31_28_fu_154_p1, "zext_ln31_28_fu_154_p1");
    sc_trace(mVcdFile, zext_ln31_29_fu_164_p1, "zext_ln31_29_fu_164_p1");
    sc_trace(mVcdFile, zext_ln31_30_fu_174_p1, "zext_ln31_30_fu_174_p1");
    sc_trace(mVcdFile, add_ln31_fu_108_p2, "add_ln31_fu_108_p2");
    sc_trace(mVcdFile, add_ln31_1_fu_119_p2, "add_ln31_1_fu_119_p2");
    sc_trace(mVcdFile, add_ln31_2_fu_129_p2, "add_ln31_2_fu_129_p2");
    sc_trace(mVcdFile, add_ln31_3_fu_139_p2, "add_ln31_3_fu_139_p2");
    sc_trace(mVcdFile, add_ln31_4_fu_149_p2, "add_ln31_4_fu_149_p2");
    sc_trace(mVcdFile, add_ln31_5_fu_159_p2, "add_ln31_5_fu_159_p2");
    sc_trace(mVcdFile, add_ln31_6_fu_169_p2, "add_ln31_6_fu_169_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, r_7_fu_179_p9, "r_7_fu_179_p9");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

load64_3::~load64_3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void load64_3::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_return_preg = r_7_fu_179_p9.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        trunc_ln31_reg_198 = trunc_ln31_fu_104_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_load_1_reg_218 = x_q1.read();
        x_load_reg_213 = x_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_load_2_reg_233 = x_q0.read();
        x_load_3_reg_238 = x_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x_load_4_reg_253 = x_q0.read();
        x_load_5_reg_258 = x_q1.read();
    }
}

void load64_3::thread_add_ln31_1_fu_119_p2() {
    add_ln31_1_fu_119_p2 = (!ap_const_lv14_2.is_01() || !trunc_ln31_reg_198.read().is_01())? sc_lv<14>(): (sc_biguint<14>(ap_const_lv14_2) + sc_biguint<14>(trunc_ln31_reg_198.read()));
}

void load64_3::thread_add_ln31_2_fu_129_p2() {
    add_ln31_2_fu_129_p2 = (!ap_const_lv14_3.is_01() || !trunc_ln31_reg_198.read().is_01())? sc_lv<14>(): (sc_biguint<14>(ap_const_lv14_3) + sc_biguint<14>(trunc_ln31_reg_198.read()));
}

void load64_3::thread_add_ln31_3_fu_139_p2() {
    add_ln31_3_fu_139_p2 = (!ap_const_lv14_4.is_01() || !trunc_ln31_reg_198.read().is_01())? sc_lv<14>(): (sc_biguint<14>(ap_const_lv14_4) + sc_biguint<14>(trunc_ln31_reg_198.read()));
}

void load64_3::thread_add_ln31_4_fu_149_p2() {
    add_ln31_4_fu_149_p2 = (!ap_const_lv14_5.is_01() || !trunc_ln31_reg_198.read().is_01())? sc_lv<14>(): (sc_biguint<14>(ap_const_lv14_5) + sc_biguint<14>(trunc_ln31_reg_198.read()));
}

void load64_3::thread_add_ln31_5_fu_159_p2() {
    add_ln31_5_fu_159_p2 = (!ap_const_lv14_6.is_01() || !trunc_ln31_reg_198.read().is_01())? sc_lv<14>(): (sc_biguint<14>(ap_const_lv14_6) + sc_biguint<14>(trunc_ln31_reg_198.read()));
}

void load64_3::thread_add_ln31_6_fu_169_p2() {
    add_ln31_6_fu_169_p2 = (!ap_const_lv14_7.is_01() || !trunc_ln31_reg_198.read().is_01())? sc_lv<14>(): (sc_biguint<14>(ap_const_lv14_7) + sc_biguint<14>(trunc_ln31_reg_198.read()));
}

void load64_3::thread_add_ln31_fu_108_p2() {
    add_ln31_fu_108_p2 = (!ap_const_lv14_1.is_01() || !trunc_ln31_fu_104_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(ap_const_lv14_1) + sc_biguint<14>(trunc_ln31_fu_104_p1.read()));
}

void load64_3::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void load64_3::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void load64_3::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void load64_3::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void load64_3::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void load64_3::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void load64_3::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void load64_3::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void load64_3::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_return = r_7_fu_179_p9.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void load64_3::thread_r_7_fu_179_p9() {
    r_7_fu_179_p9 = esl_concat<56,8>(esl_concat<48,8>(esl_concat<40,8>(esl_concat<32,8>(esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(x_q1.read(), x_q0.read()), x_load_5_reg_258.read()), x_load_4_reg_253.read()), x_load_3_reg_238.read()), x_load_2_reg_233.read()), x_load_1_reg_218.read()), x_load_reg_213.read());
}

void load64_3::thread_trunc_ln31_fu_104_p1() {
    trunc_ln31_fu_104_p1 = x_offset.read().range(14-1, 0);
}

void load64_3::thread_x_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x_address0 =  (sc_lv<13>) (zext_ln31_29_fu_164_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_address0 =  (sc_lv<13>) (zext_ln31_27_fu_144_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_address0 =  (sc_lv<13>) (zext_ln31_25_fu_124_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        x_address0 =  (sc_lv<13>) (x_offset.read());
    } else {
        x_address0 = "XXXXXXXXXXXXX";
    }
}

void load64_3::thread_x_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x_address1 =  (sc_lv<13>) (zext_ln31_30_fu_174_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_address1 =  (sc_lv<13>) (zext_ln31_28_fu_154_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_address1 =  (sc_lv<13>) (zext_ln31_26_fu_134_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        x_address1 =  (sc_lv<13>) (zext_ln31_fu_114_p1.read());
    } else {
        x_address1 = "XXXXXXXXXXXXX";
    }
}

void load64_3::thread_x_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        x_ce0 = ap_const_logic_1;
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void load64_3::thread_x_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        x_ce1 = ap_const_logic_1;
    } else {
        x_ce1 = ap_const_logic_0;
    }
}

void load64_3::thread_zext_ln31_25_fu_124_p1() {
    zext_ln31_25_fu_124_p1 = esl_zext<64,14>(add_ln31_1_fu_119_p2.read());
}

void load64_3::thread_zext_ln31_26_fu_134_p1() {
    zext_ln31_26_fu_134_p1 = esl_zext<64,14>(add_ln31_2_fu_129_p2.read());
}

void load64_3::thread_zext_ln31_27_fu_144_p1() {
    zext_ln31_27_fu_144_p1 = esl_zext<64,14>(add_ln31_3_fu_139_p2.read());
}

void load64_3::thread_zext_ln31_28_fu_154_p1() {
    zext_ln31_28_fu_154_p1 = esl_zext<64,14>(add_ln31_4_fu_149_p2.read());
}

void load64_3::thread_zext_ln31_29_fu_164_p1() {
    zext_ln31_29_fu_164_p1 = esl_zext<64,14>(add_ln31_5_fu_159_p2.read());
}

void load64_3::thread_zext_ln31_30_fu_174_p1() {
    zext_ln31_30_fu_174_p1 = esl_zext<64,14>(add_ln31_6_fu_169_p2.read());
}

void load64_3::thread_zext_ln31_fu_114_p1() {
    zext_ln31_fu_114_p1 = esl_zext<64,14>(add_ln31_fu_108_p2.read());
}

void load64_3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

