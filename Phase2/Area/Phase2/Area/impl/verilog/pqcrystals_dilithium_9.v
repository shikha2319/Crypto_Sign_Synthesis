// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pqcrystals_dilithium_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v_vec_coeffs_address0,
        v_vec_coeffs_ce0,
        v_vec_coeffs_we0,
        v_vec_coeffs_d0,
        v_vec_coeffs_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] v_vec_coeffs_address0;
output   v_vec_coeffs_ce0;
output   v_vec_coeffs_we0;
output  [31:0] v_vec_coeffs_d0;
input  [31:0] v_vec_coeffs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] v_vec_coeffs_address0;
reg v_vec_coeffs_ce0;
reg v_vec_coeffs_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_75_p2;
reg   [2:0] i_reg_145;
wire    ap_CS_fsm_state2;
wire   [11:0] zext_ln46_fu_89_p1;
reg   [11:0] zext_ln46_reg_150;
wire   [0:0] icmp_ln202_fu_69_p2;
wire   [8:0] i_2_fu_99_p2;
reg   [8:0] i_2_reg_158;
wire    ap_CS_fsm_state3;
reg   [9:0] v_vec_coeffs_addr_reg_163;
wire   [0:0] icmp_ln50_fu_93_p2;
reg   [2:0] i_0_reg_47;
reg   [8:0] i_0_i_reg_58;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln51_1_fu_114_p1;
wire   [10:0] tmp_fu_81_p3;
wire   [11:0] zext_ln51_fu_105_p1;
wire   [11:0] add_ln51_fu_109_p2;
wire   [0:0] tmp_1_fu_119_p3;
wire   [31:0] select_ln51_fu_127_p3;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_reg_58 <= i_2_reg_158;
    end else if (((icmp_ln202_fu_69_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_reg_58 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_93_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_47 <= i_reg_145;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_47 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_2_reg_158 <= i_2_fu_99_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_145 <= i_fu_75_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v_vec_coeffs_addr_reg_163 <= zext_ln51_1_fu_114_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_69_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln46_reg_150[10 : 8] <= zext_ln46_fu_89_p1[10 : 8];
    end
end

always @ (*) begin
    if ((((icmp_ln202_fu_69_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln202_fu_69_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_vec_coeffs_address0 = v_vec_coeffs_addr_reg_163;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_vec_coeffs_address0 = zext_ln51_1_fu_114_p1;
    end else begin
        v_vec_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        v_vec_coeffs_ce0 = 1'b1;
    end else begin
        v_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_vec_coeffs_we0 = 1'b1;
    end else begin
        v_vec_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln202_fu_69_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln50_fu_93_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln51_fu_109_p2 = (zext_ln46_reg_150 + zext_ln51_fu_105_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign i_2_fu_99_p2 = (i_0_i_reg_58 + 9'd1);

assign i_fu_75_p2 = (i_0_reg_47 + 3'd1);

assign icmp_ln202_fu_69_p2 = ((i_0_reg_47 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_93_p2 = ((i_0_i_reg_58 == 9'd256) ? 1'b1 : 1'b0);

assign select_ln51_fu_127_p3 = ((tmp_1_fu_119_p3[0:0] === 1'b1) ? 32'd8380417 : 32'd0);

assign tmp_1_fu_119_p3 = v_vec_coeffs_q0[32'd31];

assign tmp_fu_81_p3 = {{i_0_reg_47}, {8'd0}};

assign v_vec_coeffs_d0 = (select_ln51_fu_127_p3 + v_vec_coeffs_q0);

assign zext_ln46_fu_89_p1 = tmp_fu_81_p3;

assign zext_ln51_1_fu_114_p1 = add_ln51_fu_109_p2;

assign zext_ln51_fu_105_p1 = i_0_i_reg_58;

always @ (posedge ap_clk) begin
    zext_ln46_reg_150[7:0] <= 8'b00000000;
    zext_ln46_reg_150[11] <= 1'b0;
end

endmodule //pqcrystals_dilithium_9
