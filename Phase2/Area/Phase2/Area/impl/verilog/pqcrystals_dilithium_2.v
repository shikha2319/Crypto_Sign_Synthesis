// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pqcrystals_dilithium_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_address0,
        r_ce0,
        r_we0,
        r_d0,
        r_offset,
        a_coeffs_address0,
        a_coeffs_ce0,
        a_coeffs_q0,
        a_coeffs_offset
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] r_address0;
output   r_ce0;
output   r_we0;
output  [7:0] r_d0;
input  [10:0] r_offset;
output  [9:0] a_coeffs_address0;
output   a_coeffs_ce0;
input  [31:0] a_coeffs_q0;
input  [2:0] a_coeffs_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] r_address0;
reg r_ce0;
reg r_we0;
reg[7:0] r_d0;
reg[9:0] a_coeffs_address0;
reg a_coeffs_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] zext_ln810_2_fu_245_p1;
reg   [11:0] zext_ln810_2_reg_670;
wire   [9:0] zext_ln804_fu_249_p1;
reg   [9:0] zext_ln804_reg_683;
wire    ap_CS_fsm_state2;
wire   [6:0] i_fu_259_p2;
reg   [6:0] i_reg_691;
wire   [5:0] trunc_ln805_fu_265_p1;
reg   [5:0] trunc_ln805_reg_696;
wire   [0:0] icmp_ln804_fu_253_p2;
wire   [9:0] add_ln810_fu_299_p2;
reg   [9:0] add_ln810_reg_707;
wire    ap_CS_fsm_state3;
reg   [7:0] trunc_ln10_reg_719;
reg   [7:0] trunc_ln_reg_724;
wire   [7:0] shl_ln_fu_338_p3;
reg   [7:0] shl_ln_reg_729;
wire    ap_CS_fsm_state4;
reg   [7:0] trunc_ln11_reg_740;
wire    ap_CS_fsm_state5;
reg   [7:0] trunc_ln12_reg_745;
wire    ap_CS_fsm_state6;
reg   [7:0] trunc_ln13_reg_755;
wire    ap_CS_fsm_state7;
reg   [7:0] trunc_ln14_reg_760;
wire    ap_CS_fsm_state8;
reg   [7:0] trunc_ln15_reg_770;
wire    ap_CS_fsm_state9;
reg   [7:0] trunc_ln16_reg_775;
wire   [11:0] add_ln821_1_fu_653_p2;
reg   [11:0] add_ln821_1_reg_780;
wire    ap_CS_fsm_state10;
reg   [6:0] i_0_reg_228;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln805_fu_278_p1;
wire   [63:0] zext_ln810_3_fu_313_p1;
wire   [63:0] zext_ln806_fu_358_p1;
wire   [63:0] zext_ln811_1_fu_377_p1;
wire   [63:0] zext_ln812_1_fu_396_p1;
wire   [63:0] zext_ln807_fu_451_p1;
wire   [63:0] zext_ln814_1_fu_470_p1;
wire   [63:0] zext_ln815_1_fu_489_p1;
wire   [63:0] zext_ln808_fu_544_p1;
wire   [63:0] zext_ln817_1_fu_563_p1;
wire   [63:0] zext_ln818_1_fu_582_p1;
wire   [63:0] zext_ln820_1_fu_639_p1;
wire   [63:0] zext_ln821_1_fu_658_p1;
wire   [7:0] trunc_ln810_fu_283_p1;
wire   [7:0] or_ln813_fu_413_p2;
wire   [7:0] or_ln816_fu_506_p2;
wire   [7:0] or_ln819_fu_599_p2;
wire   [10:0] tmp_17_fu_269_p4;
wire   [31:0] grp_fu_239_p2;
wire   [8:0] shl_ln6_fu_288_p3;
wire   [9:0] zext_ln810_fu_295_p1;
wire   [11:0] zext_ln810_1_fu_304_p1;
wire   [11:0] add_ln810_1_fu_308_p2;
wire   [7:0] or_ln806_fu_345_p2;
wire   [10:0] tmp_18_fu_351_p3;
wire   [9:0] add_ln811_fu_363_p2;
wire   [11:0] zext_ln811_fu_368_p1;
wire   [11:0] add_ln811_1_fu_372_p2;
wire   [9:0] add_ln812_fu_382_p2;
wire   [11:0] zext_ln812_fu_387_p1;
wire   [11:0] add_ln812_1_fu_391_p2;
wire   [5:0] trunc_ln813_fu_401_p1;
wire   [7:0] shl_ln7_fu_405_p3;
wire   [7:0] or_ln807_fu_439_p2;
wire   [10:0] tmp_19_fu_444_p3;
wire   [9:0] add_ln814_fu_456_p2;
wire   [11:0] zext_ln814_fu_461_p1;
wire   [11:0] add_ln814_1_fu_465_p2;
wire   [9:0] add_ln815_fu_475_p2;
wire   [11:0] zext_ln815_fu_480_p1;
wire   [11:0] add_ln815_1_fu_484_p2;
wire   [3:0] trunc_ln816_fu_494_p1;
wire   [7:0] shl_ln8_fu_498_p3;
wire   [7:0] or_ln808_fu_532_p2;
wire   [10:0] tmp_20_fu_537_p3;
wire   [9:0] add_ln817_fu_549_p2;
wire   [11:0] zext_ln817_fu_554_p1;
wire   [11:0] add_ln817_1_fu_558_p2;
wire   [9:0] add_ln818_fu_568_p2;
wire   [11:0] zext_ln818_fu_573_p1;
wire   [11:0] add_ln818_1_fu_577_p2;
wire   [1:0] trunc_ln819_fu_587_p1;
wire   [7:0] shl_ln9_fu_591_p3;
wire   [9:0] add_ln820_fu_625_p2;
wire   [11:0] zext_ln820_fu_630_p1;
wire   [11:0] add_ln820_1_fu_634_p2;
wire   [9:0] add_ln821_fu_644_p2;
wire   [11:0] zext_ln821_fu_649_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_0_reg_228 <= i_reg_691;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_228 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln810_reg_707 <= add_ln810_fu_299_p2;
        trunc_ln10_reg_719 <= {{grp_fu_239_p2[15:8]}};
        trunc_ln_reg_724 <= {{grp_fu_239_p2[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln821_1_reg_780 <= add_ln821_1_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_691 <= i_fu_259_p2;
        zext_ln804_reg_683[6 : 0] <= zext_ln804_fu_249_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shl_ln_reg_729[7 : 2] <= shl_ln_fu_338_p3[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        trunc_ln11_reg_740 <= {{grp_fu_239_p2[13:6]}};
        trunc_ln12_reg_745 <= {{grp_fu_239_p2[21:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        trunc_ln13_reg_755 <= {{grp_fu_239_p2[11:4]}};
        trunc_ln14_reg_760 <= {{grp_fu_239_p2[19:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln15_reg_770 <= {{grp_fu_239_p2[9:2]}};
        trunc_ln16_reg_775 <= {{grp_fu_239_p2[17:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln804_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln805_reg_696 <= trunc_ln805_fu_265_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        zext_ln810_2_reg_670[10 : 0] <= zext_ln810_2_fu_245_p1[10 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        a_coeffs_address0 = zext_ln808_fu_544_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a_coeffs_address0 = zext_ln807_fu_451_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_coeffs_address0 = zext_ln806_fu_358_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_coeffs_address0 = zext_ln805_fu_278_p1;
    end else begin
        a_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        a_coeffs_ce0 = 1'b1;
    end else begin
        a_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln804_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln804_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_address0 = zext_ln821_1_fu_658_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_address0 = zext_ln820_1_fu_639_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_address0 = zext_ln818_1_fu_582_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_address0 = zext_ln817_1_fu_563_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_address0 = zext_ln815_1_fu_489_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_address0 = zext_ln814_1_fu_470_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_address0 = zext_ln812_1_fu_396_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_address0 = zext_ln811_1_fu_377_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_address0 = zext_ln810_3_fu_313_p1;
    end else begin
        r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        r_ce0 = 1'b1;
    end else begin
        r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_d0 = trunc_ln16_reg_775;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_d0 = trunc_ln15_reg_770;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_d0 = or_ln819_fu_599_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_d0 = trunc_ln13_reg_755;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_d0 = or_ln816_fu_506_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_d0 = trunc_ln11_reg_740;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_d0 = or_ln813_fu_413_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_d0 = trunc_ln10_reg_719;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_d0 = trunc_ln810_fu_283_p1;
    end else begin
        r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        r_we0 = 1'b1;
    end else begin
        r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln804_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln810_1_fu_308_p2 = (zext_ln810_1_fu_304_p1 + zext_ln810_2_reg_670);

assign add_ln810_fu_299_p2 = (zext_ln810_fu_295_p1 + zext_ln804_reg_683);

assign add_ln811_1_fu_372_p2 = (zext_ln811_fu_368_p1 + zext_ln810_2_reg_670);

assign add_ln811_fu_363_p2 = (10'd1 + add_ln810_reg_707);

assign add_ln812_1_fu_391_p2 = (zext_ln812_fu_387_p1 + zext_ln810_2_reg_670);

assign add_ln812_fu_382_p2 = (10'd2 + add_ln810_reg_707);

assign add_ln814_1_fu_465_p2 = (zext_ln814_fu_461_p1 + zext_ln810_2_reg_670);

assign add_ln814_fu_456_p2 = (10'd3 + add_ln810_reg_707);

assign add_ln815_1_fu_484_p2 = (zext_ln815_fu_480_p1 + zext_ln810_2_reg_670);

assign add_ln815_fu_475_p2 = (10'd4 + add_ln810_reg_707);

assign add_ln817_1_fu_558_p2 = (zext_ln817_fu_554_p1 + zext_ln810_2_reg_670);

assign add_ln817_fu_549_p2 = (10'd5 + add_ln810_reg_707);

assign add_ln818_1_fu_577_p2 = (zext_ln818_fu_573_p1 + zext_ln810_2_reg_670);

assign add_ln818_fu_568_p2 = (10'd6 + add_ln810_reg_707);

assign add_ln820_1_fu_634_p2 = (zext_ln820_fu_630_p1 + zext_ln810_2_reg_670);

assign add_ln820_fu_625_p2 = (10'd7 + add_ln810_reg_707);

assign add_ln821_1_fu_653_p2 = (zext_ln821_fu_649_p1 + zext_ln810_2_reg_670);

assign add_ln821_fu_644_p2 = (10'd8 + add_ln810_reg_707);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_239_p2 = (32'd131072 - a_coeffs_q0);

assign i_fu_259_p2 = (i_0_reg_228 + 7'd1);

assign icmp_ln804_fu_253_p2 = ((i_0_reg_228 == 7'd64) ? 1'b1 : 1'b0);

assign or_ln806_fu_345_p2 = (shl_ln_fu_338_p3 | 8'd1);

assign or_ln807_fu_439_p2 = (shl_ln_reg_729 | 8'd2);

assign or_ln808_fu_532_p2 = (shl_ln_reg_729 | 8'd3);

assign or_ln813_fu_413_p2 = (trunc_ln_reg_724 | shl_ln7_fu_405_p3);

assign or_ln816_fu_506_p2 = (trunc_ln12_reg_745 | shl_ln8_fu_498_p3);

assign or_ln819_fu_599_p2 = (trunc_ln14_reg_760 | shl_ln9_fu_591_p3);

assign shl_ln6_fu_288_p3 = {{trunc_ln805_reg_696}, {3'd0}};

assign shl_ln7_fu_405_p3 = {{trunc_ln813_fu_401_p1}, {2'd0}};

assign shl_ln8_fu_498_p3 = {{trunc_ln816_fu_494_p1}, {4'd0}};

assign shl_ln9_fu_591_p3 = {{trunc_ln819_fu_587_p1}, {6'd0}};

assign shl_ln_fu_338_p3 = {{trunc_ln805_reg_696}, {2'd0}};

assign tmp_17_fu_269_p4 = {{{a_coeffs_offset}, {trunc_ln805_fu_265_p1}}, {2'd0}};

assign tmp_18_fu_351_p3 = {{a_coeffs_offset}, {or_ln806_fu_345_p2}};

assign tmp_19_fu_444_p3 = {{a_coeffs_offset}, {or_ln807_fu_439_p2}};

assign tmp_20_fu_537_p3 = {{a_coeffs_offset}, {or_ln808_fu_532_p2}};

assign trunc_ln805_fu_265_p1 = i_0_reg_228[5:0];

assign trunc_ln810_fu_283_p1 = grp_fu_239_p2[7:0];

assign trunc_ln813_fu_401_p1 = grp_fu_239_p2[5:0];

assign trunc_ln816_fu_494_p1 = grp_fu_239_p2[3:0];

assign trunc_ln819_fu_587_p1 = grp_fu_239_p2[1:0];

assign zext_ln804_fu_249_p1 = i_0_reg_228;

assign zext_ln805_fu_278_p1 = tmp_17_fu_269_p4;

assign zext_ln806_fu_358_p1 = tmp_18_fu_351_p3;

assign zext_ln807_fu_451_p1 = tmp_19_fu_444_p3;

assign zext_ln808_fu_544_p1 = tmp_20_fu_537_p3;

assign zext_ln810_1_fu_304_p1 = add_ln810_fu_299_p2;

assign zext_ln810_2_fu_245_p1 = r_offset;

assign zext_ln810_3_fu_313_p1 = add_ln810_1_fu_308_p2;

assign zext_ln810_fu_295_p1 = shl_ln6_fu_288_p3;

assign zext_ln811_1_fu_377_p1 = add_ln811_1_fu_372_p2;

assign zext_ln811_fu_368_p1 = add_ln811_fu_363_p2;

assign zext_ln812_1_fu_396_p1 = add_ln812_1_fu_391_p2;

assign zext_ln812_fu_387_p1 = add_ln812_fu_382_p2;

assign zext_ln814_1_fu_470_p1 = add_ln814_1_fu_465_p2;

assign zext_ln814_fu_461_p1 = add_ln814_fu_456_p2;

assign zext_ln815_1_fu_489_p1 = add_ln815_1_fu_484_p2;

assign zext_ln815_fu_480_p1 = add_ln815_fu_475_p2;

assign zext_ln817_1_fu_563_p1 = add_ln817_1_fu_558_p2;

assign zext_ln817_fu_554_p1 = add_ln817_fu_549_p2;

assign zext_ln818_1_fu_582_p1 = add_ln818_1_fu_577_p2;

assign zext_ln818_fu_573_p1 = add_ln818_fu_568_p2;

assign zext_ln820_1_fu_639_p1 = add_ln820_1_fu_634_p2;

assign zext_ln820_fu_630_p1 = add_ln820_fu_625_p2;

assign zext_ln821_1_fu_658_p1 = add_ln821_1_reg_780;

assign zext_ln821_fu_649_p1 = add_ln821_fu_644_p2;

always @ (posedge ap_clk) begin
    zext_ln810_2_reg_670[11] <= 1'b0;
    zext_ln804_reg_683[9:7] <= 3'b000;
    shl_ln_reg_729[1:0] <= 2'b00;
end

endmodule //pqcrystals_dilithium_2
