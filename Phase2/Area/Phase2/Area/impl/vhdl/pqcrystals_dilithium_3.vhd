-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    w_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    w_coeffs_ce0 : OUT STD_LOGIC;
    w_coeffs_we0 : OUT STD_LOGIC;
    w_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_coeffs_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    u_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    u_vec_coeffs_ce0 : OUT STD_LOGIC;
    u_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (22 downto 0);
    v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v_vec_coeffs_ce0 : OUT STD_LOGIC;
    v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of pqcrystals_dilithium_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_3802001 : STD_LOGIC_VECTOR (31 downto 0) := "00000011100000000010000000000001";
    constant ap_const_lv55_7FFFFFFF801FFF : STD_LOGIC_VECTOR (54 downto 0) := "1111111111111111111111111111111100000000001111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_193 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln181_3_fu_209_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln181_3_reg_516 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln181_3_cast_fu_221_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln181_3_cast_reg_522 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_7_fu_231_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_7_reg_530 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln180_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln181_fu_264_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal mul_ln181_reg_545 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln18_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln181_fu_278_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln181_reg_555 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal t_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_fu_291_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal mul_ln19_reg_565 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_15_cast_fu_343_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_cast_reg_573 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln137_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln176_fu_359_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln176_reg_578 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_8_fu_369_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_8_reg_586 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln180_1_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln181_1_fu_411_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal mul_ln181_1_reg_601 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln18_1_fu_417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_1_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_5_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_5_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal mul_ln19_1_fu_429_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal mul_ln19_1_reg_616 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_9_fu_473_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_9_reg_624 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal w_coeffs_addr_1_reg_629 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln87_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_498_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_coeffs_ce0 : STD_LOGIC;
    signal t_coeffs_we0 : STD_LOGIC;
    signal t_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_146 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_reg_158 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i1_reg_170 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_0_i20_reg_182 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln181_4_fu_251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_6_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_11_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_12_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_1_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_2_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_4_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln88_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_201_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_213_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_242_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln181_fu_264_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln181_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln181_5_fu_274_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln19_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln181_2_fu_301_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal sext_ln19_2_fu_304_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln19_fu_307_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_3_fu_313_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln181_8_fu_334_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln181_1_fu_338_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_351_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln181_10_fu_379_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln181_2_fu_383_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln181_9_fu_375_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln181_3_fu_393_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln181_1_fu_411_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln181_1_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_1_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln181_4_fu_440_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal sext_ln19_5_fu_443_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln19_1_fu_446_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_4_fu_452_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln88_1_fu_484_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln88_1_fu_488_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln181_1_fu_411_p00 : STD_LOGIC_VECTOR (54 downto 0);
    signal mul_ln181_fu_264_p00 : STD_LOGIC_VECTOR (54 downto 0);

    component pqcrystals_dilithkbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    t_coeffs_U : component pqcrystals_dilithkbM
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_coeffs_address0,
        ce0 => t_coeffs_ce0,
        we0 => t_coeffs_we0,
        d0 => t_coeffs_d0,
        q0 => t_coeffs_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_i1_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_0_i1_reg_170 <= i_8_reg_586;
            elsif (((icmp_ln137_fu_328_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_0_i1_reg_170 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_i20_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln180_1_fu_363_p2 = ap_const_lv1_1))) then 
                i_0_i20_reg_182 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_0_i20_reg_182 <= i_9_reg_624;
            end if; 
        end if;
    end process;

    i_0_i_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_i_reg_146 <= i_7_reg_530;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_146 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_158 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln87_fu_467_p2 = ap_const_lv1_1))) then 
                i_0_reg_158 <= i_fu_498_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln181_reg_555 <= add_ln181_fu_278_p2;
                t_reg_560 <= t_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_7_reg_530 <= i_7_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_8_reg_586 <= i_8_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_9_reg_624 <= i_9_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                mul_ln181_1_reg_601 <= mul_ln181_1_fu_411_p2;
                trunc_ln18_1_reg_606 <= trunc_ln18_1_fu_417_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln181_reg_545 <= mul_ln181_fu_264_p2;
                trunc_ln18_reg_550 <= trunc_ln18_fu_270_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                mul_ln19_1_reg_616 <= mul_ln19_1_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln19_reg_565 <= mul_ln19_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_193 <= u_vec_coeffs_q0;
                reg_197 <= v_vec_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                t_5_reg_611 <= t_5_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_328_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    tmp_15_cast_reg_573(13 downto 8) <= tmp_15_cast_fu_343_p3(13 downto 8);
                    zext_ln176_reg_578(10 downto 8) <= zext_ln176_fu_359_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                w_coeffs_addr_1_reg_629 <= zext_ln88_2_fu_493_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    zext_ln181_3_cast_reg_522(4 downto 2) <= zext_ln181_3_cast_fu_221_p1(4 downto 2);
                    zext_ln181_3_reg_516(10 downto 8) <= zext_ln181_3_fu_209_p1(10 downto 8);
            end if;
        end if;
    end process;
    zext_ln181_3_reg_516(7 downto 0) <= "00000000";
    zext_ln181_3_reg_516(11) <= '0';
    zext_ln181_3_cast_reg_522(1 downto 0) <= "00";
    zext_ln181_3_cast_reg_522(5) <= '0';
    tmp_15_cast_reg_573(7 downto 0) <= "00000000";
    zext_ln176_reg_578(7 downto 0) <= "00000000";
    zext_ln176_reg_578(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln180_fu_225_p2, ap_CS_fsm_state8, icmp_ln137_fu_328_p2, ap_CS_fsm_state9, icmp_ln180_1_fu_363_p2, ap_CS_fsm_state15, icmp_ln87_fu_467_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln180_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln137_fu_328_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln180_1_fu_363_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln87_fu_467_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln181_1_fu_338_p2 <= std_logic_vector(unsigned(zext_ln181_8_fu_334_p1) + unsigned(zext_ln181_3_cast_reg_522));
    add_ln181_2_fu_383_p2 <= std_logic_vector(unsigned(tmp_15_cast_reg_573) + unsigned(zext_ln181_10_fu_379_p1));
    add_ln181_3_fu_393_p2 <= std_logic_vector(unsigned(zext_ln176_reg_578) + unsigned(zext_ln181_9_fu_375_p1));
    add_ln181_fu_278_p2 <= std_logic_vector(unsigned(zext_ln181_3_reg_516) + unsigned(zext_ln181_5_fu_274_p1));
    add_ln19_1_fu_446_p2 <= std_logic_vector(signed(sext_ln181_4_fu_440_p1) + signed(sext_ln19_5_fu_443_p1));
    add_ln19_fu_307_p2 <= std_logic_vector(signed(sext_ln181_2_fu_301_p1) + signed(sext_ln19_2_fu_304_p1));
    add_ln88_1_fu_488_p2 <= std_logic_vector(unsigned(zext_ln181_3_reg_516) + unsigned(zext_ln88_1_fu_484_p1));
    add_ln88_fu_504_p2 <= std_logic_vector(unsigned(w_coeffs_q0) + unsigned(t_coeffs_q0));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8, icmp_ln137_fu_328_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln137_fu_328_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln137_fu_328_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln137_fu_328_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_7_fu_231_p2 <= std_logic_vector(unsigned(i_0_i_reg_146) + unsigned(ap_const_lv9_1));
    i_8_fu_369_p2 <= std_logic_vector(unsigned(i_0_i1_reg_170) + unsigned(ap_const_lv9_1));
    i_9_fu_473_p2 <= std_logic_vector(unsigned(i_0_i20_reg_182) + unsigned(ap_const_lv9_1));
    i_fu_498_p2 <= std_logic_vector(unsigned(i_0_reg_158) + unsigned(ap_const_lv3_1));
    icmp_ln137_fu_328_p2 <= "1" when (i_0_reg_158 = ap_const_lv3_4) else "0";
    icmp_ln180_1_fu_363_p2 <= "1" when (i_0_i1_reg_170 = ap_const_lv9_100) else "0";
    icmp_ln180_fu_225_p2 <= "1" when (i_0_i_reg_146 = ap_const_lv9_100) else "0";
    icmp_ln87_fu_467_p2 <= "1" when (i_0_i20_reg_182 = ap_const_lv9_100) else "0";
    mul_ln181_1_fu_411_p0 <= mul_ln181_1_fu_411_p00(23 - 1 downto 0);
    mul_ln181_1_fu_411_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_193),55));
    mul_ln181_1_fu_411_p1 <= reg_197;
    mul_ln181_1_fu_411_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln181_1_fu_411_p0) * signed(mul_ln181_1_fu_411_p1))), 55));
    mul_ln181_fu_264_p0 <= mul_ln181_fu_264_p00(23 - 1 downto 0);
    mul_ln181_fu_264_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_193),55));
    mul_ln181_fu_264_p1 <= reg_197;
    mul_ln181_fu_264_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln181_fu_264_p0) * signed(mul_ln181_fu_264_p1))), 55));
    mul_ln19_1_fu_429_p1 <= t_5_reg_611;
    mul_ln19_1_fu_429_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv55_7FFFFFFF801FFF) * signed(mul_ln19_1_fu_429_p1))), 55));
    mul_ln19_fu_291_p1 <= t_reg_560;
    mul_ln19_fu_291_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv55_7FFFFFFF801FFF) * signed(mul_ln19_fu_291_p1))), 55));
        sext_ln181_2_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln181_reg_545),56));

        sext_ln181_4_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln181_1_reg_601),56));

        sext_ln19_2_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln19_reg_565),56));

        sext_ln19_5_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln19_1_reg_616),56));

        t_4_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_313_p4),32));

    t_5_fu_421_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_3802001) * signed(trunc_ln18_1_reg_606))), 32));

    t_coeffs_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state14, zext_ln181_1_fu_435_p1, zext_ln88_fu_479_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_coeffs_address0 <= zext_ln88_fu_479_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_coeffs_address0 <= zext_ln181_1_fu_435_p1(8 - 1 downto 0);
        else 
            t_coeffs_address0 <= "XXXXXXXX";
        end if; 
    end process;


    t_coeffs_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            t_coeffs_ce0 <= ap_const_logic_1;
        else 
            t_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        t_coeffs_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_452_p4),32));


    t_coeffs_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_coeffs_we0 <= ap_const_logic_1;
        else 
            t_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    t_fu_283_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_3802001) * signed(trunc_ln18_reg_550))), 32));
    tmp_15_cast_fu_343_p3 <= (add_ln181_1_fu_338_p2 & ap_const_lv8_0);
    tmp_1_fu_242_p4 <= ((w_coeffs_offset & ap_const_lv1_0) & i_0_i_reg_146);
    tmp_2_fu_351_p3 <= (i_0_reg_158 & ap_const_lv8_0);
    tmp_3_fu_313_p4 <= add_ln19_fu_307_p2(55 downto 32);
    tmp_4_fu_452_p4 <= add_ln19_1_fu_446_p2(55 downto 32);
    tmp_fu_201_p3 <= (w_coeffs_offset & ap_const_lv8_0);
    tmp_s_fu_213_p3 <= (w_coeffs_offset & ap_const_lv2_0);
    trunc_ln18_1_fu_417_p1 <= mul_ln181_1_fu_411_p2(32 - 1 downto 0);
    trunc_ln18_fu_270_p1 <= mul_ln181_fu_264_p2(32 - 1 downto 0);

    u_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, zext_ln181_4_fu_251_p1, zext_ln181_11_fu_388_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            u_vec_coeffs_address0 <= zext_ln181_11_fu_388_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            u_vec_coeffs_address0 <= zext_ln181_4_fu_251_p1(12 - 1 downto 0);
        else 
            u_vec_coeffs_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    u_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            u_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            u_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, zext_ln181_fu_237_p1, zext_ln181_12_fu_398_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            v_vec_coeffs_address0 <= zext_ln181_12_fu_398_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v_vec_coeffs_address0 <= zext_ln181_fu_237_p1(10 - 1 downto 0);
        else 
            v_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    v_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            v_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            v_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_coeffs_address0_assign_proc : process(ap_CS_fsm_state15, w_coeffs_addr_1_reg_629, ap_CS_fsm_state7, ap_CS_fsm_state16, zext_ln181_6_fu_297_p1, zext_ln88_2_fu_493_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            w_coeffs_address0 <= w_coeffs_addr_1_reg_629;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            w_coeffs_address0 <= zext_ln88_2_fu_493_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            w_coeffs_address0 <= zext_ln181_6_fu_297_p1(10 - 1 downto 0);
        else 
            w_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    w_coeffs_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            w_coeffs_ce0 <= ap_const_logic_1;
        else 
            w_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_coeffs_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state16, t_4_fu_323_p1, add_ln88_fu_504_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            w_coeffs_d0 <= add_ln88_fu_504_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            w_coeffs_d0 <= t_4_fu_323_p1;
        else 
            w_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_coeffs_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            w_coeffs_we0 <= ap_const_logic_1;
        else 
            w_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln176_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_351_p3),12));
    zext_ln181_10_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_170),14));
    zext_ln181_11_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln181_2_fu_383_p2),64));
    zext_ln181_12_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln181_3_fu_393_p2),64));
    zext_ln181_1_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_170),64));
    zext_ln181_3_cast_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_213_p3),6));
    zext_ln181_3_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_201_p3),12));
    zext_ln181_4_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_242_p4),64));
    zext_ln181_5_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_146),12));
    zext_ln181_6_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln181_reg_555),64));
    zext_ln181_8_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_158),6));
    zext_ln181_9_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_170),12));
    zext_ln181_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_146),64));
    zext_ln88_1_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i20_reg_182),12));
    zext_ln88_2_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln88_1_fu_488_p2),64));
    zext_ln88_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i20_reg_182),64));
end behav;
