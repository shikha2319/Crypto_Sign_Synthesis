// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "shake128_absorb.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic shake128_absorb::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic shake128_absorb::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> shake128_absorb::ap_ST_fsm_state1 = "1";
const sc_lv<8> shake128_absorb::ap_ST_fsm_state2 = "10";
const sc_lv<8> shake128_absorb::ap_ST_fsm_state3 = "100";
const sc_lv<8> shake128_absorb::ap_ST_fsm_state4 = "1000";
const sc_lv<8> shake128_absorb::ap_ST_fsm_state5 = "10000";
const sc_lv<8> shake128_absorb::ap_ST_fsm_state6 = "100000";
const sc_lv<8> shake128_absorb::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> shake128_absorb::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> shake128_absorb::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> shake128_absorb::ap_const_lv32_1 = "1";
const sc_lv<32> shake128_absorb::ap_const_lv32_2 = "10";
const sc_lv<32> shake128_absorb::ap_const_lv32_3 = "11";
const sc_lv<1> shake128_absorb::ap_const_lv1_1 = "1";
const sc_lv<32> shake128_absorb::ap_const_lv32_4 = "100";
const sc_lv<32> shake128_absorb::ap_const_lv32_5 = "101";
const sc_lv<32> shake128_absorb::ap_const_lv32_6 = "110";
const sc_lv<3> shake128_absorb::ap_const_lv3_0 = "000";
const sc_lv<1> shake128_absorb::ap_const_lv1_0 = "0";
const sc_lv<4> shake128_absorb::ap_const_lv4_0 = "0000";
const sc_lv<2> shake128_absorb::ap_const_lv2_0 = "00";
const sc_lv<64> shake128_absorb::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> shake128_absorb::ap_const_lv64_1 = "1";
const sc_lv<64> shake128_absorb::ap_const_lv64_2 = "10";
const sc_lv<64> shake128_absorb::ap_const_lv64_3 = "11";
const sc_lv<64> shake128_absorb::ap_const_lv64_4 = "100";
const sc_lv<64> shake128_absorb::ap_const_lv64_5 = "101";
const sc_lv<64> shake128_absorb::ap_const_lv64_6 = "110";
const sc_lv<64> shake128_absorb::ap_const_lv64_7 = "111";
const sc_lv<8> shake128_absorb::ap_const_lv8_0 = "00000000";
const sc_lv<32> shake128_absorb::ap_const_lv32_7 = "111";
const sc_lv<3> shake128_absorb::ap_const_lv3_1 = "1";
const sc_lv<3> shake128_absorb::ap_const_lv3_7 = "111";
const sc_lv<4> shake128_absorb::ap_const_lv4_8 = "1000";
const sc_lv<4> shake128_absorb::ap_const_lv4_1 = "1";
const sc_lv<2> shake128_absorb::ap_const_lv2_2 = "10";
const sc_lv<2> shake128_absorb::ap_const_lv2_1 = "1";
const bool shake128_absorb::ap_const_boolean_1 = true;

shake128_absorb::shake128_absorb(sc_module_name name) : sc_module(name), mVcdFile(0) {
    t_U = new shake128_absorb_t("t_U");
    t_U->clk(ap_clk);
    t_U->reset(ap_rst);
    t_U->address0(t_address0);
    t_U->ce0(t_ce0);
    t_U->we0(t_we0);
    t_U->d0(t_d0);
    t_U->q0(t_q0);
    t_U->address1(t_address1);
    t_U->ce1(t_ce1);
    t_U->q1(t_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln387_fu_218_p2);
    sensitive << ( phi_ln387_reg_181 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_i_1_fu_263_p2);
    sensitive << ( i_5_i_reg_203 );

    SC_METHOD(thread_i_fu_241_p2);
    sensitive << ( i_4_i_reg_192 );

    SC_METHOD(thread_icmp_ln387_fu_229_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( phi_ln387_reg_181 );

    SC_METHOD(thread_icmp_ln423_fu_235_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_4_i_reg_192 );

    SC_METHOD(thread_icmp_ln425_fu_257_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_5_i_reg_203 );

    SC_METHOD(thread_in_1_read_cast_fu_214_p1);
    sensitive << ( in_1_read );

    SC_METHOD(thread_r_7_i1_fu_280_p9);
    sensitive << ( t_q0 );
    sensitive << ( t_load_reg_345 );
    sensitive << ( t_q1 );
    sensitive << ( t_load_1_reg_350 );
    sensitive << ( t_load_2_reg_365 );
    sensitive << ( t_load_3_reg_370 );
    sensitive << ( t_load_4_reg_385 );
    sensitive << ( t_load_5_reg_390 );

    SC_METHOD(thread_select_ln426_fu_273_p3);
    sensitive << ( in_0_read );
    sensitive << ( in_1_read_cast_reg_306 );
    sensitive << ( trunc_ln426_fu_269_p1 );

    SC_METHOD(thread_state_s_addr_reg_405);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_state_s_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( state_s_addr_reg_405 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_s_ce0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_s_d0);
    sensitive << ( state_s_q0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( r_7_i1_fu_280_p9 );

    SC_METHOD(thread_state_s_we0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_t_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln425_fu_257_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln387_fu_224_p1 );
    sensitive << ( zext_ln424_fu_247_p1 );
    sensitive << ( zext_ln425_fu_252_p1 );

    SC_METHOD(thread_t_address1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_t_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln425_fu_257_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_t_ce1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_t_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln425_fu_257_p2 );
    sensitive << ( select_ln426_fu_273_p3 );

    SC_METHOD(thread_t_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln425_fu_257_p2 );
    sensitive << ( icmp_ln423_fu_235_p2 );

    SC_METHOD(thread_trunc_ln426_fu_269_p1);
    sensitive << ( i_5_i_reg_203 );

    SC_METHOD(thread_zext_ln387_fu_224_p1);
    sensitive << ( phi_ln387_reg_181 );

    SC_METHOD(thread_zext_ln424_fu_247_p1);
    sensitive << ( i_4_i_reg_192 );

    SC_METHOD(thread_zext_ln425_fu_252_p1);
    sensitive << ( i_5_i_reg_203 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln425_fu_257_p2 );
    sensitive << ( icmp_ln387_fu_229_p2 );
    sensitive << ( icmp_ln423_fu_235_p2 );

    ap_CS_fsm = "00000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "shake128_absorb_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_s_address0, "(port)state_s_address0");
    sc_trace(mVcdFile, state_s_ce0, "(port)state_s_ce0");
    sc_trace(mVcdFile, state_s_we0, "(port)state_s_we0");
    sc_trace(mVcdFile, state_s_d0, "(port)state_s_d0");
    sc_trace(mVcdFile, state_s_q0, "(port)state_s_q0");
    sc_trace(mVcdFile, in_0_read, "(port)in_0_read");
    sc_trace(mVcdFile, in_1_read, "(port)in_1_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in_1_read_cast_fu_214_p1, "in_1_read_cast_fu_214_p1");
    sc_trace(mVcdFile, in_1_read_cast_reg_306, "in_1_read_cast_reg_306");
    sc_trace(mVcdFile, add_ln387_fu_218_p2, "add_ln387_fu_218_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_241_p2, "i_fu_241_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_1_fu_263_p2, "i_1_fu_263_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln425_fu_257_p2, "icmp_ln425_fu_257_p2");
    sc_trace(mVcdFile, t_q0, "t_q0");
    sc_trace(mVcdFile, t_load_reg_345, "t_load_reg_345");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, t_q1, "t_q1");
    sc_trace(mVcdFile, t_load_1_reg_350, "t_load_1_reg_350");
    sc_trace(mVcdFile, t_load_2_reg_365, "t_load_2_reg_365");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, t_load_3_reg_370, "t_load_3_reg_370");
    sc_trace(mVcdFile, t_load_4_reg_385, "t_load_4_reg_385");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, t_load_5_reg_390, "t_load_5_reg_390");
    sc_trace(mVcdFile, state_s_addr_reg_405, "state_s_addr_reg_405");
    sc_trace(mVcdFile, t_address0, "t_address0");
    sc_trace(mVcdFile, t_ce0, "t_ce0");
    sc_trace(mVcdFile, t_we0, "t_we0");
    sc_trace(mVcdFile, t_d0, "t_d0");
    sc_trace(mVcdFile, t_address1, "t_address1");
    sc_trace(mVcdFile, t_ce1, "t_ce1");
    sc_trace(mVcdFile, phi_ln387_reg_181, "phi_ln387_reg_181");
    sc_trace(mVcdFile, icmp_ln387_fu_229_p2, "icmp_ln387_fu_229_p2");
    sc_trace(mVcdFile, i_4_i_reg_192, "i_4_i_reg_192");
    sc_trace(mVcdFile, icmp_ln423_fu_235_p2, "icmp_ln423_fu_235_p2");
    sc_trace(mVcdFile, i_5_i_reg_203, "i_5_i_reg_203");
    sc_trace(mVcdFile, zext_ln387_fu_224_p1, "zext_ln387_fu_224_p1");
    sc_trace(mVcdFile, zext_ln424_fu_247_p1, "zext_ln424_fu_247_p1");
    sc_trace(mVcdFile, zext_ln425_fu_252_p1, "zext_ln425_fu_252_p1");
    sc_trace(mVcdFile, select_ln426_fu_273_p3, "select_ln426_fu_273_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, trunc_ln426_fu_269_p1, "trunc_ln426_fu_269_p1");
    sc_trace(mVcdFile, r_7_i1_fu_280_p9, "r_7_i1_fu_280_p9");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

shake128_absorb::~shake128_absorb() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete t_U;
}

void shake128_absorb::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln387_fu_229_p2.read()))) {
        i_4_i_reg_192 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln423_fu_235_p2.read()))) {
        i_4_i_reg_192 = i_fu_241_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln423_fu_235_p2.read()))) {
        i_5_i_reg_203 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln425_fu_257_p2.read(), ap_const_lv1_0))) {
        i_5_i_reg_203 = i_1_fu_263_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln387_fu_229_p2.read(), ap_const_lv1_0))) {
        phi_ln387_reg_181 = add_ln387_fu_218_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_ln387_reg_181 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        in_1_read_cast_reg_306 = in_1_read_cast_fu_214_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        t_load_1_reg_350 = t_q1.read();
        t_load_reg_345 = t_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        t_load_2_reg_365 = t_q1.read();
        t_load_3_reg_370 = t_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        t_load_4_reg_385 = t_q1.read();
        t_load_5_reg_390 = t_q0.read();
    }
}

void shake128_absorb::thread_add_ln387_fu_218_p2() {
    add_ln387_fu_218_p2 = (!phi_ln387_reg_181.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(phi_ln387_reg_181.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void shake128_absorb::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void shake128_absorb::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void shake128_absorb::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void shake128_absorb::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void shake128_absorb::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void shake128_absorb::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void shake128_absorb::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void shake128_absorb::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void shake128_absorb::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void shake128_absorb::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void shake128_absorb::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void shake128_absorb::thread_i_1_fu_263_p2() {
    i_1_fu_263_p2 = (!i_5_i_reg_203.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_5_i_reg_203.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void shake128_absorb::thread_i_fu_241_p2() {
    i_fu_241_p2 = (!i_4_i_reg_192.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_4_i_reg_192.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void shake128_absorb::thread_icmp_ln387_fu_229_p2() {
    icmp_ln387_fu_229_p2 = (!phi_ln387_reg_181.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln387_reg_181.read() == ap_const_lv3_7);
}

void shake128_absorb::thread_icmp_ln423_fu_235_p2() {
    icmp_ln423_fu_235_p2 = (!i_4_i_reg_192.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_4_i_reg_192.read() == ap_const_lv4_8);
}

void shake128_absorb::thread_icmp_ln425_fu_257_p2() {
    icmp_ln425_fu_257_p2 = (!i_5_i_reg_203.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i_5_i_reg_203.read() == ap_const_lv2_2);
}

void shake128_absorb::thread_in_1_read_cast_fu_214_p1() {
    in_1_read_cast_fu_214_p1 = esl_zext<8,2>(in_1_read.read());
}

void shake128_absorb::thread_r_7_i1_fu_280_p9() {
    r_7_i1_fu_280_p9 = esl_concat<56,8>(esl_concat<48,8>(esl_concat<40,8>(esl_concat<32,8>(esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(t_q0.read(), t_q1.read()), t_load_5_reg_390.read()), t_load_4_reg_385.read()), t_load_3_reg_370.read()), t_load_2_reg_365.read()), t_load_1_reg_350.read()), t_load_reg_345.read());
}

void shake128_absorb::thread_select_ln426_fu_273_p3() {
    select_ln426_fu_273_p3 = (!trunc_ln426_fu_269_p1.read()[0].is_01())? sc_lv<8>(): ((trunc_ln426_fu_269_p1.read()[0].to_bool())? in_1_read_cast_reg_306.read(): in_0_read.read());
}

void shake128_absorb::thread_state_s_addr_reg_405() {
    state_s_addr_reg_405 =  (sc_lv<5>) (ap_const_lv64_4);
}

void shake128_absorb::thread_state_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_s_address0 = state_s_addr_reg_405.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_s_address0 =  (sc_lv<5>) (ap_const_lv64_4);
    } else {
        state_s_address0 = "XXXXX";
    }
}

void shake128_absorb::thread_state_s_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        state_s_ce0 = ap_const_logic_1;
    } else {
        state_s_ce0 = ap_const_logic_0;
    }
}

void shake128_absorb::thread_state_s_d0() {
    state_s_d0 = (state_s_q0.read() ^ r_7_i1_fu_280_p9.read());
}

void shake128_absorb::thread_state_s_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_s_we0 = ap_const_logic_1;
    } else {
        state_s_we0 = ap_const_logic_0;
    }
}

void shake128_absorb::thread_t_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        t_address0 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        t_address0 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        t_address0 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln425_fu_257_p2.read(), ap_const_lv1_1))) {
        t_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln425_fu_257_p2.read(), ap_const_lv1_0))) {
        t_address0 =  (sc_lv<3>) (zext_ln425_fu_252_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        t_address0 =  (sc_lv<3>) (zext_ln424_fu_247_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        t_address0 =  (sc_lv<3>) (zext_ln387_fu_224_p1.read());
    } else {
        t_address0 =  (sc_lv<3>) ("XXX");
    }
}

void shake128_absorb::thread_t_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        t_address1 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        t_address1 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        t_address1 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        t_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        t_address1 =  (sc_lv<3>) ("XXX");
    }
}

void shake128_absorb::thread_t_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(icmp_ln425_fu_257_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(icmp_ln425_fu_257_p2.read(), ap_const_lv1_0)))) {
        t_ce0 = ap_const_logic_1;
    } else {
        t_ce0 = ap_const_logic_0;
    }
}

void shake128_absorb::thread_t_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        t_ce1 = ap_const_logic_1;
    } else {
        t_ce1 = ap_const_logic_0;
    }
}

void shake128_absorb::thread_t_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln425_fu_257_p2.read(), ap_const_lv1_0))) {
        t_d0 = select_ln426_fu_273_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        t_d0 = ap_const_lv8_0;
    } else {
        t_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void shake128_absorb::thread_t_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln423_fu_235_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(icmp_ln425_fu_257_p2.read(), ap_const_lv1_0)))) {
        t_we0 = ap_const_logic_1;
    } else {
        t_we0 = ap_const_logic_0;
    }
}

void shake128_absorb::thread_trunc_ln426_fu_269_p1() {
    trunc_ln426_fu_269_p1 = i_5_i_reg_203.read().range(1-1, 0);
}

void shake128_absorb::thread_zext_ln387_fu_224_p1() {
    zext_ln387_fu_224_p1 = esl_zext<64,3>(phi_ln387_reg_181.read());
}

void shake128_absorb::thread_zext_ln424_fu_247_p1() {
    zext_ln424_fu_247_p1 = esl_zext<64,4>(i_4_i_reg_192.read());
}

void shake128_absorb::thread_zext_ln425_fu_252_p1() {
    zext_ln425_fu_252_p1 = esl_zext<64,2>(i_5_i_reg_203.read());
}

void shake128_absorb::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln387_fu_229_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln423_fu_235_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln425_fu_257_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

}

