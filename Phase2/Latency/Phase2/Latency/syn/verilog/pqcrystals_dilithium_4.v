// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pqcrystals_dilithium_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_vec_coeffs_address0,
        r_vec_coeffs_ce0,
        r_vec_coeffs_we0,
        r_vec_coeffs_d0,
        a_coeffs_address0,
        a_coeffs_ce0,
        a_coeffs_q0,
        v_vec_coeffs_address0,
        v_vec_coeffs_ce0,
        v_vec_coeffs_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state8 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] r_vec_coeffs_address0;
output   r_vec_coeffs_ce0;
output   r_vec_coeffs_we0;
output  [31:0] r_vec_coeffs_d0;
output  [7:0] a_coeffs_address0;
output   a_coeffs_ce0;
input  [31:0] a_coeffs_q0;
output  [9:0] v_vec_coeffs_address0;
output   v_vec_coeffs_ce0;
input  [31:0] v_vec_coeffs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_vec_coeffs_ce0;
reg r_vec_coeffs_we0;
reg a_coeffs_ce0;
reg v_vec_coeffs_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten_reg_101;
reg   [2:0] i_0_reg_112;
reg   [8:0] i_0_i_reg_123;
wire   [0:0] icmp_ln305_fu_134_p2;
reg   [0:0] icmp_ln305_reg_261;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln305_reg_261_pp0_iter1_reg;
reg   [0:0] icmp_ln305_reg_261_pp0_iter2_reg;
reg   [0:0] icmp_ln305_reg_261_pp0_iter3_reg;
reg   [0:0] icmp_ln305_reg_261_pp0_iter4_reg;
wire   [10:0] add_ln305_fu_140_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] select_ln306_1_fu_166_p3;
reg   [2:0] select_ln306_1_reg_270;
wire   [63:0] zext_ln181_7_fu_201_p1;
reg   [63:0] zext_ln181_7_reg_275;
reg   [63:0] zext_ln181_7_reg_275_pp0_iter1_reg;
reg   [63:0] zext_ln181_7_reg_275_pp0_iter2_reg;
reg   [63:0] zext_ln181_7_reg_275_pp0_iter3_reg;
reg   [63:0] zext_ln181_7_reg_275_pp0_iter4_reg;
wire   [8:0] i_7_fu_206_p2;
reg   [31:0] a_coeffs_load_reg_295;
reg   [31:0] v_vec_coeffs_load_reg_300;
wire   [63:0] mul_ln181_fu_218_p2;
reg   [63:0] mul_ln181_reg_305;
reg   [63:0] mul_ln181_reg_305_pp0_iter3_reg;
reg   [63:0] mul_ln181_reg_305_pp0_iter4_reg;
wire  signed [31:0] trunc_ln18_fu_224_p1;
reg  signed [31:0] trunc_ln18_reg_310;
wire   [31:0] t_fu_228_p2;
reg   [31:0] t_reg_315;
wire   [54:0] mul_ln19_fu_236_p2;
reg   [54:0] mul_ln19_reg_320;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [2:0] ap_phi_mux_i_0_phi_fu_116_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln181_fu_186_p1;
wire   [0:0] icmp_ln180_fu_152_p2;
wire   [2:0] i_fu_146_p2;
wire   [10:0] tmp_fu_174_p3;
wire   [8:0] select_ln306_fu_158_p3;
wire   [11:0] zext_ln181_5_fu_182_p1;
wire   [11:0] zext_ln181_6_fu_191_p1;
wire   [11:0] add_ln181_fu_195_p2;
wire  signed [31:0] mul_ln181_fu_218_p0;
wire  signed [31:0] mul_ln181_fu_218_p1;
wire  signed [31:0] mul_ln19_fu_236_p1;
wire  signed [63:0] sext_ln19_2_fu_242_p1;
wire   [63:0] add_ln19_fu_245_p2;
wire    ap_CS_fsm_state8;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln305_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_i_reg_123 <= i_7_fu_206_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_123 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln305_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_112 <= select_ln306_1_reg_270;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_112 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln305_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_101 <= add_ln305_fu_140_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_101 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln305_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_coeffs_load_reg_295 <= a_coeffs_q0;
        v_vec_coeffs_load_reg_300 <= v_vec_coeffs_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln305_reg_261 <= icmp_ln305_fu_134_p2;
        icmp_ln305_reg_261_pp0_iter1_reg <= icmp_ln305_reg_261;
        zext_ln181_7_reg_275_pp0_iter1_reg[11 : 0] <= zext_ln181_7_reg_275[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln305_reg_261_pp0_iter2_reg <= icmp_ln305_reg_261_pp0_iter1_reg;
        icmp_ln305_reg_261_pp0_iter3_reg <= icmp_ln305_reg_261_pp0_iter2_reg;
        icmp_ln305_reg_261_pp0_iter4_reg <= icmp_ln305_reg_261_pp0_iter3_reg;
        mul_ln181_reg_305_pp0_iter3_reg <= mul_ln181_reg_305;
        mul_ln181_reg_305_pp0_iter4_reg <= mul_ln181_reg_305_pp0_iter3_reg;
        zext_ln181_7_reg_275_pp0_iter2_reg[11 : 0] <= zext_ln181_7_reg_275_pp0_iter1_reg[11 : 0];
        zext_ln181_7_reg_275_pp0_iter3_reg[11 : 0] <= zext_ln181_7_reg_275_pp0_iter2_reg[11 : 0];
        zext_ln181_7_reg_275_pp0_iter4_reg[11 : 0] <= zext_ln181_7_reg_275_pp0_iter3_reg[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln305_reg_261_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln181_reg_305 <= mul_ln181_fu_218_p2;
        trunc_ln18_reg_310 <= trunc_ln18_fu_224_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln305_reg_261_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln19_reg_320 <= mul_ln19_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln305_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln306_1_reg_270 <= select_ln306_1_fu_166_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln305_reg_261_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_reg_315 <= t_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln305_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln181_7_reg_275[11 : 0] <= zext_ln181_7_fu_201_p1[11 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_coeffs_ce0 = 1'b1;
    end else begin
        a_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln305_fu_134_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln305_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_116_p4 = select_ln306_1_reg_270;
    end else begin
        ap_phi_mux_i_0_phi_fu_116_p4 = i_0_reg_112;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        r_vec_coeffs_ce0 = 1'b1;
    end else begin
        r_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln305_reg_261_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        r_vec_coeffs_we0 = 1'b1;
    end else begin
        r_vec_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_vec_coeffs_ce0 = 1'b1;
    end else begin
        v_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln305_fu_134_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln305_fu_134_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_coeffs_address0 = zext_ln181_fu_186_p1;

assign add_ln181_fu_195_p2 = (zext_ln181_5_fu_182_p1 + zext_ln181_6_fu_191_p1);

assign add_ln19_fu_245_p2 = ($signed(mul_ln181_reg_305_pp0_iter4_reg) + $signed(sext_ln19_2_fu_242_p1));

assign add_ln305_fu_140_p2 = (indvar_flatten_reg_101 + 11'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_7_fu_206_p2 = (9'd1 + select_ln306_fu_158_p3);

assign i_fu_146_p2 = (3'd1 + ap_phi_mux_i_0_phi_fu_116_p4);

assign icmp_ln180_fu_152_p2 = ((i_0_i_reg_123 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_134_p2 = ((indvar_flatten_reg_101 == 11'd1024) ? 1'b1 : 1'b0);

assign mul_ln181_fu_218_p0 = a_coeffs_load_reg_295;

assign mul_ln181_fu_218_p1 = v_vec_coeffs_load_reg_300;

assign mul_ln181_fu_218_p2 = ($signed(mul_ln181_fu_218_p0) * $signed(mul_ln181_fu_218_p1));

assign mul_ln19_fu_236_p1 = t_reg_315;

assign mul_ln19_fu_236_p2 = ($signed(55'd36028797010583551) * $signed(mul_ln19_fu_236_p1));

assign r_vec_coeffs_address0 = zext_ln181_7_reg_275_pp0_iter4_reg;

assign r_vec_coeffs_d0 = {{add_ln19_fu_245_p2[63:32]}};

assign select_ln306_1_fu_166_p3 = ((icmp_ln180_fu_152_p2[0:0] === 1'b1) ? i_fu_146_p2 : ap_phi_mux_i_0_phi_fu_116_p4);

assign select_ln306_fu_158_p3 = ((icmp_ln180_fu_152_p2[0:0] === 1'b1) ? 9'd0 : i_0_i_reg_123);

assign sext_ln19_2_fu_242_p1 = $signed(mul_ln19_reg_320);

assign t_fu_228_p2 = ($signed({{1'b0}, {32'd58728449}}) * $signed(trunc_ln18_reg_310));

assign tmp_fu_174_p3 = {{select_ln306_1_fu_166_p3}, {8'd0}};

assign trunc_ln18_fu_224_p1 = mul_ln181_fu_218_p2[31:0];

assign v_vec_coeffs_address0 = zext_ln181_7_fu_201_p1;

assign zext_ln181_5_fu_182_p1 = tmp_fu_174_p3;

assign zext_ln181_6_fu_191_p1 = select_ln306_fu_158_p3;

assign zext_ln181_7_fu_201_p1 = add_ln181_fu_195_p2;

assign zext_ln181_fu_186_p1 = select_ln306_fu_158_p3;

always @ (posedge ap_clk) begin
    zext_ln181_7_reg_275[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln181_7_reg_275_pp0_iter1_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln181_7_reg_275_pp0_iter2_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln181_7_reg_275_pp0_iter3_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln181_7_reg_275_pp0_iter4_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //pqcrystals_dilithium_4
