-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium_21 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of pqcrystals_dilithium_21 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3802001 : STD_LOGIC_VECTOR (31 downto 0) := "00000011100000000010000000000001";
    constant ap_const_lv55_7FFFFFFF801FFF : STD_LOGIC_VECTOR (54 downto 0) := "1111111111111111111111111111111100000000001111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv49_A3FA : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000001010001111111010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zetas_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zetas_ce0 : STD_LOGIC;
    signal zetas_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal j_1_reg_169 : STD_LOGIC_VECTOR (8 downto 0);
    signal reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state13_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln95_reg_616 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln77_fu_193_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln77_reg_512 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_202_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln83_fu_210_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln83_reg_523 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln84_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal len_fu_244_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln84_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln86_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln86_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln84_1_fu_293_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln84_1_reg_557 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln86_fu_297_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln86_reg_562 : STD_LOGIC_VECTOR (53 downto 0);
    signal a_addr_reg_570 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln86_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_2_reg_575 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_3_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln84_fu_350_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln89_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln89_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal mul_ln90_fu_374_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal mul_ln90_reg_596 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln18_1_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_1_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_7_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_7_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal mul_ln19_1_fu_391_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal mul_ln19_1_reg_611 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln95_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_616_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_616_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_616_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_616_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_430_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal a_addr_1_reg_625 : STD_LOGIC_VECTOR (9 downto 0);
    signal a_addr_1_reg_625_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal a_addr_1_reg_625_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal a_addr_1_reg_625_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal a_addr_1_reg_625_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln96_fu_454_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal mul_ln96_reg_631 : STD_LOGIC_VECTOR (48 downto 0);
    signal mul_ln96_reg_631_pp0_iter3_reg : STD_LOGIC_VECTOR (48 downto 0);
    signal mul_ln96_reg_631_pp0_iter4_reg : STD_LOGIC_VECTOR (48 downto 0);
    signal trunc_ln18_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_5_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_5_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_fu_472_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal mul_ln19_reg_646 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal len_0_reg_136 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_148 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_0_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln85_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_1_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_1_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_1_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln88_1_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal t_8_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_6_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_185_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_214_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln86_fu_260_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln84_fu_275_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln84_1_fu_279_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal start_fu_285_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zeta_fu_254_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln87_fu_306_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln87_fu_310_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln88_fu_324_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln88_fu_320_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln88_fu_328_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln88_2_fu_334_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln90_fu_374_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln90_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_1_fu_391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln90_1_fu_397_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal sext_ln19_6_fu_400_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln19_1_fu_403_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln19_1_fu_409_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln96_fu_436_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln96_fu_440_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln96_fu_450_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln96_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln19_3_fu_481_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal sext_ln96_1_fu_478_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln19_fu_484_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln_fu_490_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component pqcrystals_dilithg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;



begin
    zetas_U : component pqcrystals_dilithg8j
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => zetas_address0,
        ce0 => zetas_ce0,
        q0 => zetas_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_4_fu_202_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((tmp_4_fu_202_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_0_reg_160 <= j_3_reg_581;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_160 <= zext_ln84_fu_250_p1;
            end if; 
        end if;
    end process;

    j_1_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_202_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_1_reg_169 <= ap_const_lv9_0;
            elsif (((icmp_ln95_fu_424_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                j_1_reg_169 <= j_2_fu_430_p2;
            end if; 
        end if;
    end process;

    j_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_148 <= add_ln84_fu_350_p2;
            elsif (((tmp_4_fu_202_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_148 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    k_1_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_1_fu_80 <= k_reg_532;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_1_fu_80 <= ap_const_lv32_100;
            end if; 
        end if;
    end process;

    len_0_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln84_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                len_0_reg_136 <= len_fu_244_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                len_0_reg_136 <= ap_const_lv9_1;
            end if; 
        end if;
    end process;

    reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_reg_616 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_180 <= a_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_180 <= a_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_424_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_addr_1_reg_625 <= zext_ln96_1_fu_445_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_addr_1_reg_625_pp0_iter1_reg <= a_addr_1_reg_625;
                icmp_ln95_reg_616 <= icmp_ln95_fu_424_p2;
                icmp_ln95_reg_616_pp0_iter1_reg <= icmp_ln95_reg_616;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                a_addr_1_reg_625_pp0_iter2_reg <= a_addr_1_reg_625_pp0_iter1_reg;
                a_addr_1_reg_625_pp0_iter3_reg <= a_addr_1_reg_625_pp0_iter2_reg;
                a_addr_1_reg_625_pp0_iter4_reg <= a_addr_1_reg_625_pp0_iter3_reg;
                icmp_ln95_reg_616_pp0_iter2_reg <= icmp_ln95_reg_616_pp0_iter1_reg;
                icmp_ln95_reg_616_pp0_iter3_reg <= icmp_ln95_reg_616_pp0_iter2_reg;
                icmp_ln95_reg_616_pp0_iter4_reg <= icmp_ln95_reg_616_pp0_iter3_reg;
                mul_ln96_reg_631_pp0_iter3_reg <= mul_ln96_reg_631;
                mul_ln96_reg_631_pp0_iter4_reg <= mul_ln96_reg_631_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln86_fu_301_p2 = ap_const_lv1_1))) then
                a_addr_2_reg_575 <= zext_ln88_1_fu_339_p1(10 - 1 downto 0);
                a_addr_reg_570 <= zext_ln87_fu_315_p1(10 - 1 downto 0);
                j_3_reg_581 <= j_3_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln84_fu_224_p2 = ap_const_lv1_1))) then
                k_reg_532 <= k_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                mul_ln19_1_reg_611 <= mul_ln19_1_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_reg_616_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln19_reg_646 <= mul_ln19_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                mul_ln90_reg_596 <= mul_ln90_fu_374_p2;
                trunc_ln18_1_reg_601 <= trunc_ln18_1_fu_379_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_reg_616_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln96_reg_631 <= mul_ln96_fu_454_p2;
                trunc_ln18_reg_636 <= trunc_ln18_fu_460_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                sext_ln86_reg_562 <= sext_ln86_fu_297_p1;
                    zext_ln84_1_reg_557(8 downto 0) <= zext_ln84_1_fu_293_p1(8 downto 0);
                    zext_ln86_reg_552(9 downto 0) <= zext_ln86_fu_265_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                sub_ln89_reg_591 <= sub_ln89_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_reg_616_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                t_5_reg_641 <= t_5_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                t_7_reg_606 <= t_7_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    zext_ln77_reg_512(10 downto 8) <= zext_ln77_fu_193_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_202_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln83_reg_523(8 downto 0) <= zext_ln83_fu_210_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln77_reg_512(7 downto 0) <= "00000000";
    zext_ln77_reg_512(11) <= '0';
    zext_ln83_reg_523(9) <= '0';
    zext_ln86_reg_552(31 downto 10) <= "0000000000000000000000";
    zext_ln84_1_reg_557(9) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, tmp_4_fu_202_p3, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln84_fu_224_p2, ap_CS_fsm_state5, icmp_ln86_fu_301_p2, icmp_ln95_fu_424_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_4_fu_202_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln84_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln86_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln95_fu_424_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln95_fu_424_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state6, a_addr_reg_570, ap_CS_fsm_state5, a_addr_2_reg_575, a_addr_1_reg_625_pp0_iter4_reg, ap_enable_reg_pp0_iter5, ap_CS_fsm_state12, zext_ln87_fu_315_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            a_address0 <= a_addr_1_reg_625_pp0_iter4_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            a_address0 <= a_addr_2_reg_575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address0 <= a_addr_reg_570;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= zext_ln87_fu_315_p1(10 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, a_addr_2_reg_575, ap_enable_reg_pp0_iter0, zext_ln88_1_fu_339_p1, zext_ln96_1_fu_445_p1, ap_block_pp0_stage0, ap_CS_fsm_state7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            a_address1 <= zext_ln96_1_fu_445_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_address1 <= a_addr_2_reg_575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address1 <= zext_ln88_1_fu_339_p1(10 - 1 downto 0);
        else 
            a_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state6, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter5, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    a_d0_assign_proc : process(ap_CS_fsm_state6, ap_enable_reg_pp0_iter5, ap_CS_fsm_state12, ap_block_pp0_stage0, add_ln88_1_fu_358_p2, t_8_fu_419_p1, t_6_fu_500_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            a_d0 <= t_6_fu_500_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            a_d0 <= t_8_fu_419_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_d0 <= add_ln88_1_fu_358_p2;
        else 
            a_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_state6, ap_block_pp0_stage0_11001, icmp_ln95_reg_616_pp0_iter4_reg, ap_enable_reg_pp0_iter5, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln95_reg_616_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln19_1_fu_403_p2 <= std_logic_vector(signed(sext_ln90_1_fu_397_p1) + signed(sext_ln19_6_fu_400_p1));
    add_ln19_fu_484_p2 <= std_logic_vector(signed(sext_ln19_3_fu_481_p1) + signed(sext_ln96_1_fu_478_p1));
    add_ln84_1_fu_279_p2 <= std_logic_vector(unsigned(trunc_ln84_fu_275_p1) + unsigned(len_0_reg_136));
    add_ln84_fu_350_p2 <= std_logic_vector(unsigned(zext_ln84_1_reg_557) + unsigned(zext_ln83_reg_523));
    add_ln86_fu_260_p2 <= std_logic_vector(unsigned(zext_ln83_reg_523) + unsigned(j_reg_148));
    add_ln87_fu_310_p2 <= std_logic_vector(unsigned(zext_ln77_reg_512) + unsigned(trunc_ln87_fu_306_p1));
    add_ln88_1_fu_358_p2 <= std_logic_vector(unsigned(a_q0) + unsigned(a_q1));
    add_ln88_2_fu_334_p2 <= std_logic_vector(unsigned(zext_ln77_reg_512) + unsigned(add_ln88_fu_328_p2));
    add_ln88_fu_328_p2 <= std_logic_vector(unsigned(zext_ln88_fu_324_p1) + unsigned(trunc_ln88_fu_320_p1));
    add_ln96_fu_440_p2 <= std_logic_vector(unsigned(zext_ln96_fu_436_p1) + unsigned(zext_ln77_reg_512));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state19 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state13_assign_proc : process(icmp_ln95_fu_424_p2)
    begin
        if ((icmp_ln95_fu_424_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_269_p2 <= "1" when (unsigned(j_reg_148) > unsigned(add_ln86_fu_260_p2)) else "0";
    icmp_ln84_fu_224_p2 <= "1" when (tmp_5_fu_214_p4 = ap_const_lv2_0) else "0";
    icmp_ln86_fu_301_p2 <= "1" when (unsigned(j_0_reg_160) < unsigned(zext_ln86_reg_552)) else "0";
    icmp_ln95_fu_424_p2 <= "1" when (j_1_reg_169 = ap_const_lv9_100) else "0";
    j_2_fu_430_p2 <= std_logic_vector(unsigned(j_1_reg_169) + unsigned(ap_const_lv9_1));
    j_3_fu_344_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j_0_reg_160));
    k_fu_233_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(k_1_fu_80));
    len_fu_244_p2 <= std_logic_vector(shift_left(unsigned(len_0_reg_136),to_integer(unsigned('0' & ap_const_lv9_1(9-1 downto 0)))));
    mul_ln19_1_fu_391_p1 <= t_7_reg_606;
    mul_ln19_1_fu_391_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv55_7FFFFFFF801FFF) * signed(mul_ln19_1_fu_391_p1))), 55));
    mul_ln19_fu_472_p1 <= t_5_reg_641;
    mul_ln19_fu_472_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv55_7FFFFFFF801FFF) * signed(mul_ln19_fu_472_p1))), 55));
    mul_ln90_fu_374_p0 <= sext_ln86_reg_562(23 - 1 downto 0);
    mul_ln90_fu_374_p1 <= sub_ln89_reg_591;
    mul_ln90_fu_374_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln90_fu_374_p0) * signed(mul_ln90_fu_374_p1))), 54));
    mul_ln96_fu_454_p1 <= sext_ln96_fu_450_p0;
    mul_ln96_fu_454_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv49_A3FA) * signed(mul_ln96_fu_454_p1))), 49));
        sext_ln19_3_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln19_reg_646),56));

        sext_ln19_6_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln19_1_reg_611),56));

        sext_ln86_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zeta_fu_254_p2),54));

        sext_ln90_1_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln90_reg_596),56));

        sext_ln96_1_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln96_reg_631_pp0_iter4_reg),56));

    sext_ln96_fu_450_p0 <= reg_180;
    start_fu_285_p3 <= 
        trunc_ln84_fu_275_p1 when (empty_fu_269_p2(0) = '1') else 
        add_ln84_1_fu_279_p2;
    sub_ln89_fu_365_p2 <= std_logic_vector(unsigned(reg_180) - unsigned(a_q1));
    t_5_fu_464_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_3802001) * signed(trunc_ln18_reg_636))), 32));
        t_6_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_490_p4),32));

    t_7_fu_383_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_3802001) * signed(trunc_ln18_1_reg_601))), 32));
        t_8_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_1_fu_409_p4),32));

    tmp_4_fu_202_p3 <= len_0_reg_136(8 downto 8);
    tmp_5_fu_214_p4 <= j_reg_148(9 downto 8);
    tmp_fu_185_p3 <= (a_offset & ap_const_lv8_0);
    trunc_ln18_1_fu_379_p1 <= mul_ln90_fu_374_p2(32 - 1 downto 0);
    trunc_ln18_fu_460_p1 <= mul_ln96_fu_454_p2(32 - 1 downto 0);
    trunc_ln19_1_fu_409_p4 <= add_ln19_1_fu_403_p2(55 downto 32);
    trunc_ln84_fu_275_p1 <= j_reg_148(9 - 1 downto 0);
    trunc_ln87_fu_306_p1 <= j_0_reg_160(12 - 1 downto 0);
    trunc_ln88_fu_320_p1 <= j_0_reg_160(12 - 1 downto 0);
    trunc_ln_fu_490_p4 <= add_ln19_fu_484_p2(55 downto 32);
    zeta_fu_254_p2 <= std_logic_vector(unsigned(ap_const_lv23_0) - unsigned(zetas_q0));
    zetas_address0 <= zext_ln85_fu_239_p1(8 - 1 downto 0);

    zetas_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            zetas_ce0 <= ap_const_logic_1;
        else 
            zetas_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln77_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_185_p3),12));
    zext_ln83_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(len_0_reg_136),10));
    zext_ln84_1_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_fu_285_p3),10));
    zext_ln84_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_148),32));
    zext_ln85_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_233_p2),64));
    zext_ln86_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln86_fu_260_p2),32));
    zext_ln87_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln87_fu_310_p2),64));
    zext_ln88_1_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln88_2_fu_334_p2),64));
    zext_ln88_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(len_0_reg_136),12));
    zext_ln96_1_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln96_fu_440_p2),64));
    zext_ln96_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_169),12));
end behav;
