-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC;
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce1 : OUT STD_LOGIC;
    r_coeffs_we1 : OUT STD_LOGIC;
    r_coeffs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_coeffs_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_offset : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of pqcrystals_dilithium_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv14_1000 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv9_9 : STD_LOGIC_VECTOR (8 downto 0) := "000001001";
    constant ap_const_lv9_D : STD_LOGIC_VECTOR (8 downto 0) := "000001101";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv9_A : STD_LOGIC_VECTOR (8 downto 0) := "000001010";
    constant ap_const_lv9_B : STD_LOGIC_VECTOR (8 downto 0) := "000001011";
    constant ap_const_lv9_C : STD_LOGIC_VECTOR (8 downto 0) := "000001100";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_361 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_376_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_1199 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln738_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln739_fu_396_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln739_reg_1209 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_500_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_1230 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal lshr_ln3_reg_1240 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln739_1_fu_839_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln739_1_reg_1275 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln772_1_fu_1007_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln772_1_reg_1290 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln8_reg_1295 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_0_reg_338 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal phi_mul_reg_349 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln739_1_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln740_1_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln739_2_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln744_1_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln745_1_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln743_2_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln749_1_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln753_1_fu_622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln748_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln754_1_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln758_1_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln752_1_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln759_1_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln763_1_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln757_1_fu_871_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln762_fu_936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln767_1_fu_972_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln768_1_fu_992_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln766_1_fu_1060_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln772_1_fu_1113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln771_fu_1140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln775_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln776_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln777_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln778_fu_834_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln779_fu_1018_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln780_fu_1029_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln781_fu_1123_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln782_fu_1162_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln739_fu_382_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln739_fu_386_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_fu_400_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln740_fu_406_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_1_fu_410_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_529_fu_420_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln741_fu_433_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_437_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln744_fu_449_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln744_fu_455_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln744_1_fu_459_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln745_fu_469_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln745_fu_475_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln745_1_fu_479_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln743_fu_445_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln775_fu_489_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln_fu_507_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln743_fu_521_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_530_fu_527_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln743_1_fu_517_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_551_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln10_fu_539_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln746_fu_547_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln746_fu_559_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln_fu_565_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln749_fu_587_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln749_fu_593_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln749_1_fu_597_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln753_fu_607_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln753_fu_613_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln753_1_fu_617_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln746_fu_573_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln776_fu_627_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln748_fu_638_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_531_fu_643_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln750_fu_655_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln1_fu_659_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln754_fu_670_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln754_fu_676_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln754_1_fu_680_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln758_fu_690_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln758_fu_696_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln758_1_fu_700_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln750_fu_666_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln777_fu_710_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_721_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln752_fu_733_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_532_fu_738_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln752_fu_729_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_762_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln11_fu_750_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln755_fu_758_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln755_fu_770_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln2_fu_776_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln759_fu_788_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln759_fu_794_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln759_1_fu_798_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln763_fu_808_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln763_fu_814_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln763_1_fu_818_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln755_fu_784_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln778_fu_828_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln5_fu_845_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln757_fu_859_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_533_fu_864_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln757_fu_855_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_888_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln12_fu_876_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln760_fu_884_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln760_fu_896_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln3_fu_902_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln762_fu_924_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_534_fu_929_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln764_fu_941_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln6_fu_914_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln4_fu_945_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln767_fu_957_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln767_fu_963_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln767_1_fu_967_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln768_fu_977_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln768_fu_983_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln768_1_fu_987_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln772_fu_997_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln772_fu_1003_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln760_fu_910_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln779_fu_1012_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln764_fu_953_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln780_fu_1023_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln7_fu_1034_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln766_fu_1048_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_535_fu_1053_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln766_fu_1044_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_1077_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln13_fu_1065_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln769_fu_1073_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln769_fu_1085_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln5_fu_1091_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln769_fu_1099_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln781_fu_1117_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln771_fu_1128_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_536_fu_1133_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln6_fu_1145_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln772_2_fu_1152_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln782_fu_1156_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_338 <= i_reg_1199;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_338 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                phi_mul_reg_349 <= add_ln739_1_reg_1275;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_349 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                reg_361 <= a_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reg_361 <= a_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln739_1_reg_1275 <= add_ln739_1_fu_839_p2;
                add_ln772_1_reg_1290 <= add_ln772_1_fu_1007_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1199 <= i_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                lshr_ln3_reg_1240 <= a_q1(7 downto 2);
                    shl_ln_reg_1230(7 downto 3) <= shl_ln_fu_500_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                lshr_ln8_reg_1295 <= a_q1(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_366 <= a_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln738_fu_370_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln739_reg_1209 <= trunc_ln739_fu_396_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_1230(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln738_fu_370_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln738_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8, zext_ln739_1_fu_391_p1, zext_ln744_1_fu_464_p1, zext_ln749_1_fu_602_p1, zext_ln754_1_fu_685_p1, zext_ln759_1_fu_803_p1, zext_ln767_1_fu_972_p1, zext_ln772_1_fu_1113_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            a_address0 <= zext_ln772_1_fu_1113_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_address0 <= zext_ln767_1_fu_972_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address0 <= zext_ln759_1_fu_803_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= zext_ln754_1_fu_685_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_address0 <= zext_ln749_1_fu_602_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address0 <= zext_ln744_1_fu_464_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_address0 <= zext_ln739_1_fu_391_p1(12 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln740_1_fu_415_p1, zext_ln745_1_fu_484_p1, zext_ln753_1_fu_622_p1, zext_ln758_1_fu_705_p1, zext_ln763_1_fu_823_p1, zext_ln768_1_fu_992_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_address1 <= zext_ln768_1_fu_992_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address1 <= zext_ln763_1_fu_823_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address1 <= zext_ln758_1_fu_705_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_address1 <= zext_ln753_1_fu_622_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address1 <= zext_ln745_1_fu_484_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_address1 <= zext_ln740_1_fu_415_p1(12 - 1 downto 0);
        else 
            a_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln739_1_fu_839_p2 <= std_logic_vector(unsigned(ap_const_lv9_D) + unsigned(phi_mul_reg_349));
    add_ln739_fu_386_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(zext_ln739_fu_382_p1));
    add_ln740_1_fu_410_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(zext_ln740_fu_406_p1));
    add_ln740_fu_400_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(phi_mul_reg_349));
    add_ln744_1_fu_459_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(zext_ln744_fu_455_p1));
    add_ln744_fu_449_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(phi_mul_reg_349));
    add_ln745_1_fu_479_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(zext_ln745_fu_475_p1));
    add_ln745_fu_469_p2 <= std_logic_vector(unsigned(ap_const_lv9_3) + unsigned(phi_mul_reg_349));
    add_ln749_1_fu_597_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(zext_ln749_fu_593_p1));
    add_ln749_fu_587_p2 <= std_logic_vector(unsigned(ap_const_lv9_4) + unsigned(phi_mul_reg_349));
    add_ln753_1_fu_617_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(zext_ln753_fu_613_p1));
    add_ln753_fu_607_p2 <= std_logic_vector(unsigned(ap_const_lv9_5) + unsigned(phi_mul_reg_349));
    add_ln754_1_fu_680_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(zext_ln754_fu_676_p1));
    add_ln754_fu_670_p2 <= std_logic_vector(unsigned(ap_const_lv9_6) + unsigned(phi_mul_reg_349));
    add_ln758_1_fu_700_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(zext_ln758_fu_696_p1));
    add_ln758_fu_690_p2 <= std_logic_vector(unsigned(ap_const_lv9_7) + unsigned(phi_mul_reg_349));
    add_ln759_1_fu_798_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(zext_ln759_fu_794_p1));
    add_ln759_fu_788_p2 <= std_logic_vector(unsigned(ap_const_lv9_8) + unsigned(phi_mul_reg_349));
    add_ln763_1_fu_818_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(zext_ln763_fu_814_p1));
    add_ln763_fu_808_p2 <= std_logic_vector(unsigned(ap_const_lv9_9) + unsigned(phi_mul_reg_349));
    add_ln767_1_fu_967_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(zext_ln767_fu_963_p1));
    add_ln767_fu_957_p2 <= std_logic_vector(unsigned(ap_const_lv9_A) + unsigned(phi_mul_reg_349));
    add_ln768_1_fu_987_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(zext_ln768_fu_983_p1));
    add_ln768_fu_977_p2 <= std_logic_vector(unsigned(ap_const_lv9_B) + unsigned(phi_mul_reg_349));
    add_ln772_1_fu_1007_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(zext_ln772_fu_1003_p1));
    add_ln772_fu_997_p2 <= std_logic_vector(unsigned(ap_const_lv9_C) + unsigned(phi_mul_reg_349));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln738_fu_370_p2)
    begin
        if ((((icmp_ln738_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln738_fu_370_p2)
    begin
        if (((icmp_ln738_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_376_p2 <= std_logic_vector(unsigned(i_0_reg_338) + unsigned(ap_const_lv6_1));
    icmp_ln738_fu_370_p2 <= "1" when (i_0_reg_338 = ap_const_lv6_20) else "0";
    lshr_ln5_fu_845_p4 <= reg_361(7 downto 4);
    lshr_ln6_fu_914_p4 <= a_q0(7 downto 1);
    lshr_ln7_fu_1034_p4 <= reg_361(7 downto 6);
    lshr_ln_fu_507_p4 <= reg_361(7 downto 5);
    or_ln1_fu_659_p3 <= (trunc_ln750_fu_655_p1 & lshr_ln3_reg_1240);
    or_ln2_fu_776_p3 <= (trunc_ln755_fu_758_p1 & or_ln755_fu_770_p2);
    or_ln3_fu_902_p3 <= (trunc_ln760_fu_884_p1 & or_ln760_fu_896_p2);
    or_ln4_fu_945_p3 <= (trunc_ln764_fu_941_p1 & lshr_ln6_fu_914_p4);
    or_ln5_fu_1091_p3 <= (trunc_ln769_fu_1073_p1 & or_ln769_fu_1085_p2);
    or_ln6_fu_1145_p3 <= (a_q0 & lshr_ln8_reg_1295);
    or_ln743_fu_521_p2 <= (shl_ln_fu_500_p3 or ap_const_lv8_1);
    or_ln746_fu_559_p2 <= (tmp_2_fu_551_p3 or shl_ln10_fu_539_p3);
    or_ln748_fu_638_p2 <= (shl_ln_reg_1230 or ap_const_lv8_2);
    or_ln752_fu_733_p2 <= (shl_ln_reg_1230 or ap_const_lv8_3);
    or_ln755_fu_770_p2 <= (tmp_5_fu_762_p3 or shl_ln11_fu_750_p3);
    or_ln757_fu_859_p2 <= (shl_ln_reg_1230 or ap_const_lv8_4);
    or_ln760_fu_896_p2 <= (tmp_7_fu_888_p3 or shl_ln12_fu_876_p3);
    or_ln762_fu_924_p2 <= (shl_ln_reg_1230 or ap_const_lv8_5);
    or_ln766_fu_1048_p2 <= (shl_ln_reg_1230 or ap_const_lv8_6);
    or_ln769_fu_1085_p2 <= (tmp_10_fu_1077_p3 or shl_ln13_fu_1065_p3);
    or_ln771_fu_1128_p2 <= (shl_ln_reg_1230 or ap_const_lv8_7);
    or_ln_fu_565_p3 <= (trunc_ln746_fu_547_p1 & or_ln746_fu_559_p2);

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state4, zext_ln739_2_fu_428_p1, zext_ln743_2_fu_534_p1, zext_ln748_fu_650_p1, zext_ln752_1_fu_745_p1, zext_ln757_1_fu_871_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_address0 <= zext_ln757_1_fu_871_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_address0 <= zext_ln752_1_fu_745_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_address0 <= zext_ln748_fu_650_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_address0 <= zext_ln743_2_fu_534_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_address0 <= zext_ln739_2_fu_428_p1(10 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln762_fu_936_p1, zext_ln766_1_fu_1060_p1, zext_ln771_fu_1140_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_coeffs_address1 <= zext_ln771_fu_1140_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_coeffs_address1 <= zext_ln766_1_fu_1060_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_address1 <= zext_ln762_fu_936_p1(10 - 1 downto 0);
        else 
            r_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            r_coeffs_ce1 <= ap_const_logic_1;
        else 
            r_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state4, sext_ln775_fu_495_p1, sext_ln776_fu_633_p1, sext_ln777_fu_716_p1, sext_ln778_fu_834_p1, sext_ln779_fu_1018_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_d0 <= sext_ln779_fu_1018_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_d0 <= sext_ln778_fu_834_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_d0 <= sext_ln777_fu_716_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_d0 <= sext_ln776_fu_633_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_d0 <= sext_ln775_fu_495_p1;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_d1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, sext_ln780_fu_1029_p1, sext_ln781_fu_1123_p1, sext_ln782_fu_1162_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_coeffs_d1 <= sext_ln782_fu_1162_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_coeffs_d1 <= sext_ln781_fu_1123_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_d1 <= sext_ln780_fu_1029_p1;
        else 
            r_coeffs_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_we1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            r_coeffs_we1 <= ap_const_logic_1;
        else 
            r_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln775_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln775_fu_489_p2),32));

        sext_ln776_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln776_fu_627_p2),32));

        sext_ln777_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln777_fu_710_p2),32));

        sext_ln778_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln778_fu_828_p2),32));

        sext_ln779_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln779_fu_1012_p2),32));

        sext_ln780_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln780_fu_1023_p2),32));

        sext_ln781_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln781_fu_1117_p2),32));

        sext_ln782_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln782_fu_1156_p2),32));

    shl_ln10_fu_539_p3 <= (a_q0 & ap_const_lv3_0);
    shl_ln11_fu_750_p3 <= (reg_366 & ap_const_lv1_0);
    shl_ln12_fu_876_p3 <= (reg_366 & ap_const_lv4_0);
    shl_ln13_fu_1065_p3 <= (a_q0 & ap_const_lv2_0);
    shl_ln_fu_500_p3 <= (trunc_ln739_reg_1209 & ap_const_lv3_0);
    sub_ln775_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv14_1000) - unsigned(zext_ln743_fu_445_p1));
    sub_ln776_fu_627_p2 <= std_logic_vector(unsigned(ap_const_lv14_1000) - unsigned(zext_ln746_fu_573_p1));
    sub_ln777_fu_710_p2 <= std_logic_vector(unsigned(ap_const_lv14_1000) - unsigned(zext_ln750_fu_666_p1));
    sub_ln778_fu_828_p2 <= std_logic_vector(unsigned(ap_const_lv14_1000) - unsigned(zext_ln755_fu_784_p1));
    sub_ln779_fu_1012_p2 <= std_logic_vector(unsigned(ap_const_lv14_1000) - unsigned(zext_ln760_fu_910_p1));
    sub_ln780_fu_1023_p2 <= std_logic_vector(unsigned(ap_const_lv14_1000) - unsigned(zext_ln764_fu_953_p1));
    sub_ln781_fu_1117_p2 <= std_logic_vector(unsigned(ap_const_lv14_1000) - unsigned(zext_ln769_fu_1099_p1));
    sub_ln782_fu_1156_p2 <= std_logic_vector(unsigned(ap_const_lv14_1000) - unsigned(zext_ln772_2_fu_1152_p1));
    tmp_10_fu_1077_p3 <= (ap_const_lv2_0 & zext_ln766_fu_1044_p1);
    tmp_2_fu_551_p3 <= (ap_const_lv3_0 & zext_ln743_1_fu_517_p1);
    tmp_529_fu_420_p4 <= ((r_coeffs_offset & trunc_ln739_reg_1209) & ap_const_lv3_0);
    tmp_530_fu_527_p3 <= (r_coeffs_offset & or_ln743_fu_521_p2);
    tmp_531_fu_643_p3 <= (r_coeffs_offset & or_ln748_fu_638_p2);
    tmp_532_fu_738_p3 <= (r_coeffs_offset & or_ln752_fu_733_p2);
    tmp_533_fu_864_p3 <= (r_coeffs_offset & or_ln757_fu_859_p2);
    tmp_534_fu_929_p3 <= (r_coeffs_offset & or_ln762_fu_924_p2);
    tmp_535_fu_1053_p3 <= (r_coeffs_offset & or_ln766_fu_1048_p2);
    tmp_536_fu_1133_p3 <= (r_coeffs_offset & or_ln771_fu_1128_p2);
    tmp_5_fu_762_p3 <= (ap_const_lv1_0 & zext_ln752_fu_729_p1);
    tmp_7_fu_888_p3 <= (ap_const_lv4_0 & zext_ln757_fu_855_p1);
    tmp_fu_721_p3 <= reg_361(7 downto 7);
    tmp_s_fu_437_p3 <= (trunc_ln741_fu_433_p1 & a_q0);
    trunc_ln739_fu_396_p1 <= i_0_reg_338(5 - 1 downto 0);
    trunc_ln741_fu_433_p1 <= a_q1(5 - 1 downto 0);
    trunc_ln746_fu_547_p1 <= a_q1(2 - 1 downto 0);
    trunc_ln750_fu_655_p1 <= a_q0(7 - 1 downto 0);
    trunc_ln755_fu_758_p1 <= a_q0(4 - 1 downto 0);
    trunc_ln760_fu_884_p1 <= a_q0(1 - 1 downto 0);
    trunc_ln764_fu_941_p1 <= a_q1(6 - 1 downto 0);
    trunc_ln769_fu_1073_p1 <= a_q1(3 - 1 downto 0);
    zext_ln739_1_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln739_fu_386_p2),64));
    zext_ln739_2_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_529_fu_420_p4),64));
    zext_ln739_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_349),12));
    zext_ln740_1_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln740_1_fu_410_p2),64));
    zext_ln740_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln740_fu_400_p2),12));
    zext_ln743_1_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_507_p4),8));
    zext_ln743_2_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_530_fu_527_p3),64));
    zext_ln743_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_437_p3),14));
    zext_ln744_1_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln744_1_fu_459_p2),64));
    zext_ln744_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln744_fu_449_p2),12));
    zext_ln745_1_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln745_1_fu_479_p2),64));
    zext_ln745_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln745_fu_469_p2),12));
    zext_ln746_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_565_p3),14));
    zext_ln748_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_531_fu_643_p3),64));
    zext_ln749_1_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln749_1_fu_597_p2),64));
    zext_ln749_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln749_fu_587_p2),12));
    zext_ln750_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1_fu_659_p3),14));
    zext_ln752_1_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_532_fu_738_p3),64));
    zext_ln752_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_721_p3),8));
    zext_ln753_1_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln753_1_fu_617_p2),64));
    zext_ln753_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln753_fu_607_p2),12));
    zext_ln754_1_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln754_1_fu_680_p2),64));
    zext_ln754_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln754_fu_670_p2),12));
    zext_ln755_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2_fu_776_p3),14));
    zext_ln757_1_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_533_fu_864_p3),64));
    zext_ln757_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln5_fu_845_p4),8));
    zext_ln758_1_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln758_1_fu_700_p2),64));
    zext_ln758_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln758_fu_690_p2),12));
    zext_ln759_1_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln759_1_fu_798_p2),64));
    zext_ln759_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln759_fu_788_p2),12));
    zext_ln760_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln3_fu_902_p3),14));
    zext_ln762_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_534_fu_929_p3),64));
    zext_ln763_1_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln763_1_fu_818_p2),64));
    zext_ln763_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln763_fu_808_p2),12));
    zext_ln764_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln4_fu_945_p3),14));
    zext_ln766_1_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_535_fu_1053_p3),64));
    zext_ln766_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln7_fu_1034_p4),8));
    zext_ln767_1_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln767_1_fu_967_p2),64));
    zext_ln767_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln767_fu_957_p2),12));
    zext_ln768_1_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln768_1_fu_987_p2),64));
    zext_ln768_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln768_fu_977_p2),12));
    zext_ln769_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln5_fu_1091_p3),14));
    zext_ln771_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_536_fu_1133_p3),64));
    zext_ln772_1_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln772_1_reg_1290),64));
    zext_ln772_2_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln6_fu_1145_p3),14));
    zext_ln772_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln772_fu_997_p2),12));
end behav;
