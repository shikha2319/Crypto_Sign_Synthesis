-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium_15 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_coeffs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_coeffs_ce0 : OUT STD_LOGIC;
    c_coeffs_we0 : OUT STD_LOGIC;
    c_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    seed_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    seed_ce0 : OUT STD_LOGIC;
    seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    seed_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    seed_ce1 : OUT STD_LOGIC;
    seed_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of pqcrystals_dilithium_15 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv9_D9 : STD_LOGIC_VECTOR (8 downto 0) := "011011001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_602_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln416_fu_624_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln416_reg_1269 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln_fu_634_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_1274 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln416_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_s_addr_6_reg_1294 : STD_LOGIC_VECTOR (4 downto 0);
    signal seed_load_reg_1312 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal seed_load_1_reg_1317 : STD_LOGIC_VECTOR (7 downto 0);
    signal seed_load_2_reg_1332 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal seed_load_3_reg_1337 : STD_LOGIC_VECTOR (7 downto 0);
    signal seed_load_4_reg_1352 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal seed_load_5_reg_1357 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln476_fu_759_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln476_reg_1375 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln476_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln2_fu_770_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln2_reg_1385 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln48_1_reg_1395 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln48_2_reg_1400 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln48_3_reg_1405 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln48_4_reg_1410 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln48_5_reg_1415 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln48_6_reg_1420 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_18_fu_936_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_18_reg_1428 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln523_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signs_fu_973_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_19_fu_985_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln476_1_fu_1014_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln476_1_reg_1460 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln476_1_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln477_2_fu_1025_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln477_2_reg_1470 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal trunc_ln48_9_reg_1480 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln48_10_reg_1485 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln48_11_reg_1490 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln48_12_reg_1495 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln48_13_reg_1500 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln48_14_reg_1505 : STD_LOGIC_VECTOR (7 downto 0);
    signal pos_fu_1185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_reg_1510 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal c_coeffs_addr_1_reg_1524 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln537_fu_1200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln540_fu_1211_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln540_reg_1529 : STD_LOGIC_VECTOR (0 downto 0);
    signal signs_3_fu_1225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal signs_3_reg_1534 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_20_fu_1234_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_20_reg_1539 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal buf_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_ce0 : STD_LOGIC;
    signal buf_we0 : STD_LOGIC;
    signal buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_ce1 : STD_LOGIC;
    signal buf_we1 : STD_LOGIC;
    signal buf_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_ce0 : STD_LOGIC;
    signal state_s_we0 : STD_LOGIC;
    signal state_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_ce1 : STD_LOGIC;
    signal state_s_we1 : STD_LOGIC;
    signal state_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_589_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_589_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_589_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_589_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_589_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_589_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_589_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_589_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_589_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_589_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_589_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_589_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_i_i_reg_450 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln362_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_i_i_reg_461 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_i_i14_0_reg_472 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_0_reg_484 : STD_LOGIC_VECTOR (3 downto 0);
    signal signs_0_reg_496 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_508 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln527_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_519 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal pos_0_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal signs_1_reg_543 : STD_LOGIC_VECTOR (63 downto 0);
    signal pos_1_reg_554 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln529_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i_i10_0_reg_565 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal pos_2_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln531_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_589_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln363_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln417_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_13_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_14_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_15_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_16_fu_693_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_17_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_18_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln477_1_fu_765_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln477_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln48_2_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_3_fu_895_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln48_4_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_5_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_6_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln524_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln528_fu_991_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln477_3_fu_1020_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln477_2_fu_1033_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_7_fu_1060_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_8_fu_1130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln48_9_fu_1140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_10_fu_1150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln48_11_fu_1160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_12_fu_1170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_13_fu_1180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln536_fu_1191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln539_fu_1206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln539_1_fu_1229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln417_fu_732_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal xor_ln450_fu_739_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln451_fu_746_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln48_fu_783_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln48_7_fu_1038_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln540_fu_1253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln417_fu_630_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln31_fu_647_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_1_fu_658_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_2_fu_668_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_3_fu_678_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_4_fu_688_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_5_fu_698_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_6_fu_708_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_7_i_fu_718_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln48_fu_799_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_1_fu_870_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_2_fu_880_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_3_fu_890_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_4_fu_900_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_5_fu_910_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_6_fu_920_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln524_fu_951_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln3_fu_955_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln524_1_fu_947_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln524_2_fu_963_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln524_fu_967_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln48_7_fu_1054_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_8_fu_1125_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_9_fu_1135_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_10_fu_1145_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_11_fu_1155_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_12_fu_1165_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_13_fu_1175_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln536_1_fu_1196_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal signs_2_fu_1215_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln4_fu_1240_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln540_fu_1247_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);

    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pqcrystals_dilithncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component shake256_state_0_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    buf_U : component pqcrystals_dilithncg
    generic map (
        DataWidth => 8,
        AddressRange => 136,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_address0,
        ce0 => buf_ce0,
        we0 => buf_we0,
        d0 => buf_d0,
        q0 => buf_q0,
        address1 => buf_address1,
        ce1 => buf_ce1,
        we1 => buf_we1,
        d1 => buf_d1,
        q1 => buf_q1);

    state_s_U : component shake256_state_0_s
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_s_address0,
        ce0 => state_s_ce0,
        we0 => state_s_we0,
        d0 => state_s_d0,
        q0 => state_s_q0,
        address1 => state_s_address1,
        ce1 => state_s_ce1,
        we1 => state_s_we1,
        d1 => state_s_d1,
        q1 => state_s_q1);

    grp_KeccakF1600_StatePer_1_fu_589 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_589_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_589_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_589_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_589_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_1_fu_589_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_1_fu_589_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_1_fu_589_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_1_fu_589_state_d0,
        state_q0 => state_s_q0,
        state_address1 => grp_KeccakF1600_StatePer_1_fu_589_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_1_fu_589_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_1_fu_589_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_1_fu_589_state_d1,
        state_q1 => state_s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_589_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_589_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln531_fu_1002_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
                    grp_KeccakF1600_StatePer_1_fu_589_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_589_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_589_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i10_0_reg_565_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                i_0_i_i10_0_reg_565 <= add_ln476_1_reg_1460;
            elsif (((grp_KeccakF1600_StatePer_1_fu_589_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_0_i_i10_0_reg_565 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_i14_0_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_0_i_i14_0_reg_472 <= add_ln476_reg_1375;
            elsif (((grp_KeccakF1600_StatePer_1_fu_589_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_0_i_i14_0_reg_472 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_i_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_fu_596_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_i_reg_450 <= i_fu_602_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_i_reg_450 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln476_fu_753_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_0_reg_484 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_0_reg_484 <= i_18_reg_1428;
            end if; 
        end if;
    end process;

    i_1_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln523_fu_930_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_1_reg_508 <= ap_const_lv9_0;
            elsif (((icmp_ln527_fu_979_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_1_reg_508 <= i_19_fu_985_p2;
            end if; 
        end if;
    end process;

    i_2_reg_519_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln527_fu_979_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_2_reg_519 <= ap_const_lv9_D9;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_2_reg_519 <= i_20_reg_1539;
            end if; 
        end if;
    end process;

    i_3_i_i_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_3_i_i_reg_461 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_3_i_i_reg_461 <= add_ln416_reg_1269;
            end if; 
        end if;
    end process;

    pos_0_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln527_fu_979_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                pos_0_reg_531 <= ap_const_lv32_8;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                pos_0_reg_531 <= pos_reg_1510;
            end if; 
        end if;
    end process;

    pos_1_reg_554_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln537_fu_1200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                pos_1_reg_554 <= pos_reg_1510;
            elsif (((icmp_ln529_fu_996_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                pos_1_reg_554 <= pos_0_reg_531;
            end if; 
        end if;
    end process;

    pos_2_reg_577_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln476_1_fu_1008_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                pos_2_reg_577 <= ap_const_lv32_0;
            elsif (((icmp_ln531_fu_1002_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                pos_2_reg_577 <= pos_1_reg_554;
            end if; 
        end if;
    end process;

    signs_0_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln476_fu_753_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                signs_0_reg_496 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                signs_0_reg_496 <= signs_fu_973_p2;
            end if; 
        end if;
    end process;

    signs_1_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln527_fu_979_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                signs_1_reg_543 <= signs_0_reg_496;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                signs_1_reg_543 <= signs_3_reg_1534;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln416_reg_1269 <= add_ln416_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln476_1_reg_1460 <= add_ln476_1_fu_1014_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln476_reg_1375 <= add_ln476_fu_759_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln537_fu_1200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                c_coeffs_addr_1_reg_1524 <= zext_ln539_fu_1206_p1(8 - 1 downto 0);
                    signs_3_reg_1534(62 downto 0) <= signs_3_fu_1225_p1(62 downto 0);
                trunc_ln540_reg_1529 <= trunc_ln540_fu_1211_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_18_reg_1428 <= i_18_fu_936_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                i_20_reg_1539 <= i_20_fu_1234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                pos_reg_1510 <= pos_fu_1185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                seed_load_1_reg_1317 <= seed_q1;
                seed_load_reg_1312 <= seed_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                seed_load_2_reg_1332 <= seed_q0;
                seed_load_3_reg_1337 <= seed_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                seed_load_4_reg_1352 <= seed_q0;
                seed_load_5_reg_1357 <= seed_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    shl_ln2_reg_1385(7 downto 3) <= shl_ln2_fu_770_p3(7 downto 3);
                trunc_ln48_1_reg_1395 <= state_s_q1(23 downto 16);
                trunc_ln48_2_reg_1400 <= state_s_q1(31 downto 24);
                trunc_ln48_3_reg_1405 <= state_s_q1(39 downto 32);
                trunc_ln48_4_reg_1410 <= state_s_q1(47 downto 40);
                trunc_ln48_5_reg_1415 <= state_s_q1(55 downto 48);
                trunc_ln48_6_reg_1420 <= state_s_q1(63 downto 56);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                    shl_ln477_2_reg_1470(7 downto 3) <= shl_ln477_2_fu_1025_p3(7 downto 3);
                trunc_ln48_10_reg_1485 <= state_s_q0(31 downto 24);
                trunc_ln48_11_reg_1490 <= state_s_q0(39 downto 32);
                trunc_ln48_12_reg_1495 <= state_s_q0(47 downto 40);
                trunc_ln48_13_reg_1500 <= state_s_q0(55 downto 48);
                trunc_ln48_14_reg_1505 <= state_s_q0(63 downto 56);
                trunc_ln48_9_reg_1480 <= state_s_q0(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_fu_618_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    shl_ln_reg_1274(4 downto 3) <= shl_ln_fu_634_p3(4 downto 3);
                    state_s_addr_6_reg_1294(2 downto 0) <= zext_ln416_fu_613_p1(5 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    shl_ln_reg_1274(2 downto 0) <= "000";
    state_s_addr_6_reg_1294(4 downto 3) <= "00";
    shl_ln2_reg_1385(2 downto 0) <= "000";
    shl_ln477_2_reg_1470(2 downto 0) <= "000";
    signs_3_reg_1534(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln416_fu_618_p2, ap_CS_fsm_state11, icmp_ln476_fu_753_p2, ap_CS_fsm_state16, icmp_ln523_fu_930_p2, ap_CS_fsm_state18, ap_CS_fsm_state22, icmp_ln476_1_fu_1008_p2, ap_CS_fsm_state28, icmp_ln537_fu_1200_p2, grp_KeccakF1600_StatePer_1_fu_589_ap_done, icmp_ln362_fu_596_p2, ap_CS_fsm_state10, icmp_ln527_fu_979_p2, ap_CS_fsm_state19, icmp_ln529_fu_996_p2, ap_CS_fsm_state21, ap_CS_fsm_state20, icmp_ln531_fu_1002_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln362_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln416_fu_618_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_KeccakF1600_StatePer_1_fu_589_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln476_fu_753_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln523_fu_930_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln527_fu_979_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln529_fu_996_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln531_fu_1002_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((grp_KeccakF1600_StatePer_1_fu_589_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln476_1_fu_1008_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln537_fu_1200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln416_fu_624_p2 <= std_logic_vector(unsigned(i_3_i_i_reg_461) + unsigned(ap_const_lv3_1));
    add_ln476_1_fu_1014_p2 <= std_logic_vector(unsigned(i_0_i_i10_0_reg_565) + unsigned(ap_const_lv5_1));
    add_ln476_fu_759_p2 <= std_logic_vector(unsigned(i_0_i_i14_0_reg_472) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19, icmp_ln529_fu_996_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln529_fu_996_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, icmp_ln529_fu_996_p2)
    begin
        if (((icmp_ln529_fu_996_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buf_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state15, ap_CS_fsm_state26, zext_ln477_fu_778_p1, zext_ln48_1_fu_875_p1, ap_CS_fsm_state13, zext_ln48_3_fu_895_p1, ap_CS_fsm_state14, zext_ln48_5_fu_915_p1, zext_ln524_fu_942_p1, zext_ln48_7_fu_1060_p1, ap_CS_fsm_state24, zext_ln48_9_fu_1140_p1, ap_CS_fsm_state25, zext_ln48_11_fu_1160_p1, zext_ln48_13_fu_1180_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            buf_address0 <= zext_ln48_13_fu_1180_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            buf_address0 <= zext_ln48_11_fu_1160_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buf_address0 <= zext_ln48_9_fu_1140_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf_address0 <= zext_ln48_7_fu_1060_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buf_address0 <= zext_ln524_fu_942_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf_address0 <= zext_ln48_5_fu_915_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_address0 <= zext_ln48_3_fu_895_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            buf_address0 <= zext_ln48_1_fu_875_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buf_address0 <= zext_ln477_fu_778_p1(8 - 1 downto 0);
        else 
            buf_address0 <= "XXXXXXXX";
        end if; 
    end process;


    buf_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state15, ap_CS_fsm_state26, zext_ln48_fu_805_p1, ap_CS_fsm_state13, zext_ln48_2_fu_885_p1, ap_CS_fsm_state14, zext_ln48_4_fu_905_p1, zext_ln48_6_fu_925_p1, zext_ln477_2_fu_1033_p1, zext_ln48_8_fu_1130_p1, ap_CS_fsm_state24, zext_ln48_10_fu_1150_p1, ap_CS_fsm_state25, zext_ln48_12_fu_1170_p1, zext_ln536_fu_1191_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            buf_address1 <= zext_ln536_fu_1191_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            buf_address1 <= zext_ln48_12_fu_1170_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            buf_address1 <= zext_ln48_10_fu_1150_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buf_address1 <= zext_ln48_8_fu_1130_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf_address1 <= zext_ln477_2_fu_1033_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf_address1 <= zext_ln48_6_fu_925_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_address1 <= zext_ln48_4_fu_905_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            buf_address1 <= zext_ln48_2_fu_885_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buf_address1 <= zext_ln48_fu_805_p1(8 - 1 downto 0);
        else 
            buf_address1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state15, ap_CS_fsm_state26, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            buf_ce0 <= ap_const_logic_1;
        else 
            buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state15, ap_CS_fsm_state26, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            buf_ce1 <= ap_const_logic_1;
        else 
            buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_d0_assign_proc : process(ap_CS_fsm_state12, trunc_ln48_1_reg_1395, trunc_ln48_3_reg_1405, trunc_ln48_5_reg_1415, ap_CS_fsm_state23, trunc_ln48_10_reg_1485, trunc_ln48_12_reg_1495, trunc_ln48_14_reg_1505, state_s_q0, ap_CS_fsm_state15, ap_CS_fsm_state26, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state25, trunc_ln48_fu_783_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            buf_d0 <= trunc_ln48_14_reg_1505;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            buf_d0 <= trunc_ln48_12_reg_1495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buf_d0 <= trunc_ln48_10_reg_1485;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf_d0 <= state_s_q0(15 downto 8);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf_d0 <= trunc_ln48_5_reg_1415;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_d0 <= trunc_ln48_3_reg_1405;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            buf_d0 <= trunc_ln48_1_reg_1395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buf_d0 <= trunc_ln48_fu_783_p1;
        else 
            buf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buf_d1_assign_proc : process(ap_CS_fsm_state12, trunc_ln48_2_reg_1400, trunc_ln48_4_reg_1410, trunc_ln48_6_reg_1420, ap_CS_fsm_state23, trunc_ln48_9_reg_1480, trunc_ln48_11_reg_1490, trunc_ln48_13_reg_1500, state_s_q1, ap_CS_fsm_state15, ap_CS_fsm_state26, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state25, trunc_ln48_7_fu_1038_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            buf_d1 <= trunc_ln48_13_reg_1500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            buf_d1 <= trunc_ln48_11_reg_1490;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buf_d1 <= trunc_ln48_9_reg_1480;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            buf_d1 <= trunc_ln48_7_fu_1038_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf_d1 <= trunc_ln48_6_reg_1420;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_d1 <= trunc_ln48_4_reg_1410;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            buf_d1 <= trunc_ln48_2_reg_1400;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buf_d1 <= state_s_q1(15 downto 8);
        else 
            buf_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state23, ap_CS_fsm_state15, ap_CS_fsm_state26, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            buf_we0 <= ap_const_logic_1;
        else 
            buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state23, ap_CS_fsm_state15, ap_CS_fsm_state26, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            buf_we1 <= ap_const_logic_1;
        else 
            buf_we1 <= ap_const_logic_0;
        end if; 
    end process;


    c_coeffs_address0_assign_proc : process(ap_CS_fsm_state18, c_coeffs_addr_1_reg_1524, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, zext_ln528_fu_991_p1, zext_ln539_fu_1206_p1, zext_ln539_1_fu_1229_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            c_coeffs_address0 <= c_coeffs_addr_1_reg_1524;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c_coeffs_address0 <= zext_ln539_1_fu_1229_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            c_coeffs_address0 <= zext_ln539_fu_1206_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            c_coeffs_address0 <= zext_ln528_fu_991_p1(8 - 1 downto 0);
        else 
            c_coeffs_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c_coeffs_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            c_coeffs_ce0 <= ap_const_logic_1;
        else 
            c_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_coeffs_d0_assign_proc : process(c_coeffs_q0, ap_CS_fsm_state18, ap_CS_fsm_state29, ap_CS_fsm_state30, sext_ln540_fu_1253_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            c_coeffs_d0 <= sext_ln540_fu_1253_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c_coeffs_d0 <= c_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            c_coeffs_d0 <= ap_const_lv32_0;
        else 
            c_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_coeffs_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state29, icmp_ln527_fu_979_p2, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((icmp_ln527_fu_979_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            c_coeffs_we0 <= ap_const_logic_1;
        else 
            c_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakF1600_StatePer_1_fu_589_ap_start <= grp_KeccakF1600_StatePer_1_fu_589_ap_start_reg;
    i_18_fu_936_p2 <= std_logic_vector(unsigned(i_0_reg_484) + unsigned(ap_const_lv4_1));
    i_19_fu_985_p2 <= std_logic_vector(unsigned(i_1_reg_508) + unsigned(ap_const_lv9_1));
    i_20_fu_1234_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(i_2_reg_519));
    i_fu_602_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_450) + unsigned(ap_const_lv5_1));
    icmp_ln362_fu_596_p2 <= "1" when (i_0_i_i_reg_450 = ap_const_lv5_19) else "0";
    icmp_ln416_fu_618_p2 <= "1" when (i_3_i_i_reg_461 = ap_const_lv3_4) else "0";
    icmp_ln476_1_fu_1008_p2 <= "1" when (i_0_i_i10_0_reg_565 = ap_const_lv5_11) else "0";
    icmp_ln476_fu_753_p2 <= "1" when (i_0_i_i14_0_reg_472 = ap_const_lv5_11) else "0";
    icmp_ln523_fu_930_p2 <= "1" when (i_0_reg_484 = ap_const_lv4_8) else "0";
    icmp_ln527_fu_979_p2 <= "1" when (i_1_reg_508 = ap_const_lv9_100) else "0";
    icmp_ln529_fu_996_p2 <= "1" when (i_2_reg_519 = ap_const_lv9_100) else "0";
    icmp_ln531_fu_1002_p2 <= "1" when (unsigned(pos_1_reg_554) > unsigned(ap_const_lv32_87)) else "0";
    icmp_ln537_fu_1200_p2 <= "1" when (unsigned(zext_ln536_1_fu_1196_p1) > unsigned(i_2_reg_519)) else "0";
    or_ln31_1_fu_658_p2 <= (shl_ln_reg_1274 or ap_const_lv5_2);
    or_ln31_2_fu_668_p2 <= (shl_ln_reg_1274 or ap_const_lv5_3);
    or_ln31_3_fu_678_p2 <= (shl_ln_reg_1274 or ap_const_lv5_4);
    or_ln31_4_fu_688_p2 <= (shl_ln_reg_1274 or ap_const_lv5_5);
    or_ln31_5_fu_698_p2 <= (shl_ln_reg_1274 or ap_const_lv5_6);
    or_ln31_6_fu_708_p2 <= (shl_ln_reg_1274 or ap_const_lv5_7);
    or_ln31_fu_647_p2 <= (shl_ln_fu_634_p3 or ap_const_lv5_1);
    or_ln48_10_fu_1145_p2 <= (shl_ln477_2_reg_1470 or ap_const_lv8_4);
    or_ln48_11_fu_1155_p2 <= (shl_ln477_2_reg_1470 or ap_const_lv8_5);
    or_ln48_12_fu_1165_p2 <= (shl_ln477_2_reg_1470 or ap_const_lv8_6);
    or_ln48_13_fu_1175_p2 <= (shl_ln477_2_reg_1470 or ap_const_lv8_7);
    or_ln48_1_fu_870_p2 <= (shl_ln2_reg_1385 or ap_const_lv8_2);
    or_ln48_2_fu_880_p2 <= (shl_ln2_reg_1385 or ap_const_lv8_3);
    or_ln48_3_fu_890_p2 <= (shl_ln2_reg_1385 or ap_const_lv8_4);
    or_ln48_4_fu_900_p2 <= (shl_ln2_reg_1385 or ap_const_lv8_5);
    or_ln48_5_fu_910_p2 <= (shl_ln2_reg_1385 or ap_const_lv8_6);
    or_ln48_6_fu_920_p2 <= (shl_ln2_reg_1385 or ap_const_lv8_7);
    or_ln48_7_fu_1054_p2 <= (shl_ln477_2_fu_1025_p3 or ap_const_lv8_1);
    or_ln48_8_fu_1125_p2 <= (shl_ln477_2_reg_1470 or ap_const_lv8_2);
    or_ln48_9_fu_1135_p2 <= (shl_ln477_2_reg_1470 or ap_const_lv8_3);
    or_ln48_fu_799_p2 <= (shl_ln2_fu_770_p3 or ap_const_lv8_1);
    pos_fu_1185_p2 <= std_logic_vector(unsigned(pos_2_reg_577) + unsigned(ap_const_lv32_1));
    r_7_i_fu_718_p9 <= (((((((seed_q1 & seed_q0) & seed_load_5_reg_1357) & seed_load_4_reg_1352) & seed_load_3_reg_1337) & seed_load_2_reg_1332) & seed_load_1_reg_1317) & seed_load_reg_1312);

    seed_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln417_fu_642_p1, zext_ln31_13_fu_663_p1, zext_ln31_15_fu_683_p1, zext_ln31_17_fu_703_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_address0 <= zext_ln31_17_fu_703_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            seed_address0 <= zext_ln31_15_fu_683_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_address0 <= zext_ln31_13_fu_663_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seed_address0 <= zext_ln417_fu_642_p1(13 - 1 downto 0);
        else 
            seed_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    seed_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln31_fu_653_p1, zext_ln31_14_fu_673_p1, zext_ln31_16_fu_693_p1, zext_ln31_18_fu_713_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_address1 <= zext_ln31_18_fu_713_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            seed_address1 <= zext_ln31_16_fu_693_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_address1 <= zext_ln31_14_fu_673_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seed_address1 <= zext_ln31_fu_653_p1(13 - 1 downto 0);
        else 
            seed_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    seed_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            seed_ce0 <= ap_const_logic_1;
        else 
            seed_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            seed_ce1 <= ap_const_logic_1;
        else 
            seed_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln540_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln540_fu_1247_p2),32));

    shl_ln2_fu_770_p3 <= (i_0_i_i14_0_reg_472 & ap_const_lv3_0);
    shl_ln3_fu_955_p3 <= (trunc_ln524_fu_951_p1 & ap_const_lv3_0);
    shl_ln477_2_fu_1025_p3 <= (i_0_i_i10_0_reg_565 & ap_const_lv3_0);
    shl_ln4_fu_1240_p3 <= (trunc_ln540_reg_1529 & ap_const_lv1_0);
    shl_ln524_fu_967_p2 <= std_logic_vector(shift_left(unsigned(zext_ln524_1_fu_947_p1),to_integer(unsigned('0' & zext_ln524_2_fu_963_p1(31-1 downto 0)))));
    shl_ln_fu_634_p3 <= (trunc_ln417_fu_630_p1 & ap_const_lv3_0);
    signs_2_fu_1215_p4 <= signs_1_reg_543(63 downto 1);
    signs_3_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(signs_2_fu_1215_p4),64));
    signs_fu_973_p2 <= (signs_0_reg_496 or shl_ln524_fu_967_p2);

    state_s_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, state_s_addr_6_reg_1294, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_1_fu_589_state_address0, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state21, zext_ln363_fu_608_p1, zext_ln477_3_fu_1020_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_s_address0 <= zext_ln477_3_fu_1020_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_s_address0 <= state_s_addr_6_reg_1294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_s_address0 <= zext_ln363_fu_608_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_s_address0 <= grp_KeccakF1600_StatePer_1_fu_589_state_address0;
        else 
            state_s_address0 <= "XXXXX";
        end if; 
    end process;


    state_s_address1_assign_proc : process(ap_CS_fsm_state3, state_s_addr_6_reg_1294, ap_CS_fsm_state6, ap_CS_fsm_state11, grp_KeccakF1600_StatePer_1_fu_589_state_address1, ap_CS_fsm_state10, ap_CS_fsm_state21, zext_ln477_1_fu_765_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_s_address1 <= zext_ln477_1_fu_765_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_s_address1 <= state_s_addr_6_reg_1294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_s_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_s_address1 <= grp_KeccakF1600_StatePer_1_fu_589_state_address1;
        else 
            state_s_address1 <= "XXXXX";
        end if; 
    end process;


    state_s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state22, grp_KeccakF1600_StatePer_1_fu_589_state_ce0, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state21, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            state_s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_s_ce0 <= grp_KeccakF1600_StatePer_1_fu_589_state_ce0;
        else 
            state_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state11, grp_KeccakF1600_StatePer_1_fu_589_state_ce1, ap_CS_fsm_state10, ap_CS_fsm_state21, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_s_ce1 <= grp_KeccakF1600_StatePer_1_fu_589_state_ce1;
        else 
            state_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_d0_assign_proc : process(ap_CS_fsm_state2, grp_KeccakF1600_StatePer_1_fu_589_state_d0, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state21, xor_ln417_fu_732_p2, ap_CS_fsm_state8, xor_ln451_fu_746_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_d0 <= xor_ln451_fu_746_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_s_d0 <= xor_ln417_fu_732_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_s_d0 <= ap_const_lv64_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_s_d0 <= grp_KeccakF1600_StatePer_1_fu_589_state_d0;
        else 
            state_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_s_d1_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_589_state_d1, ap_CS_fsm_state10, ap_CS_fsm_state21, ap_CS_fsm_state8, xor_ln450_fu_739_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_d1 <= xor_ln450_fu_739_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_s_d1 <= grp_KeccakF1600_StatePer_1_fu_589_state_d1;
        else 
            state_s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_s_we0_assign_proc : process(ap_CS_fsm_state2, grp_KeccakF1600_StatePer_1_fu_589_state_we0, icmp_ln362_fu_596_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state21, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln362_fu_596_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            state_s_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_s_we0 <= grp_KeccakF1600_StatePer_1_fu_589_state_we0;
        else 
            state_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_we1_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_589_state_we1, ap_CS_fsm_state10, ap_CS_fsm_state21, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_s_we1 <= grp_KeccakF1600_StatePer_1_fu_589_state_we1;
        else 
            state_s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln540_fu_1247_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) - unsigned(shl_ln4_fu_1240_p3));
    trunc_ln417_fu_630_p1 <= i_3_i_i_reg_461(2 - 1 downto 0);
    trunc_ln48_7_fu_1038_p1 <= state_s_q0(8 - 1 downto 0);
    trunc_ln48_fu_783_p1 <= state_s_q1(8 - 1 downto 0);
    trunc_ln524_fu_951_p1 <= i_0_reg_484(3 - 1 downto 0);
    trunc_ln540_fu_1211_p1 <= signs_1_reg_543(1 - 1 downto 0);
    xor_ln417_fu_732_p2 <= (state_s_q1 xor r_7_i_fu_718_p9);
    xor_ln450_fu_739_p2 <= (state_s_q0 xor ap_const_lv64_1F);
    xor_ln451_fu_746_p2 <= (state_s_q1 xor ap_const_lv64_8000000000000000);
    zext_ln31_13_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_1_fu_658_p2),64));
    zext_ln31_14_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_2_fu_668_p2),64));
    zext_ln31_15_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_3_fu_678_p2),64));
    zext_ln31_16_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_4_fu_688_p2),64));
    zext_ln31_17_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_5_fu_698_p2),64));
    zext_ln31_18_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_6_fu_708_p2),64));
    zext_ln31_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_fu_647_p2),64));
    zext_ln363_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_450),64));
    zext_ln416_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i_i_reg_461),64));
    zext_ln417_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_634_p3),64));
    zext_ln477_1_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i14_0_reg_472),64));
    zext_ln477_2_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln477_2_fu_1025_p3),64));
    zext_ln477_3_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i10_0_reg_565),64));
    zext_ln477_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_770_p3),64));
    zext_ln48_10_fu_1150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_10_fu_1145_p2),64));
    zext_ln48_11_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_11_fu_1155_p2),64));
    zext_ln48_12_fu_1170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_12_fu_1165_p2),64));
    zext_ln48_13_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_13_fu_1175_p2),64));
    zext_ln48_1_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_1_fu_870_p2),64));
    zext_ln48_2_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_2_fu_880_p2),64));
    zext_ln48_3_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_3_fu_890_p2),64));
    zext_ln48_4_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_4_fu_900_p2),64));
    zext_ln48_5_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_5_fu_910_p2),64));
    zext_ln48_6_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_6_fu_920_p2),64));
    zext_ln48_7_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_7_fu_1054_p2),64));
    zext_ln48_8_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_8_fu_1125_p2),64));
    zext_ln48_9_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_9_fu_1135_p2),64));
    zext_ln48_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_fu_799_p2),64));
    zext_ln524_1_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buf_q0),64));
    zext_ln524_2_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_955_p3),64));
    zext_ln524_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_484),64));
    zext_ln528_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_508),64));
    zext_ln536_1_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buf_q1),9));
    zext_ln536_fu_1191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_2_reg_577),64));
    zext_ln539_1_fu_1229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_519),64));
    zext_ln539_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buf_q1),64));
end behav;
