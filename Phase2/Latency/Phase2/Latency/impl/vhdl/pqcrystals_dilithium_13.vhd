-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium_13 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_coeffs_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    a_coeffs_ce0 : OUT STD_LOGIC;
    a_coeffs_we0 : OUT STD_LOGIC;
    a_coeffs_d0 : OUT STD_LOGIC_VECTOR (22 downto 0);
    a_coeffs_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    a_coeffs_offset1 : IN STD_LOGIC_VECTOR (2 downto 0);
    seed_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    seed_ce0 : OUT STD_LOGIC;
    seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    seed_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    seed_ce1 : OUT STD_LOGIC;
    seed_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    nonce : IN STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of pqcrystals_dilithium_13 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_148 : STD_LOGIC_VECTOR (8 downto 0) := "101001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv11_348 : STD_LOGIC_VECTOR (10 downto 0) := "01101001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv64_1F0000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000111110000000000000000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv10_A8 : STD_LOGIC_VECTOR (9 downto 0) := "0010101000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_A8 : STD_LOGIC_VECTOR (7 downto 0) := "10101000";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal reg_682 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_688 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_693 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_698 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_0_fu_703_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_0_reg_1266 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1271 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_21_fu_723_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln416_fu_745_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln416_reg_1287 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln_fu_755_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_1292 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln416_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_s_addr_11_reg_1312 : STD_LOGIC_VECTOR (4 downto 0);
    signal seed_load_reg_1317 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal seed_load_1_reg_1322 : STD_LOGIC_VECTOR (7 downto 0);
    signal seed_load_2_reg_1337 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal seed_load_3_reg_1342 : STD_LOGIC_VECTOR (7 downto 0);
    signal seed_load_4_reg_1357 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal seed_load_5_reg_1362 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln375_fu_880_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln375_reg_1392 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln474_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln375_1_fu_884_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln375_1_reg_1397 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_fu_894_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1405 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln477_fu_912_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln477_reg_1410 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln476_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln478_fu_923_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln479_fu_929_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln48_11_reg_1437 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_rej_uniform_fu_581_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_rej_uniform_fu_581_ap_ready : STD_LOGIC;
    signal grp_rej_uniform_fu_581_ap_done : STD_LOGIC;
    signal zext_ln377_fu_1018_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln377_reg_1447 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln378_fu_1044_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln378_reg_1455 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal trunc_ln378_1_fu_1048_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln378_1_reg_1461 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln380_fu_1056_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln380_reg_1466 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_22_fu_1070_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_22_reg_1474 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal icmp_ln379_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln476_fu_1101_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln476_reg_1487 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal or_ln477_fu_1115_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln477_reg_1492 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln476_1_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln383_fu_1130_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln383_reg_1504 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln384_fu_1138_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln384_reg_1509 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln384_fu_1145_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln384_reg_1514 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln48_s_reg_1519 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln477_6_fu_1185_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln477_6_reg_1524 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ctr_2_fu_1250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_ce0 : STD_LOGIC;
    signal buf_we0 : STD_LOGIC;
    signal buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_ce1 : STD_LOGIC;
    signal buf_we1 : STD_LOGIC;
    signal buf_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_ce0 : STD_LOGIC;
    signal state_s_we0 : STD_LOGIC;
    signal state_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_s_ce1 : STD_LOGIC;
    signal state_s_we1 : STD_LOGIC;
    signal state_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_574_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_574_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_574_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_574_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_574_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_574_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_574_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_574_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_574_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_574_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_574_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_574_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_rej_uniform_fu_581_ap_start : STD_LOGIC;
    signal grp_rej_uniform_fu_581_ap_idle : STD_LOGIC;
    signal grp_rej_uniform_fu_581_a_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_rej_uniform_fu_581_a_ce0 : STD_LOGIC;
    signal grp_rej_uniform_fu_581_a_we0 : STD_LOGIC;
    signal grp_rej_uniform_fu_581_a_d0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_rej_uniform_fu_581_a_offset2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rej_uniform_fu_581_len : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_rej_uniform_fu_581_buf_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_rej_uniform_fu_581_buf_r_ce0 : STD_LOGIC;
    signal grp_rej_uniform_fu_581_buf_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_rej_uniform_fu_581_buf_r_ce1 : STD_LOGIC;
    signal grp_rej_uniform_fu_581_buflen : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_shake128_absorb_fu_597_ap_start : STD_LOGIC;
    signal grp_shake128_absorb_fu_597_ap_done : STD_LOGIC;
    signal grp_shake128_absorb_fu_597_ap_idle : STD_LOGIC;
    signal grp_shake128_absorb_fu_597_ap_ready : STD_LOGIC;
    signal grp_shake128_absorb_fu_597_state_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake128_absorb_fu_597_state_s_ce0 : STD_LOGIC;
    signal grp_shake128_absorb_fu_597_state_s_we0 : STD_LOGIC;
    signal grp_shake128_absorb_fu_597_state_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_i_i_i_reg_472 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln362_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_i_i_reg_483 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_01_i_i3_reg_494 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_0_rec_i_i4_reg_506 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_i_i5_reg_518 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ctr_0_reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal buflen_0_reg_539 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_0_reg_551 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal i_0_i_i_0_reg_563 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_574_ap_start_reg : STD_LOGIC := '0';
    signal grp_rej_uniform_fu_581_ap_start_reg : STD_LOGIC := '0';
    signal grp_shake128_absorb_fu_597_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln363_fu_729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln417_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_fu_734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_19_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_20_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_21_fu_804_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_22_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_23_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_24_fu_834_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln477_2_fu_918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln477_4_fu_935_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_7_fu_959_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln48_8_fu_969_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_9_fu_979_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln48_10_fu_989_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_11_fu_999_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_12_fu_1009_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln380_fu_1085_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln380_1_fu_1090_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln477_3_fu_1120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_1153_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_16_fu_1180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_13_fu_1194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_14_fu_1205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_15_fu_1215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal zext_ln48_17_fu_1225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_18_fu_1235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_19_fu_1245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln417_fu_853_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln450_fu_860_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln451_fu_867_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln48_fu_939_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln48_22_fu_1162_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln417_fu_751_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln31_fu_768_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_1_fu_779_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_2_fu_789_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_3_fu_799_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_4_fu_809_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_5_fu_819_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_6_fu_829_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_7_i_i_fu_839_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln5_fu_900_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln477_fu_908_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln48_fu_944_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln48_7_fu_954_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln48_8_fu_964_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln48_9_fu_974_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln48_10_fu_984_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln48_11_fu_994_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln48_12_fu_1004_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln377_fu_1014_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_256_fu_1022_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1038_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1038_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln378_fu_1052_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln379_fu_1061_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln380_fu_1076_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln380_fu_1081_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln477_1_fu_1107_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buflen_fu_1125_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln384_fu_1134_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln477_5_fu_1150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln48_14_fu_1167_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_s_fu_1172_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_fu_1188_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln48_1_fu_1199_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln48_2_fu_1210_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln48_3_fu_1220_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln48_4_fu_1230_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln48_5_fu_1240_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln377_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1038_ap_start : STD_LOGIC;
    signal grp_fu_1038_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);

    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component rej_uniform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (22 downto 0);
        a_offset : IN STD_LOGIC_VECTOR (1 downto 0);
        a_offset1 : IN STD_LOGIC_VECTOR (1 downto 0);
        a_offset2 : IN STD_LOGIC_VECTOR (31 downto 0);
        len : IN STD_LOGIC_VECTOR (9 downto 0);
        buf_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        buflen : IN STD_LOGIC_VECTOR (10 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component shake128_absorb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_s_ce0 : OUT STD_LOGIC;
        state_s_we0 : OUT STD_LOGIC;
        state_s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        in_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        in_1_read : IN STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component pqcrystals_dilithfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component pqcrystals_dilithdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component shake256_state_0_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    buf_U : component pqcrystals_dilithdEe
    generic map (
        DataWidth => 8,
        AddressRange => 842,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_address0,
        ce0 => buf_ce0,
        we0 => buf_we0,
        d0 => buf_d0,
        q0 => buf_q0,
        address1 => buf_address1,
        ce1 => buf_ce1,
        we1 => buf_we1,
        d1 => buf_d1,
        q1 => buf_q1);

    state_s_U : component shake256_state_0_s
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_s_address0,
        ce0 => state_s_ce0,
        we0 => state_s_we0,
        d0 => state_s_d0,
        q0 => state_s_q0,
        address1 => state_s_address1,
        ce1 => state_s_ce1,
        we1 => state_s_we1,
        d1 => state_s_d1,
        q1 => state_s_q1);

    grp_KeccakF1600_StatePer_1_fu_574 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_574_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_574_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_574_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_574_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_1_fu_574_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_1_fu_574_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_1_fu_574_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_1_fu_574_state_d0,
        state_q0 => state_s_q0,
        state_address1 => grp_KeccakF1600_StatePer_1_fu_574_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_1_fu_574_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_1_fu_574_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_1_fu_574_state_d1,
        state_q1 => state_s_q1);

    grp_rej_uniform_fu_581 : component rej_uniform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_rej_uniform_fu_581_ap_start,
        ap_done => grp_rej_uniform_fu_581_ap_done,
        ap_idle => grp_rej_uniform_fu_581_ap_idle,
        ap_ready => grp_rej_uniform_fu_581_ap_ready,
        a_address0 => grp_rej_uniform_fu_581_a_address0,
        a_ce0 => grp_rej_uniform_fu_581_a_ce0,
        a_we0 => grp_rej_uniform_fu_581_a_we0,
        a_d0 => grp_rej_uniform_fu_581_a_d0,
        a_offset => trunc_ln375_reg_1392,
        a_offset1 => trunc_ln375_1_reg_1397,
        a_offset2 => grp_rej_uniform_fu_581_a_offset2,
        len => grp_rej_uniform_fu_581_len,
        buf_r_address0 => grp_rej_uniform_fu_581_buf_r_address0,
        buf_r_ce0 => grp_rej_uniform_fu_581_buf_r_ce0,
        buf_r_q0 => buf_q0,
        buf_r_address1 => grp_rej_uniform_fu_581_buf_r_address1,
        buf_r_ce1 => grp_rej_uniform_fu_581_buf_r_ce1,
        buf_r_q1 => buf_q1,
        buflen => grp_rej_uniform_fu_581_buflen,
        ap_return => grp_rej_uniform_fu_581_ap_return);

    grp_shake128_absorb_fu_597 : component shake128_absorb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake128_absorb_fu_597_ap_start,
        ap_done => grp_shake128_absorb_fu_597_ap_done,
        ap_idle => grp_shake128_absorb_fu_597_ap_idle,
        ap_ready => grp_shake128_absorb_fu_597_ap_ready,
        state_s_address0 => grp_shake128_absorb_fu_597_state_s_address0,
        state_s_ce0 => grp_shake128_absorb_fu_597_state_s_ce0,
        state_s_we0 => grp_shake128_absorb_fu_597_state_s_we0,
        state_s_d0 => grp_shake128_absorb_fu_597_state_s_d0,
        state_s_q0 => state_s_q0,
        in_0_read => t_0_reg_1266,
        in_1_read => tmp_s_reg_1271);

    pqcrystals_dilithfYi_U32 : component pqcrystals_dilithfYi
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 3,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1038_ap_start,
        done => grp_fu_1038_ap_done,
        din0 => buflen_0_reg_539,
        din1 => grp_fu_1038_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1038_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_574_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_574_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln379_fu_1065_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln474_fu_874_p2 = ap_const_lv1_0)))) then 
                    grp_KeccakF1600_StatePer_1_fu_574_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_574_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_574_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_rej_uniform_fu_581_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_rej_uniform_fu_581_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln476_1_fu_1095_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln474_fu_874_p2 = ap_const_lv1_1)))) then 
                    grp_rej_uniform_fu_581_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_rej_uniform_fu_581_ap_ready = ap_const_logic_1)) then 
                    grp_rej_uniform_fu_581_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake128_absorb_fu_597_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake128_absorb_fu_597_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln416_fu_739_p2 = ap_const_lv1_1))) then 
                    grp_shake128_absorb_fu_597_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake128_absorb_fu_597_ap_ready = ap_const_logic_1)) then 
                    grp_shake128_absorb_fu_597_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    buflen_0_reg_539_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_rej_uniform_fu_581_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                                        buflen_0_reg_539(2 downto 0) <= zext_ln383_reg_1504(2 downto 0);                    buflen_0_reg_539(8 downto 4) <= zext_ln383_reg_1504(8 downto 4);
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    buflen_0_reg_539(0) <= '0';
                    buflen_0_reg_539(1) <= '0';
                    buflen_0_reg_539(2) <= '0';
                    buflen_0_reg_539(4) <= '0';
                    buflen_0_reg_539(5) <= '0';
                    buflen_0_reg_539(6) <= '1';
                    buflen_0_reg_539(7) <= '0';
                    buflen_0_reg_539(8) <= '1';
                end if;
            end if; 
        end if;
    end process;

    ctr_0_reg_529_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_rej_uniform_fu_581_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                    ctr_0_reg_529 <= ctr_2_fu_1250_p2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ctr_0_reg_529 <= grp_rej_uniform_fu_581_ap_return;
                end if;
            end if; 
        end if;
    end process;

    i_0_i_i5_reg_518_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_0_i_i5_reg_518 <= i_reg_1405;
            elsif (((grp_KeccakF1600_StatePer_1_fu_574_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_0_i_i5_reg_518 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_i_0_reg_563_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                i_0_i_i_0_reg_563 <= add_ln476_reg_1487;
            elsif (((grp_KeccakF1600_StatePer_1_fu_574_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                i_0_i_i_0_reg_563 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_i_i_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln362_fu_717_p2 = ap_const_lv1_0))) then 
                i_0_i_i_i_reg_472 <= i_21_fu_723_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_i_i_reg_472 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_551_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                i_0_reg_551 <= i_22_reg_1474;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                i_0_reg_551 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_3_i_i_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln362_fu_717_p2 = ap_const_lv1_1))) then 
                i_3_i_i_reg_483 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_3_i_i_reg_483 <= add_ln416_reg_1287;
            end if; 
        end if;
    end process;

    p_01_i_i3_reg_494_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln476_fu_888_p2 = ap_const_lv1_1))) then 
                p_01_i_i3_reg_494 <= add_ln479_fu_929_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_01_i_i3_reg_494 <= ap_const_lv3_5;
            end if; 
        end if;
    end process;

    p_0_rec_i_i4_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln476_fu_888_p2 = ap_const_lv1_1))) then 
                p_0_rec_i_i4_reg_506 <= add_ln478_fu_923_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_0_rec_i_i4_reg_506 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln416_reg_1287 <= add_ln416_fu_745_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                add_ln476_reg_1487 <= add_ln476_fu_1101_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln476_fu_888_p2 = ap_const_lv1_0))) then
                add_ln477_reg_1410 <= add_ln477_fu_912_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                i_22_reg_1474 <= i_22_fu_1070_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_reg_1405 <= i_fu_894_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln476_1_fu_1095_p2 = ap_const_lv1_0))) then
                or_ln477_reg_1492 <= or_ln477_fu_1115_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_676 <= state_s_q1(23 downto 16);
                reg_682 <= state_s_q1(31 downto 24);
                reg_688 <= state_s_q1(47 downto 40);
                reg_693 <= state_s_q1(55 downto 48);
                reg_698 <= state_s_q1(63 downto 56);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                seed_load_1_reg_1322 <= seed_q1;
                seed_load_reg_1317 <= seed_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                seed_load_2_reg_1337 <= seed_q0;
                seed_load_3_reg_1342 <= seed_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                seed_load_4_reg_1357 <= seed_q0;
                seed_load_5_reg_1362 <= seed_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln416_fu_739_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_1292(4 downto 3) <= shl_ln_fu_755_p3(4 downto 3);
                    state_s_addr_11_reg_1312(2 downto 0) <= zext_ln416_fu_734_p1(5 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                sub_ln380_reg_1466 <= sub_ln380_fu_1056_p2;
                trunc_ln378_1_reg_1461 <= trunc_ln378_1_fu_1048_p1;
                trunc_ln378_reg_1455 <= trunc_ln378_fu_1044_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln476_1_fu_1095_p2 = ap_const_lv1_1))) then
                sub_ln384_reg_1509 <= sub_ln384_fu_1138_p2;
                    zext_ln383_reg_1504(2 downto 0) <= zext_ln383_fu_1130_p1(2 downto 0);    zext_ln383_reg_1504(4) <= zext_ln383_fu_1130_p1(4);    zext_ln383_reg_1504(6) <= zext_ln383_fu_1130_p1(6);
                    zext_ln384_reg_1514(2 downto 0) <= zext_ln384_fu_1145_p1(2 downto 0);    zext_ln384_reg_1514(4) <= zext_ln384_fu_1145_p1(4);    zext_ln384_reg_1514(6) <= zext_ln384_fu_1145_p1(6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                t_0_reg_1266 <= t_0_fu_703_p1;
                tmp_s_reg_1271 <= nonce(9 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln474_fu_874_p2 = ap_const_lv1_1))) then
                trunc_ln375_1_reg_1397 <= trunc_ln375_1_fu_884_p1;
                trunc_ln375_reg_1392 <= trunc_ln375_fu_880_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                trunc_ln48_11_reg_1437 <= state_s_q1(39 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                trunc_ln48_s_reg_1519 <= state_s_q1(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                    zext_ln377_reg_1447(2 downto 0) <= zext_ln377_fu_1018_p1(2 downto 0);    zext_ln377_reg_1447(9 downto 4) <= zext_ln377_fu_1018_p1(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                    zext_ln477_6_reg_1524(7 downto 0) <= zext_ln477_6_fu_1185_p1(7 downto 0);
            end if;
        end if;
    end process;
    shl_ln_reg_1292(2 downto 0) <= "000";
    state_s_addr_11_reg_1312(4 downto 3) <= "00";
    zext_ln377_reg_1447(3) <= '1';
    zext_ln377_reg_1447(10) <= '0';
    zext_ln383_reg_1504(3) <= '1';
    zext_ln383_reg_1504(5 downto 5) <= "1";
    zext_ln383_reg_1504(8 downto 7) <= "01";
    zext_ln384_reg_1514(3) <= '1';
    zext_ln384_reg_1514(5 downto 5) <= "1";
    zext_ln384_reg_1514(10 downto 7) <= "0001";
    zext_ln477_6_reg_1524(8) <= '0';
    buflen_0_reg_539(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln416_fu_739_p2, ap_CS_fsm_state11, icmp_ln474_fu_874_p2, ap_CS_fsm_state13, icmp_ln476_fu_888_p2, ap_CS_fsm_state18, grp_rej_uniform_fu_581_ap_done, ap_CS_fsm_state19, ap_CS_fsm_state32, icmp_ln379_fu_1065_p2, ap_CS_fsm_state35, icmp_ln476_1_fu_1095_p2, ap_CS_fsm_state40, grp_KeccakF1600_StatePer_1_fu_574_ap_done, grp_shake128_absorb_fu_597_ap_done, icmp_ln362_fu_717_p2, ap_CS_fsm_state12, ap_CS_fsm_state34, ap_CS_fsm_state8, icmp_ln377_fu_1032_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln362_fu_717_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln416_fu_739_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state8 => 
                if (((grp_shake128_absorb_fu_597_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln474_fu_874_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((grp_KeccakF1600_StatePer_1_fu_574_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln476_fu_888_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state18 => 
                if (((grp_rej_uniform_fu_581_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln377_fu_1032_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln379_fu_1065_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state34 => 
                if (((grp_KeccakF1600_StatePer_1_fu_574_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln476_1_fu_1095_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state40 => 
                if (((grp_rej_uniform_fu_581_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_coeffs_address0 <= grp_rej_uniform_fu_581_a_address0;

    a_coeffs_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state40, grp_rej_uniform_fu_581_a_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            a_coeffs_ce0 <= grp_rej_uniform_fu_581_a_ce0;
        else 
            a_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_coeffs_d0 <= grp_rej_uniform_fu_581_a_d0;

    a_coeffs_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state40, grp_rej_uniform_fu_581_a_we0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            a_coeffs_we0 <= grp_rej_uniform_fu_581_a_we0;
        else 
            a_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln380_fu_1076_p2 <= std_logic_vector(unsigned(sub_ln380_reg_1466) + unsigned(zext_ln379_fu_1061_p1));
    add_ln416_fu_745_p2 <= std_logic_vector(unsigned(i_3_i_i_reg_483) + unsigned(ap_const_lv3_1));
    add_ln476_fu_1101_p2 <= std_logic_vector(unsigned(i_0_i_i_0_reg_563) + unsigned(ap_const_lv5_1));
    add_ln477_fu_912_p2 <= std_logic_vector(unsigned(p_0_rec_i_i4_reg_506) + unsigned(zext_ln477_fu_908_p1));
    add_ln478_fu_923_p2 <= std_logic_vector(unsigned(p_0_rec_i_i4_reg_506) + unsigned(ap_const_lv10_A8));
    add_ln479_fu_929_p2 <= std_logic_vector(unsigned(p_01_i_i3_reg_494) + unsigned(ap_const_lv3_7));
    add_ln48_1_fu_1199_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(zext_ln477_6_fu_1185_p1));
    add_ln48_2_fu_1210_p2 <= std_logic_vector(unsigned(ap_const_lv9_3) + unsigned(zext_ln477_6_reg_1524));
    add_ln48_3_fu_1220_p2 <= std_logic_vector(unsigned(ap_const_lv9_5) + unsigned(zext_ln477_6_reg_1524));
    add_ln48_4_fu_1230_p2 <= std_logic_vector(unsigned(ap_const_lv9_6) + unsigned(zext_ln477_6_reg_1524));
    add_ln48_5_fu_1240_p2 <= std_logic_vector(unsigned(ap_const_lv9_7) + unsigned(zext_ln477_6_reg_1524));
    add_ln48_fu_1188_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(zext_ln477_6_fu_1185_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19, icmp_ln377_fu_1032_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln377_fu_1032_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, icmp_ln377_fu_1032_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln377_fu_1032_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buf_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state36, ap_CS_fsm_state18, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state40, grp_rej_uniform_fu_581_buf_r_address0, ap_CS_fsm_state17, ap_CS_fsm_state39, zext_ln477_4_fu_935_p1, zext_ln48_7_fu_959_p1, ap_CS_fsm_state15, zext_ln48_9_fu_979_p1, ap_CS_fsm_state16, zext_ln48_11_fu_999_p1, zext_ln380_fu_1085_p1, or_ln_fu_1153_p3, zext_ln48_13_fu_1194_p1, zext_ln48_15_fu_1215_p1, ap_CS_fsm_state38, zext_ln48_18_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            buf_address0 <= zext_ln48_18_fu_1235_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            buf_address0 <= zext_ln48_15_fu_1215_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            buf_address0 <= zext_ln48_13_fu_1194_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            buf_address0 <= or_ln_fu_1153_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            buf_address0 <= zext_ln380_fu_1085_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            buf_address0 <= zext_ln48_11_fu_999_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buf_address0 <= zext_ln48_9_fu_979_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf_address0 <= zext_ln48_7_fu_959_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_address0 <= zext_ln477_4_fu_935_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            buf_address0 <= grp_rej_uniform_fu_581_buf_r_address0;
        else 
            buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buf_address1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state36, ap_CS_fsm_state18, ap_CS_fsm_state37, ap_CS_fsm_state40, grp_rej_uniform_fu_581_buf_r_address1, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state39, zext_ln48_fu_949_p1, ap_CS_fsm_state15, zext_ln48_8_fu_969_p1, ap_CS_fsm_state16, zext_ln48_10_fu_989_p1, zext_ln48_12_fu_1009_p1, zext_ln380_1_fu_1090_p1, zext_ln48_16_fu_1180_p1, zext_ln48_14_fu_1205_p1, ap_CS_fsm_state38, zext_ln48_17_fu_1225_p1, zext_ln48_19_fu_1245_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            buf_address1 <= zext_ln48_19_fu_1245_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            buf_address1 <= zext_ln48_17_fu_1225_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            buf_address1 <= zext_ln48_14_fu_1205_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            buf_address1 <= zext_ln48_16_fu_1180_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            buf_address1 <= zext_ln380_1_fu_1090_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            buf_address1 <= zext_ln48_12_fu_1009_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buf_address1 <= zext_ln48_10_fu_989_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf_address1 <= zext_ln48_8_fu_969_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_address1 <= zext_ln48_fu_949_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            buf_address1 <= grp_rej_uniform_fu_581_buf_r_address1;
        else 
            buf_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    buf_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state36, ap_CS_fsm_state18, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state40, grp_rej_uniform_fu_581_buf_r_ce0, ap_CS_fsm_state17, ap_CS_fsm_state39, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            buf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            buf_ce0 <= grp_rej_uniform_fu_581_buf_r_ce0;
        else 
            buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_ce1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state36, ap_CS_fsm_state18, ap_CS_fsm_state37, ap_CS_fsm_state40, grp_rej_uniform_fu_581_buf_r_ce1, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state39, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            buf_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            buf_ce1 <= grp_rej_uniform_fu_581_buf_r_ce1;
        else 
            buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_d0_assign_proc : process(reg_676, ap_CS_fsm_state14, ap_CS_fsm_state36, reg_682, reg_693, trunc_ln48_11_reg_1437, trunc_ln48_s_reg_1519, ap_CS_fsm_state37, ap_CS_fsm_state17, ap_CS_fsm_state39, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state38, trunc_ln48_fu_939_p1, trunc_ln48_22_fu_1162_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            buf_d0 <= reg_682;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            buf_d0 <= trunc_ln48_s_reg_1519;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            buf_d0 <= trunc_ln48_22_fu_1162_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            buf_d0 <= reg_693;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buf_d0 <= trunc_ln48_11_reg_1437;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf_d0 <= reg_676;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_d0 <= trunc_ln48_fu_939_p1;
        else 
            buf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buf_d1_assign_proc : process(reg_676, ap_CS_fsm_state14, ap_CS_fsm_state36, reg_682, reg_688, reg_698, ap_CS_fsm_state37, buf_q0, state_s_q1, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state39, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            buf_d1 <= reg_676;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            buf_d1 <= state_s_q1(39 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            buf_d1 <= buf_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            buf_d1 <= reg_698;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_d1 <= reg_688;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf_d1 <= reg_682;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_d1 <= state_s_q1(15 downto 8);
        else 
            buf_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state17, ap_CS_fsm_state39, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            buf_we0 <= ap_const_logic_1;
        else 
            buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_we1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state39, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            buf_we1 <= ap_const_logic_1;
        else 
            buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buflen_fu_1125_p2 <= (trunc_ln378_reg_1455 or ap_const_lv8_A8);
    ctr_2_fu_1250_p2 <= std_logic_vector(unsigned(grp_rej_uniform_fu_581_ap_return) + unsigned(ctr_0_reg_529));
    grp_KeccakF1600_StatePer_1_fu_574_ap_start <= grp_KeccakF1600_StatePer_1_fu_574_ap_start_reg;

    grp_fu_1038_ap_start_assign_proc : process(ap_CS_fsm_state19, icmp_ln377_fu_1032_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln377_fu_1032_p2 = ap_const_lv1_1))) then 
            grp_fu_1038_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1038_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1038_p1 <= ap_const_lv9_3(3 - 1 downto 0);

    grp_rej_uniform_fu_581_a_offset2_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state40, ctr_0_reg_529)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_rej_uniform_fu_581_a_offset2 <= ctr_0_reg_529;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_rej_uniform_fu_581_a_offset2 <= ap_const_lv32_0;
        else 
            grp_rej_uniform_fu_581_a_offset2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_rej_uniform_fu_581_ap_start <= grp_rej_uniform_fu_581_ap_start_reg;

    grp_rej_uniform_fu_581_buflen_assign_proc : process(ap_CS_fsm_state18, zext_ln384_reg_1514, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_rej_uniform_fu_581_buflen <= zext_ln384_reg_1514;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_rej_uniform_fu_581_buflen <= ap_const_lv11_348;
        else 
            grp_rej_uniform_fu_581_buflen <= "XXXXXXXXXXX";
        end if; 
    end process;


    grp_rej_uniform_fu_581_len_assign_proc : process(ap_CS_fsm_state18, sub_ln384_reg_1509, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_rej_uniform_fu_581_len <= sub_ln384_reg_1509;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_rej_uniform_fu_581_len <= ap_const_lv10_100;
        else 
            grp_rej_uniform_fu_581_len <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_shake128_absorb_fu_597_ap_start <= grp_shake128_absorb_fu_597_ap_start_reg;
    i_21_fu_723_p2 <= std_logic_vector(unsigned(i_0_i_i_i_reg_472) + unsigned(ap_const_lv5_1));
    i_22_fu_1070_p2 <= std_logic_vector(unsigned(i_0_reg_551) + unsigned(ap_const_lv2_1));
    i_fu_894_p2 <= std_logic_vector(unsigned(i_0_i_i5_reg_518) + unsigned(ap_const_lv5_1));
    icmp_ln362_fu_717_p2 <= "1" when (i_0_i_i_i_reg_472 = ap_const_lv5_19) else "0";
    icmp_ln377_fu_1032_p2 <= "1" when (tmp_256_fu_1022_p4 = ap_const_lv24_0) else "0";
    icmp_ln379_fu_1065_p2 <= "1" when (i_0_reg_551 = trunc_ln378_1_reg_1461) else "0";
    icmp_ln416_fu_739_p2 <= "1" when (i_3_i_i_reg_483 = ap_const_lv3_4) else "0";
    icmp_ln474_fu_874_p2 <= "1" when (p_01_i_i3_reg_494 = ap_const_lv3_0) else "0";
    icmp_ln476_1_fu_1095_p2 <= "1" when (i_0_i_i_0_reg_563 = ap_const_lv5_15) else "0";
    icmp_ln476_fu_888_p2 <= "1" when (i_0_i_i5_reg_518 = ap_const_lv5_15) else "0";
    or_ln31_1_fu_779_p2 <= (shl_ln_reg_1292 or ap_const_lv5_2);
    or_ln31_2_fu_789_p2 <= (shl_ln_reg_1292 or ap_const_lv5_3);
    or_ln31_3_fu_799_p2 <= (shl_ln_reg_1292 or ap_const_lv5_4);
    or_ln31_4_fu_809_p2 <= (shl_ln_reg_1292 or ap_const_lv5_5);
    or_ln31_5_fu_819_p2 <= (shl_ln_reg_1292 or ap_const_lv5_6);
    or_ln31_6_fu_829_p2 <= (shl_ln_reg_1292 or ap_const_lv5_7);
    or_ln31_fu_768_p2 <= (shl_ln_fu_755_p3 or ap_const_lv5_1);
    or_ln477_fu_1115_p2 <= (trunc_ln378_reg_1455 or shl_ln477_1_fu_1107_p3);
    or_ln48_10_fu_984_p2 <= (ap_const_lv10_5 or add_ln477_reg_1410);
    or_ln48_11_fu_994_p2 <= (ap_const_lv10_6 or add_ln477_reg_1410);
    or_ln48_12_fu_1004_p2 <= (ap_const_lv10_7 or add_ln477_reg_1410);
    or_ln48_14_fu_1167_p2 <= (or_ln477_reg_1492 or ap_const_lv8_4);
    or_ln48_7_fu_954_p2 <= (ap_const_lv10_2 or add_ln477_reg_1410);
    or_ln48_8_fu_964_p2 <= (ap_const_lv10_3 or add_ln477_reg_1410);
    or_ln48_9_fu_974_p2 <= (ap_const_lv10_4 or add_ln477_reg_1410);
    or_ln48_fu_944_p2 <= (ap_const_lv10_1 or add_ln477_reg_1410);
    or_ln48_s_fu_1172_p3 <= (ap_const_lv3_0 & or_ln48_14_fu_1167_p2);
    or_ln_fu_1153_p3 <= (ap_const_lv32_0 & zext_ln477_5_fu_1150_p1);
    r_7_i_i_fu_839_p9 <= (((((((seed_q1 & seed_q0) & seed_load_5_reg_1362) & seed_load_4_reg_1357) & seed_load_3_reg_1342) & seed_load_2_reg_1337) & seed_load_1_reg_1322) & seed_load_reg_1317);

    seed_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln417_fu_763_p1, zext_ln31_19_fu_784_p1, zext_ln31_21_fu_804_p1, zext_ln31_23_fu_824_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_address0 <= zext_ln31_23_fu_824_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            seed_address0 <= zext_ln31_21_fu_804_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_address0 <= zext_ln31_19_fu_784_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seed_address0 <= zext_ln417_fu_763_p1(8 - 1 downto 0);
        else 
            seed_address0 <= "XXXXXXXX";
        end if; 
    end process;


    seed_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln31_fu_774_p1, zext_ln31_20_fu_794_p1, zext_ln31_22_fu_814_p1, zext_ln31_24_fu_834_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_address1 <= zext_ln31_24_fu_834_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            seed_address1 <= zext_ln31_22_fu_814_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_address1 <= zext_ln31_20_fu_794_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seed_address1 <= zext_ln31_fu_774_p1(8 - 1 downto 0);
        else 
            seed_address1 <= "XXXXXXXX";
        end if; 
    end process;


    seed_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            seed_ce0 <= ap_const_logic_1;
        else 
            seed_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            seed_ce1 <= ap_const_logic_1;
        else 
            seed_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln377_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(buflen_0_reg_539),10));

        sext_ln380_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln380_fu_1076_p2),32));

    shl_ln477_1_fu_1107_p3 <= (i_0_i_i_0_reg_563 & ap_const_lv3_0);
    shl_ln5_fu_900_p3 <= (i_0_i_i5_reg_518 & ap_const_lv3_0);
    shl_ln_fu_755_p3 <= (trunc_ln417_fu_751_p1 & ap_const_lv3_0);

    state_s_address0_assign_proc : process(ap_CS_fsm_state2, state_s_addr_11_reg_1312, ap_CS_fsm_state6, ap_CS_fsm_state9, grp_KeccakF1600_StatePer_1_fu_574_state_address0, grp_shake128_absorb_fu_597_state_s_address0, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state34, ap_CS_fsm_state8, zext_ln363_fu_729_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_s_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_s_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_s_address0 <= state_s_addr_11_reg_1312;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_s_address0 <= zext_ln363_fu_729_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_address0 <= grp_shake128_absorb_fu_597_state_s_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_address0 <= grp_KeccakF1600_StatePer_1_fu_574_state_address0;
        else 
            state_s_address0 <= "XXXXX";
        end if; 
    end process;


    state_s_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state35, grp_KeccakF1600_StatePer_1_fu_574_state_address1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state34, zext_ln477_2_fu_918_p1, zext_ln477_3_fu_1120_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            state_s_address1 <= zext_ln477_3_fu_1120_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_s_address1 <= zext_ln477_2_fu_918_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_s_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_s_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_address1 <= grp_KeccakF1600_StatePer_1_fu_574_state_address1;
        else 
            state_s_address1 <= "XXXXX";
        end if; 
    end process;


    state_s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state9, grp_KeccakF1600_StatePer_1_fu_574_state_ce0, grp_shake128_absorb_fu_597_state_s_ce0, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state34, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_ce0 <= grp_shake128_absorb_fu_597_state_s_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_ce0 <= grp_KeccakF1600_StatePer_1_fu_574_state_ce0;
        else 
            state_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state35, grp_KeccakF1600_StatePer_1_fu_574_state_ce1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_s_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_ce1 <= grp_KeccakF1600_StatePer_1_fu_574_state_ce1;
        else 
            state_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_d0_assign_proc : process(ap_CS_fsm_state2, grp_KeccakF1600_StatePer_1_fu_574_state_d0, grp_shake128_absorb_fu_597_state_s_d0, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state34, ap_CS_fsm_state8, xor_ln417_fu_853_p2, xor_ln451_fu_867_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_s_d0 <= xor_ln451_fu_867_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_s_d0 <= xor_ln417_fu_853_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_s_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_d0 <= grp_shake128_absorb_fu_597_state_s_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_d0 <= grp_KeccakF1600_StatePer_1_fu_574_state_d0;
        else 
            state_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_s_d1_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_574_state_d1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state34, xor_ln450_fu_860_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_s_d1 <= xor_ln450_fu_860_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_d1 <= grp_KeccakF1600_StatePer_1_fu_574_state_d1;
        else 
            state_s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_s_we0_assign_proc : process(ap_CS_fsm_state2, grp_KeccakF1600_StatePer_1_fu_574_state_we0, grp_shake128_absorb_fu_597_state_s_we0, icmp_ln362_fu_717_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state34, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln362_fu_717_p2 = ap_const_lv1_0)))) then 
            state_s_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_s_we0 <= grp_shake128_absorb_fu_597_state_s_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_we0 <= grp_KeccakF1600_StatePer_1_fu_574_state_we0;
        else 
            state_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_s_we1_assign_proc : process(grp_KeccakF1600_StatePer_1_fu_574_state_we1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_s_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_s_we1 <= grp_KeccakF1600_StatePer_1_fu_574_state_we1;
        else 
            state_s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln380_fu_1056_p2 <= std_logic_vector(unsigned(zext_ln377_reg_1447) - unsigned(zext_ln378_fu_1052_p1));
    sub_ln384_fu_1138_p2 <= std_logic_vector(unsigned(ap_const_lv10_100) - unsigned(trunc_ln384_fu_1134_p1));
    t_0_fu_703_p1 <= nonce(8 - 1 downto 0);
    tmp_256_fu_1022_p4 <= ctr_0_reg_529(31 downto 8);
    trunc_ln375_1_fu_884_p1 <= a_coeffs_offset1(2 - 1 downto 0);
    trunc_ln375_fu_880_p1 <= a_coeffs_offset(2 - 1 downto 0);
    trunc_ln378_1_fu_1048_p1 <= grp_fu_1038_p2(2 - 1 downto 0);
    trunc_ln378_fu_1044_p1 <= grp_fu_1038_p2(8 - 1 downto 0);
    trunc_ln384_fu_1134_p1 <= ctr_0_reg_529(10 - 1 downto 0);
    trunc_ln417_fu_751_p1 <= i_3_i_i_reg_483(2 - 1 downto 0);
    trunc_ln48_22_fu_1162_p1 <= state_s_q1(8 - 1 downto 0);
    trunc_ln48_fu_939_p1 <= state_s_q1(8 - 1 downto 0);
    xor_ln417_fu_853_p2 <= (state_s_q0 xor r_7_i_i_fu_839_p9);
    xor_ln450_fu_860_p2 <= (state_s_q0 xor ap_const_lv64_1F0000);
    xor_ln451_fu_867_p2 <= (state_s_q1 xor ap_const_lv64_8000000000000000);
    zext_ln31_19_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_1_fu_779_p2),64));
    zext_ln31_20_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_2_fu_789_p2),64));
    zext_ln31_21_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_3_fu_799_p2),64));
    zext_ln31_22_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_4_fu_809_p2),64));
    zext_ln31_23_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_5_fu_819_p2),64));
    zext_ln31_24_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_6_fu_829_p2),64));
    zext_ln31_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_fu_768_p2),64));
    zext_ln363_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_i_reg_472),64));
    zext_ln377_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln377_fu_1014_p1),11));
    zext_ln378_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1038_p2),11));
    zext_ln379_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_551),11));
    zext_ln380_1_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_551),64));
    zext_ln380_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln380_fu_1081_p1),64));
    zext_ln383_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buflen_fu_1125_p2),9));
    zext_ln384_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buflen_fu_1125_p2),11));
    zext_ln416_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i_i_reg_483),64));
    zext_ln417_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_755_p3),64));
    zext_ln477_2_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i5_reg_518),64));
    zext_ln477_3_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_0_reg_563),64));
    zext_ln477_4_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln477_reg_1410),64));
    zext_ln477_5_fu_1150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln477_reg_1492),32));
    zext_ln477_6_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln477_reg_1492),9));
    zext_ln477_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_900_p3),10));
    zext_ln48_10_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_10_fu_984_p2),64));
    zext_ln48_11_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_11_fu_994_p2),64));
    zext_ln48_12_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_12_fu_1004_p2),64));
    zext_ln48_13_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_fu_1188_p2),64));
    zext_ln48_14_fu_1205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_1_fu_1199_p2),64));
    zext_ln48_15_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_2_fu_1210_p2),64));
    zext_ln48_16_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_s_fu_1172_p3),64));
    zext_ln48_17_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_3_fu_1220_p2),64));
    zext_ln48_18_fu_1235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_4_fu_1230_p2),64));
    zext_ln48_19_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_5_fu_1240_p2),64));
    zext_ln48_7_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_7_fu_954_p2),64));
    zext_ln48_8_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_8_fu_964_p2),64));
    zext_ln48_9_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_9_fu_974_p2),64));
    zext_ln48_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_fu_944_p2),64));
end behav;
