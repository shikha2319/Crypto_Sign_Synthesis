-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium_23 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    r_ce0 : OUT STD_LOGIC;
    r_we0 : OUT STD_LOGIC;
    r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_offset : IN STD_LOGIC_VECTOR (10 downto 0);
    a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_coeffs_ce0 : OUT STD_LOGIC;
    a_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_coeffs_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of pqcrystals_dilithium_23 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_20000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln810_2_fu_245_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln810_2_reg_670 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln804_fu_249_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln804_reg_683 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_259_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_691 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln805_fu_265_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln805_reg_696 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln804_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln810_fu_299_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln810_reg_707 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln_reg_719 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1_reg_724 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_338_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_729 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln2_reg_740 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln3_reg_745 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln4_reg_755 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln5_reg_760 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln6_reg_770 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln7_reg_775 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln821_1_fu_653_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln821_1_reg_780 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_0_reg_228 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln805_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln810_3_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln806_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln811_1_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln812_1_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln807_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln814_1_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln815_1_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln808_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln817_1_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln818_1_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln820_1_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln821_1_fu_658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln810_fu_283_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln813_fu_413_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln816_fu_506_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln819_fu_599_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_269_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln6_fu_288_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln810_fu_295_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln810_1_fu_304_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln810_1_fu_308_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln806_fu_345_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_351_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln811_fu_363_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln811_fu_368_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln811_1_fu_372_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln812_fu_382_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln812_fu_387_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln812_1_fu_391_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln813_fu_401_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln7_fu_405_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln807_fu_439_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_444_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln814_fu_456_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln814_fu_461_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln814_1_fu_465_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln815_fu_475_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln815_fu_480_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln815_1_fu_484_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln816_fu_494_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln8_fu_498_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln808_fu_532_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_537_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln817_fu_549_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln817_fu_554_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln817_1_fu_558_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln818_fu_568_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln818_fu_573_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln818_1_fu_577_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln819_fu_587_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln9_fu_591_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln820_fu_625_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln820_fu_630_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln820_1_fu_634_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln821_fu_644_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln821_fu_649_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_0_reg_228 <= i_reg_691;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_228 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln810_reg_707 <= add_ln810_fu_299_p2;
                trunc_ln1_reg_724 <= grp_fu_239_p2(23 downto 16);
                trunc_ln_reg_719 <= grp_fu_239_p2(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln821_1_reg_780 <= add_ln821_1_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_691 <= i_fu_259_p2;
                    zext_ln804_reg_683(6 downto 0) <= zext_ln804_fu_249_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    shl_ln_reg_729(7 downto 2) <= shl_ln_fu_338_p3(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln2_reg_740 <= grp_fu_239_p2(13 downto 6);
                trunc_ln3_reg_745 <= grp_fu_239_p2(21 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln4_reg_755 <= grp_fu_239_p2(11 downto 4);
                trunc_ln5_reg_760 <= grp_fu_239_p2(19 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                trunc_ln6_reg_770 <= grp_fu_239_p2(9 downto 2);
                trunc_ln7_reg_775 <= grp_fu_239_p2(17 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln804_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln805_reg_696 <= trunc_ln805_fu_265_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    zext_ln810_2_reg_670(10 downto 0) <= zext_ln810_2_fu_245_p1(10 downto 0);
            end if;
        end if;
    end process;
    zext_ln810_2_reg_670(11) <= '0';
    zext_ln804_reg_683(9 downto 7) <= "000";
    shl_ln_reg_729(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln804_fu_253_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln804_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    a_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, zext_ln805_fu_278_p1, zext_ln806_fu_358_p1, zext_ln807_fu_451_p1, zext_ln808_fu_544_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            a_coeffs_address0 <= zext_ln808_fu_544_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_coeffs_address0 <= zext_ln807_fu_451_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_coeffs_address0 <= zext_ln806_fu_358_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_coeffs_address0 <= zext_ln805_fu_278_p1(10 - 1 downto 0);
        else 
            a_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            a_coeffs_ce0 <= ap_const_logic_1;
        else 
            a_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln810_1_fu_308_p2 <= std_logic_vector(unsigned(zext_ln810_1_fu_304_p1) + unsigned(zext_ln810_2_reg_670));
    add_ln810_fu_299_p2 <= std_logic_vector(unsigned(zext_ln810_fu_295_p1) + unsigned(zext_ln804_reg_683));
    add_ln811_1_fu_372_p2 <= std_logic_vector(unsigned(zext_ln811_fu_368_p1) + unsigned(zext_ln810_2_reg_670));
    add_ln811_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(add_ln810_reg_707));
    add_ln812_1_fu_391_p2 <= std_logic_vector(unsigned(zext_ln812_fu_387_p1) + unsigned(zext_ln810_2_reg_670));
    add_ln812_fu_382_p2 <= std_logic_vector(unsigned(ap_const_lv10_2) + unsigned(add_ln810_reg_707));
    add_ln814_1_fu_465_p2 <= std_logic_vector(unsigned(zext_ln814_fu_461_p1) + unsigned(zext_ln810_2_reg_670));
    add_ln814_fu_456_p2 <= std_logic_vector(unsigned(ap_const_lv10_3) + unsigned(add_ln810_reg_707));
    add_ln815_1_fu_484_p2 <= std_logic_vector(unsigned(zext_ln815_fu_480_p1) + unsigned(zext_ln810_2_reg_670));
    add_ln815_fu_475_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(add_ln810_reg_707));
    add_ln817_1_fu_558_p2 <= std_logic_vector(unsigned(zext_ln817_fu_554_p1) + unsigned(zext_ln810_2_reg_670));
    add_ln817_fu_549_p2 <= std_logic_vector(unsigned(ap_const_lv10_5) + unsigned(add_ln810_reg_707));
    add_ln818_1_fu_577_p2 <= std_logic_vector(unsigned(zext_ln818_fu_573_p1) + unsigned(zext_ln810_2_reg_670));
    add_ln818_fu_568_p2 <= std_logic_vector(unsigned(ap_const_lv10_6) + unsigned(add_ln810_reg_707));
    add_ln820_1_fu_634_p2 <= std_logic_vector(unsigned(zext_ln820_fu_630_p1) + unsigned(zext_ln810_2_reg_670));
    add_ln820_fu_625_p2 <= std_logic_vector(unsigned(ap_const_lv10_7) + unsigned(add_ln810_reg_707));
    add_ln821_1_fu_653_p2 <= std_logic_vector(unsigned(zext_ln821_fu_649_p1) + unsigned(zext_ln810_2_reg_670));
    add_ln821_fu_644_p2 <= std_logic_vector(unsigned(ap_const_lv10_8) + unsigned(add_ln810_reg_707));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln804_fu_253_p2)
    begin
        if ((((icmp_ln804_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln804_fu_253_p2)
    begin
        if (((icmp_ln804_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_239_p2 <= std_logic_vector(unsigned(ap_const_lv32_20000) - unsigned(a_coeffs_q0));
    i_fu_259_p2 <= std_logic_vector(unsigned(i_0_reg_228) + unsigned(ap_const_lv7_1));
    icmp_ln804_fu_253_p2 <= "1" when (i_0_reg_228 = ap_const_lv7_40) else "0";
    or_ln806_fu_345_p2 <= (shl_ln_fu_338_p3 or ap_const_lv8_1);
    or_ln807_fu_439_p2 <= (shl_ln_reg_729 or ap_const_lv8_2);
    or_ln808_fu_532_p2 <= (shl_ln_reg_729 or ap_const_lv8_3);
    or_ln813_fu_413_p2 <= (trunc_ln1_reg_724 or shl_ln7_fu_405_p3);
    or_ln816_fu_506_p2 <= (trunc_ln3_reg_745 or shl_ln8_fu_498_p3);
    or_ln819_fu_599_p2 <= (trunc_ln5_reg_760 or shl_ln9_fu_591_p3);

    r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, zext_ln810_3_fu_313_p1, zext_ln811_1_fu_377_p1, zext_ln812_1_fu_396_p1, zext_ln814_1_fu_470_p1, zext_ln815_1_fu_489_p1, zext_ln817_1_fu_563_p1, zext_ln818_1_fu_582_p1, zext_ln820_1_fu_639_p1, zext_ln821_1_fu_658_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_address0 <= zext_ln821_1_fu_658_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_address0 <= zext_ln820_1_fu_639_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_address0 <= zext_ln818_1_fu_582_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_address0 <= zext_ln817_1_fu_563_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_address0 <= zext_ln815_1_fu_489_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_address0 <= zext_ln814_1_fu_470_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_address0 <= zext_ln812_1_fu_396_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_address0 <= zext_ln811_1_fu_377_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_address0 <= zext_ln810_3_fu_313_p1(13 - 1 downto 0);
        else 
            r_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            r_ce0 <= ap_const_logic_1;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_d0_assign_proc : process(ap_CS_fsm_state3, trunc_ln_reg_719, ap_CS_fsm_state4, trunc_ln2_reg_740, ap_CS_fsm_state5, ap_CS_fsm_state6, trunc_ln4_reg_755, ap_CS_fsm_state7, ap_CS_fsm_state8, trunc_ln6_reg_770, ap_CS_fsm_state9, trunc_ln7_reg_775, ap_CS_fsm_state10, ap_CS_fsm_state11, trunc_ln810_fu_283_p1, or_ln813_fu_413_p2, or_ln816_fu_506_p2, or_ln819_fu_599_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_d0 <= trunc_ln7_reg_775;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_d0 <= trunc_ln6_reg_770;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_d0 <= or_ln819_fu_599_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_d0 <= trunc_ln4_reg_755;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_d0 <= or_ln816_fu_506_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_d0 <= trunc_ln2_reg_740;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_d0 <= or_ln813_fu_413_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_d0 <= trunc_ln_reg_719;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_d0 <= trunc_ln810_fu_283_p1;
        else 
            r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    r_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            r_we0 <= ap_const_logic_1;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln6_fu_288_p3 <= (trunc_ln805_reg_696 & ap_const_lv3_0);
    shl_ln7_fu_405_p3 <= (trunc_ln813_fu_401_p1 & ap_const_lv2_0);
    shl_ln8_fu_498_p3 <= (trunc_ln816_fu_494_p1 & ap_const_lv4_0);
    shl_ln9_fu_591_p3 <= (trunc_ln819_fu_587_p1 & ap_const_lv6_0);
    shl_ln_fu_338_p3 <= (trunc_ln805_reg_696 & ap_const_lv2_0);
    tmp_1_fu_351_p3 <= (a_coeffs_offset & or_ln806_fu_345_p2);
    tmp_2_fu_444_p3 <= (a_coeffs_offset & or_ln807_fu_439_p2);
    tmp_3_fu_537_p3 <= (a_coeffs_offset & or_ln808_fu_532_p2);
    tmp_s_fu_269_p4 <= ((a_coeffs_offset & trunc_ln805_fu_265_p1) & ap_const_lv2_0);
    trunc_ln805_fu_265_p1 <= i_0_reg_228(6 - 1 downto 0);
    trunc_ln810_fu_283_p1 <= grp_fu_239_p2(8 - 1 downto 0);
    trunc_ln813_fu_401_p1 <= grp_fu_239_p2(6 - 1 downto 0);
    trunc_ln816_fu_494_p1 <= grp_fu_239_p2(4 - 1 downto 0);
    trunc_ln819_fu_587_p1 <= grp_fu_239_p2(2 - 1 downto 0);
    zext_ln804_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_228),10));
    zext_ln805_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_269_p4),64));
    zext_ln806_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_351_p3),64));
    zext_ln807_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_444_p3),64));
    zext_ln808_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_537_p3),64));
    zext_ln810_1_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln810_fu_299_p2),12));
    zext_ln810_2_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_offset),12));
    zext_ln810_3_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln810_1_fu_308_p2),64));
    zext_ln810_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_fu_288_p3),10));
    zext_ln811_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln811_1_fu_372_p2),64));
    zext_ln811_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln811_fu_363_p2),12));
    zext_ln812_1_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln812_1_fu_391_p2),64));
    zext_ln812_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln812_fu_382_p2),12));
    zext_ln814_1_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln814_1_fu_465_p2),64));
    zext_ln814_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln814_fu_456_p2),12));
    zext_ln815_1_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln815_1_fu_484_p2),64));
    zext_ln815_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln815_fu_475_p2),12));
    zext_ln817_1_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln817_1_fu_558_p2),64));
    zext_ln817_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln817_fu_549_p2),12));
    zext_ln818_1_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln818_1_fu_577_p2),64));
    zext_ln818_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln818_fu_568_p2),12));
    zext_ln820_1_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln820_1_fu_634_p2),64));
    zext_ln820_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln820_fu_625_p2),12));
    zext_ln821_1_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln821_1_reg_780),64));
    zext_ln821_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln821_fu_644_p2),12));
end behav;
