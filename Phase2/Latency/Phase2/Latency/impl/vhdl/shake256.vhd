-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shake256 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ce1 : OUT STD_LOGIC;
    out_r_we1 : OUT STD_LOGIC;
    out_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of shake256 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv8_51 : STD_LOGIC_VECTOR (7 downto 0) := "01010001";
    constant ap_const_lv8_52 : STD_LOGIC_VECTOR (7 downto 0) := "01010010";
    constant ap_const_lv8_53 : STD_LOGIC_VECTOR (7 downto 0) := "01010011";
    constant ap_const_lv8_54 : STD_LOGIC_VECTOR (7 downto 0) := "01010100";
    constant ap_const_lv8_55 : STD_LOGIC_VECTOR (7 downto 0) := "01010101";
    constant ap_const_lv8_56 : STD_LOGIC_VECTOR (7 downto 0) := "01010110";
    constant ap_const_lv8_57 : STD_LOGIC_VECTOR (7 downto 0) := "01010111";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_344_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln416_fu_366_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln416_reg_769 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln417_fu_380_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln417_reg_774 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln416_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_0_s_addr_3_reg_794 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_load_reg_812 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal in_load_1_reg_817 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_load_2_reg_832 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal in_load_3_reg_837 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_load_4_reg_852 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal in_load_5_reg_857 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln540_fu_512_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln540_reg_875 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln540_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln1_fu_523_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln1_reg_885 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln1_reg_895 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2_reg_900 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln3_reg_905 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln4_reg_910 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln5_reg_915 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln6_reg_920 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_0_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_0_s_ce0 : STD_LOGIC;
    signal state_0_s_we0 : STD_LOGIC;
    signal state_0_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_0_s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_0_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_0_s_ce1 : STD_LOGIC;
    signal state_0_s_we1 : STD_LOGIC;
    signal state_0_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_0_s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_331_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_331_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_331_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_331_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_331_state_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_331_state_0_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_331_state_0_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_331_state_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_331_state_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_331_state_0_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_331_state_0_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_331_state_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_i_i_reg_297 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln362_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_i_i_reg_308 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_3_i_reg_319 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_331_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln363_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln417_1_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_1_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_2_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_3_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_4_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_5_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_6_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln540_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_1_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln542_1_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln543_1_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln544_1_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln545_1_fu_693_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln546_1_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln547_1_fu_733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln548_1_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln417_fu_480_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal xor_ln450_fu_487_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln451_fu_494_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln541_fu_518_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_372_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln417_fu_384_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_fu_395_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_1_fu_406_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_2_fu_416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_3_fu_426_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_4_fu_436_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_5_fu_446_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_6_fu_456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_7_i_fu_466_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_fu_531_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln541_fu_535_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln542_fu_557_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln542_fu_563_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln542_fu_567_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln543_fu_638_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln543_fu_643_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln543_fu_647_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln544_fu_658_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln544_fu_663_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln544_fu_667_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln545_fu_678_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln545_fu_683_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln545_fu_687_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln546_fu_698_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln546_fu_703_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln546_fu_707_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln547_fu_718_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln547_fu_723_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln547_fu_727_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln548_fu_738_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln548_fu_743_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln548_fu_747_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component KeccakF1600_StatePer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_0_ce0 : OUT STD_LOGIC;
        state_0_we0 : OUT STD_LOGIC;
        state_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_0_ce1 : OUT STD_LOGIC;
        state_0_we1 : OUT STD_LOGIC;
        state_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component shake256_state_0_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    state_0_s_U : component shake256_state_0_s
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_0_s_address0,
        ce0 => state_0_s_ce0,
        we0 => state_0_s_we0,
        d0 => state_0_s_d0,
        q0 => state_0_s_q0,
        address1 => state_0_s_address1,
        ce1 => state_0_s_ce1,
        we1 => state_0_s_we1,
        d1 => state_0_s_d1,
        q1 => state_0_s_q1);

    grp_KeccakF1600_StatePer_fu_331 : component KeccakF1600_StatePer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_fu_331_ap_start,
        ap_done => grp_KeccakF1600_StatePer_fu_331_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_fu_331_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_fu_331_ap_ready,
        state_0_address0 => grp_KeccakF1600_StatePer_fu_331_state_0_address0,
        state_0_ce0 => grp_KeccakF1600_StatePer_fu_331_state_0_ce0,
        state_0_we0 => grp_KeccakF1600_StatePer_fu_331_state_0_we0,
        state_0_d0 => grp_KeccakF1600_StatePer_fu_331_state_0_d0,
        state_0_q0 => state_0_s_q0,
        state_0_address1 => grp_KeccakF1600_StatePer_fu_331_state_0_address1,
        state_0_ce1 => grp_KeccakF1600_StatePer_fu_331_state_0_ce1,
        state_0_we1 => grp_KeccakF1600_StatePer_fu_331_state_0_we1,
        state_0_d1 => grp_KeccakF1600_StatePer_fu_331_state_0_d1,
        state_0_q1 => state_0_s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_331_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_331_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_KeccakF1600_StatePer_fu_331_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_331_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_331_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_i_reg_297 <= i_fu_344_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_i_reg_297 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_3_i_i_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln362_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_3_i_i_reg_308 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_3_i_i_reg_308 <= add_ln416_reg_769;
            end if; 
        end if;
    end process;

    i_3_i_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_3_i_reg_319 <= add_ln540_reg_875;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_KeccakF1600_StatePer_fu_331_ap_done = ap_const_logic_1))) then 
                i_3_i_reg_319 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln416_reg_769 <= add_ln416_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln540_reg_875 <= add_ln540_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                in_load_1_reg_817 <= out_r_q1;
                in_load_reg_812 <= out_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                in_load_2_reg_832 <= out_r_q0;
                in_load_3_reg_837 <= out_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_load_4_reg_852 <= out_r_q0;
                in_load_5_reg_857 <= out_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    shl_ln1_reg_885(5 downto 3) <= shl_ln1_fu_523_p3(5 downto 3);
                trunc_ln1_reg_895 <= state_0_s_q1(23 downto 16);
                trunc_ln2_reg_900 <= state_0_s_q1(31 downto 24);
                trunc_ln3_reg_905 <= state_0_s_q1(39 downto 32);
                trunc_ln4_reg_910 <= state_0_s_q1(47 downto 40);
                trunc_ln5_reg_915 <= state_0_s_q1(55 downto 48);
                trunc_ln6_reg_920 <= state_0_s_q1(63 downto 56);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    state_0_s_addr_3_reg_794(3 downto 0) <= zext_ln416_fu_355_p1(5 - 1 downto 0)(3 downto 0);
                    zext_ln417_reg_774(6 downto 3) <= zext_ln417_fu_380_p1(6 downto 3);
            end if;
        end if;
    end process;
    zext_ln417_reg_774(2 downto 0) <= "000";
    zext_ln417_reg_774(7) <= '0';
    state_0_s_addr_3_reg_794(4) <= '0';
    shl_ln1_reg_885(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln416_fu_360_p2, ap_CS_fsm_state11, icmp_ln540_fu_506_p2, grp_KeccakF1600_StatePer_fu_331_ap_done, icmp_ln362_fu_338_p2, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln362_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln416_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_KeccakF1600_StatePer_fu_331_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln540_fu_506_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_1_fu_406_p2 <= std_logic_vector(unsigned(zext_ln417_reg_774) + unsigned(ap_const_lv8_52));
    add_ln31_2_fu_416_p2 <= std_logic_vector(unsigned(zext_ln417_reg_774) + unsigned(ap_const_lv8_53));
    add_ln31_3_fu_426_p2 <= std_logic_vector(unsigned(zext_ln417_reg_774) + unsigned(ap_const_lv8_54));
    add_ln31_4_fu_436_p2 <= std_logic_vector(unsigned(zext_ln417_reg_774) + unsigned(ap_const_lv8_55));
    add_ln31_5_fu_446_p2 <= std_logic_vector(unsigned(zext_ln417_reg_774) + unsigned(ap_const_lv8_56));
    add_ln31_6_fu_456_p2 <= std_logic_vector(unsigned(zext_ln417_reg_774) + unsigned(ap_const_lv8_57));
    add_ln31_fu_395_p2 <= std_logic_vector(unsigned(zext_ln417_fu_380_p1) + unsigned(ap_const_lv8_51));
    add_ln416_fu_366_p2 <= std_logic_vector(unsigned(i_3_i_i_reg_308) + unsigned(ap_const_lv4_1));
    add_ln417_fu_384_p2 <= std_logic_vector(unsigned(zext_ln417_fu_380_p1) + unsigned(ap_const_lv8_50));
    add_ln540_fu_512_p2 <= std_logic_vector(unsigned(i_3_i_reg_319) + unsigned(ap_const_lv3_1));
    add_ln541_fu_535_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln541_fu_531_p1));
    add_ln542_fu_567_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln542_fu_563_p1));
    add_ln543_fu_647_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln543_fu_643_p1));
    add_ln544_fu_667_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln544_fu_663_p1));
    add_ln545_fu_687_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln545_fu_683_p1));
    add_ln546_fu_707_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln546_fu_703_p1));
    add_ln547_fu_727_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln547_fu_723_p1));
    add_ln548_fu_747_p2 <= std_logic_vector(signed(ap_const_lv8_A0) + signed(zext_ln548_fu_743_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln540_fu_506_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln540_fu_506_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln540_fu_506_p2)
    begin
        if (((icmp_ln540_fu_506_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakF1600_StatePer_fu_331_ap_start <= grp_KeccakF1600_StatePer_fu_331_ap_start_reg;
    i_fu_344_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_297) + unsigned(ap_const_lv5_1));
    icmp_ln362_fu_338_p2 <= "1" when (i_0_i_i_reg_297 = ap_const_lv5_19) else "0";
    icmp_ln416_fu_360_p2 <= "1" when (i_3_i_i_reg_308 = ap_const_lv4_A) else "0";
    icmp_ln540_fu_506_p2 <= "1" when (i_3_i_reg_319 = ap_const_lv3_6) else "0";
    or_ln542_fu_557_p2 <= (shl_ln1_fu_523_p3 or ap_const_lv6_1);
    or_ln543_fu_638_p2 <= (shl_ln1_reg_885 or ap_const_lv6_2);
    or_ln544_fu_658_p2 <= (shl_ln1_reg_885 or ap_const_lv6_3);
    or_ln545_fu_678_p2 <= (shl_ln1_reg_885 or ap_const_lv6_4);
    or_ln546_fu_698_p2 <= (shl_ln1_reg_885 or ap_const_lv6_5);
    or_ln547_fu_718_p2 <= (shl_ln1_reg_885 or ap_const_lv6_6);
    or_ln548_fu_738_p2 <= (shl_ln1_reg_885 or ap_const_lv6_7);

    out_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state15, zext_ln417_1_fu_390_p1, zext_ln31_1_fu_411_p1, zext_ln31_3_fu_431_p1, zext_ln31_5_fu_451_p1, zext_ln541_1_fu_541_p1, zext_ln543_1_fu_653_p1, ap_CS_fsm_state13, zext_ln545_1_fu_693_p1, ap_CS_fsm_state14, zext_ln547_1_fu_733_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_r_address0 <= zext_ln547_1_fu_733_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_r_address0 <= zext_ln545_1_fu_693_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_r_address0 <= zext_ln543_1_fu_653_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_r_address0 <= zext_ln541_1_fu_541_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_address0 <= zext_ln31_5_fu_451_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_address0 <= zext_ln31_3_fu_431_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_r_address0 <= zext_ln31_1_fu_411_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_r_address0 <= zext_ln417_1_fu_390_p1(8 - 1 downto 0);
        else 
            out_r_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_r_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state15, zext_ln31_fu_401_p1, zext_ln31_2_fu_421_p1, zext_ln31_4_fu_441_p1, zext_ln31_6_fu_461_p1, zext_ln542_1_fu_573_p1, ap_CS_fsm_state13, zext_ln544_1_fu_673_p1, ap_CS_fsm_state14, zext_ln546_1_fu_713_p1, zext_ln548_1_fu_753_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_r_address1 <= zext_ln548_1_fu_753_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_r_address1 <= zext_ln546_1_fu_713_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_r_address1 <= zext_ln544_1_fu_673_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_r_address1 <= zext_ln542_1_fu_573_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_address1 <= zext_ln31_6_fu_461_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_address1 <= zext_ln31_4_fu_441_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_r_address1 <= zext_ln31_2_fu_421_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_r_address1 <= zext_ln31_fu_401_p1(8 - 1 downto 0);
        else 
            out_r_address1 <= "XXXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_r_ce1 <= ap_const_logic_1;
        else 
            out_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_d0_assign_proc : process(ap_CS_fsm_state12, trunc_ln1_reg_895, trunc_ln3_reg_905, trunc_ln5_reg_915, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state14, trunc_ln541_fu_518_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_r_d0 <= trunc_ln5_reg_915;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_r_d0 <= trunc_ln3_reg_905;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_r_d0 <= trunc_ln1_reg_895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_r_d0 <= trunc_ln541_fu_518_p1;
        else 
            out_r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    out_r_d1_assign_proc : process(ap_CS_fsm_state12, trunc_ln2_reg_900, trunc_ln4_reg_910, trunc_ln6_reg_920, state_0_s_q1, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_r_d1 <= trunc_ln6_reg_920;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_r_d1 <= trunc_ln4_reg_910;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_r_d1 <= trunc_ln2_reg_900;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_r_d1 <= state_0_s_q1(15 downto 8);
        else 
            out_r_d1 <= "XXXXXXXX";
        end if; 
    end process;


    out_r_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            out_r_we1 <= ap_const_logic_1;
        else 
            out_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_7_i_fu_466_p9 <= (((((((out_r_q1 & out_r_q0) & in_load_5_reg_857) & in_load_4_reg_852) & in_load_3_reg_837) & in_load_2_reg_832) & in_load_1_reg_817) & in_load_reg_812);
    shl_ln1_fu_523_p3 <= (i_3_i_reg_319 & ap_const_lv3_0);
    shl_ln_fu_372_p3 <= (i_3_i_i_reg_308 & ap_const_lv3_0);

    state_0_s_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, state_0_s_addr_3_reg_794, grp_KeccakF1600_StatePer_fu_331_state_0_address0, ap_CS_fsm_state7, ap_CS_fsm_state10, zext_ln363_fu_350_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_0_s_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_0_s_address0 <= state_0_s_addr_3_reg_794;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_0_s_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_0_s_address0 <= zext_ln363_fu_350_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_0_s_address0 <= grp_KeccakF1600_StatePer_fu_331_state_0_address0;
        else 
            state_0_s_address0 <= "XXXXX";
        end if; 
    end process;


    state_0_s_address1_assign_proc : process(ap_CS_fsm_state3, state_0_s_addr_3_reg_794, ap_CS_fsm_state6, ap_CS_fsm_state11, grp_KeccakF1600_StatePer_fu_331_state_0_address1, ap_CS_fsm_state10, zext_ln540_fu_501_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_0_s_address1 <= zext_ln540_fu_501_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_0_s_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_0_s_address1 <= state_0_s_addr_3_reg_794;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_0_s_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_0_s_address1 <= grp_KeccakF1600_StatePer_fu_331_state_0_address1;
        else 
            state_0_s_address1 <= "XXXXX";
        end if; 
    end process;


    state_0_s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, grp_KeccakF1600_StatePer_fu_331_state_0_ce0, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            state_0_s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_0_s_ce0 <= grp_KeccakF1600_StatePer_fu_331_state_0_ce0;
        else 
            state_0_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_0_s_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state11, grp_KeccakF1600_StatePer_fu_331_state_0_ce1, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_0_s_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_0_s_ce1 <= grp_KeccakF1600_StatePer_fu_331_state_0_ce1;
        else 
            state_0_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_0_s_d0_assign_proc : process(ap_CS_fsm_state2, grp_KeccakF1600_StatePer_fu_331_state_0_d0, ap_CS_fsm_state7, ap_CS_fsm_state10, xor_ln417_fu_480_p2, ap_CS_fsm_state8, xor_ln451_fu_494_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_0_s_d0 <= xor_ln451_fu_494_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_0_s_d0 <= xor_ln417_fu_480_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_0_s_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_0_s_d0 <= grp_KeccakF1600_StatePer_fu_331_state_0_d0;
        else 
            state_0_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_0_s_d1_assign_proc : process(grp_KeccakF1600_StatePer_fu_331_state_0_d1, ap_CS_fsm_state10, ap_CS_fsm_state8, xor_ln450_fu_487_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_0_s_d1 <= xor_ln450_fu_487_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_0_s_d1 <= grp_KeccakF1600_StatePer_fu_331_state_0_d1;
        else 
            state_0_s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_0_s_we0_assign_proc : process(ap_CS_fsm_state2, grp_KeccakF1600_StatePer_fu_331_state_0_we0, icmp_ln362_fu_338_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln362_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            state_0_s_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_0_s_we0 <= grp_KeccakF1600_StatePer_fu_331_state_0_we0;
        else 
            state_0_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_0_s_we1_assign_proc : process(grp_KeccakF1600_StatePer_fu_331_state_0_we1, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_0_s_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_0_s_we1 <= grp_KeccakF1600_StatePer_fu_331_state_0_we1;
        else 
            state_0_s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln541_fu_518_p1 <= state_0_s_q1(8 - 1 downto 0);
    xor_ln417_fu_480_p2 <= (state_0_s_q1 xor r_7_i_fu_466_p9);
    xor_ln450_fu_487_p2 <= (state_0_s_q0 xor ap_const_lv64_1F);
    xor_ln451_fu_494_p2 <= (state_0_s_q1 xor ap_const_lv64_8000000000000000);
    zext_ln31_1_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_1_fu_406_p2),64));
    zext_ln31_2_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_2_fu_416_p2),64));
    zext_ln31_3_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_3_fu_426_p2),64));
    zext_ln31_4_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_4_fu_436_p2),64));
    zext_ln31_5_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_5_fu_446_p2),64));
    zext_ln31_6_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_6_fu_456_p2),64));
    zext_ln31_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_395_p2),64));
    zext_ln363_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_297),64));
    zext_ln416_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i_i_reg_308),64));
    zext_ln417_1_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln417_fu_384_p2),64));
    zext_ln417_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_372_p3),8));
    zext_ln540_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_i_reg_319),64));
    zext_ln541_1_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln541_fu_535_p2),64));
    zext_ln541_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_523_p3),8));
    zext_ln542_1_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln542_fu_567_p2),64));
    zext_ln542_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln542_fu_557_p2),8));
    zext_ln543_1_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln543_fu_647_p2),64));
    zext_ln543_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln543_fu_638_p2),8));
    zext_ln544_1_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln544_fu_667_p2),64));
    zext_ln544_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln544_fu_658_p2),8));
    zext_ln545_1_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln545_fu_687_p2),64));
    zext_ln545_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln545_fu_678_p2),8));
    zext_ln546_1_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln546_fu_707_p2),64));
    zext_ln546_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln546_fu_698_p2),8));
    zext_ln547_1_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln547_fu_727_p2),64));
    zext_ln547_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln547_fu_718_p2),8));
    zext_ln548_1_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln548_fu_747_p2),64));
    zext_ln548_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln548_fu_738_p2),8));
end behav;
