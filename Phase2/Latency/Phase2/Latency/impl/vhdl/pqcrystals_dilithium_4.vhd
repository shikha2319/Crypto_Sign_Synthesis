-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_dilithium_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_vec_coeffs_ce0 : OUT STD_LOGIC;
    r_vec_coeffs_we0 : OUT STD_LOGIC;
    r_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_coeffs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_coeffs_ce0 : OUT STD_LOGIC;
    a_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v_vec_coeffs_ce0 : OUT STD_LOGIC;
    v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of pqcrystals_dilithium_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_3802001 : STD_LOGIC_VECTOR (31 downto 0) := "00000011100000000010000000000001";
    constant ap_const_lv55_7FFFFFFF801FFF : STD_LOGIC_VECTOR (54 downto 0) := "1111111111111111111111111111111100000000001111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_101 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_reg_112 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i_reg_123 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln305_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln305_reg_261 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln305_reg_261_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln305_reg_261_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln305_reg_261_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln305_reg_261_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln305_fu_140_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln306_1_fu_166_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln306_1_reg_270 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln181_7_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_7_reg_275 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_7_reg_275_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_7_reg_275_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_7_reg_275_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_7_reg_275_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_fu_206_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal a_coeffs_load_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_vec_coeffs_load_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln181_fu_218_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln181_reg_305 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln181_reg_305_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln181_reg_305_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln18_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_fu_236_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal mul_ln19_reg_320 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_116_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln181_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln180_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_146_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_174_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln306_fu_158_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln181_5_fu_182_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln181_6_fu_191_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln181_fu_195_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln181_fu_218_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln181_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln19_2_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_fu_245_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln305_fu_134_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_i_reg_123 <= i_7_fu_206_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_123 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln305_reg_261 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_112 <= select_ln306_1_reg_270;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_112 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln305_fu_134_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_101 <= add_ln305_fu_140_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_101 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln305_reg_261 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_coeffs_load_reg_295 <= a_coeffs_q0;
                v_vec_coeffs_load_reg_300 <= v_vec_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln305_reg_261 <= icmp_ln305_fu_134_p2;
                icmp_ln305_reg_261_pp0_iter1_reg <= icmp_ln305_reg_261;
                    zext_ln181_7_reg_275_pp0_iter1_reg(11 downto 0) <= zext_ln181_7_reg_275(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln305_reg_261_pp0_iter2_reg <= icmp_ln305_reg_261_pp0_iter1_reg;
                icmp_ln305_reg_261_pp0_iter3_reg <= icmp_ln305_reg_261_pp0_iter2_reg;
                icmp_ln305_reg_261_pp0_iter4_reg <= icmp_ln305_reg_261_pp0_iter3_reg;
                mul_ln181_reg_305_pp0_iter3_reg <= mul_ln181_reg_305;
                mul_ln181_reg_305_pp0_iter4_reg <= mul_ln181_reg_305_pp0_iter3_reg;
                    zext_ln181_7_reg_275_pp0_iter2_reg(11 downto 0) <= zext_ln181_7_reg_275_pp0_iter1_reg(11 downto 0);
                    zext_ln181_7_reg_275_pp0_iter3_reg(11 downto 0) <= zext_ln181_7_reg_275_pp0_iter2_reg(11 downto 0);
                    zext_ln181_7_reg_275_pp0_iter4_reg(11 downto 0) <= zext_ln181_7_reg_275_pp0_iter3_reg(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln305_reg_261_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln181_reg_305 <= mul_ln181_fu_218_p2;
                trunc_ln18_reg_310 <= trunc_ln18_fu_224_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln305_reg_261_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln19_reg_320 <= mul_ln19_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln305_fu_134_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln306_1_reg_270 <= select_ln306_1_fu_166_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln305_reg_261_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                t_reg_315 <= t_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln305_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln181_7_reg_275(11 downto 0) <= zext_ln181_7_fu_201_p1(11 downto 0);
            end if;
        end if;
    end process;
    zext_ln181_7_reg_275(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln181_7_reg_275_pp0_iter1_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln181_7_reg_275_pp0_iter2_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln181_7_reg_275_pp0_iter3_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln181_7_reg_275_pp0_iter4_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln305_fu_134_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln305_fu_134_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln305_fu_134_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_coeffs_address0 <= zext_ln181_fu_186_p1(8 - 1 downto 0);

    a_coeffs_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_coeffs_ce0 <= ap_const_logic_1;
        else 
            a_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln181_fu_195_p2 <= std_logic_vector(unsigned(zext_ln181_5_fu_182_p1) + unsigned(zext_ln181_6_fu_191_p1));
    add_ln19_fu_245_p2 <= std_logic_vector(unsigned(mul_ln181_reg_305_pp0_iter4_reg) + unsigned(sext_ln19_2_fu_242_p1));
    add_ln305_fu_140_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_101) + unsigned(ap_const_lv11_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln305_fu_134_p2)
    begin
        if ((icmp_ln305_fu_134_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_116_p4_assign_proc : process(i_0_reg_112, icmp_ln305_reg_261, ap_CS_fsm_pp0_stage0, select_ln306_1_reg_270, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln305_reg_261 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_116_p4 <= select_ln306_1_reg_270;
        else 
            ap_phi_mux_i_0_phi_fu_116_p4 <= i_0_reg_112;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_7_fu_206_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(select_ln306_fu_158_p3));
    i_fu_146_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_i_0_phi_fu_116_p4));
    icmp_ln180_fu_152_p2 <= "1" when (i_0_i_reg_123 = ap_const_lv9_100) else "0";
    icmp_ln305_fu_134_p2 <= "1" when (indvar_flatten_reg_101 = ap_const_lv11_400) else "0";
    mul_ln181_fu_218_p0 <= a_coeffs_load_reg_295;
    mul_ln181_fu_218_p1 <= v_vec_coeffs_load_reg_300;
    mul_ln181_fu_218_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln181_fu_218_p0) * signed(mul_ln181_fu_218_p1))), 64));
    mul_ln19_fu_236_p1 <= t_reg_315;
    mul_ln19_fu_236_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv55_7FFFFFFF801FFF) * signed(mul_ln19_fu_236_p1))), 55));
    r_vec_coeffs_address0 <= zext_ln181_7_reg_275_pp0_iter4_reg(10 - 1 downto 0);

    r_vec_coeffs_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            r_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_vec_coeffs_d0 <= add_ln19_fu_245_p2(63 downto 32);

    r_vec_coeffs_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln305_reg_261_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((icmp_ln305_reg_261_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            r_vec_coeffs_we0 <= ap_const_logic_1;
        else 
            r_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln306_1_fu_166_p3 <= 
        i_fu_146_p2 when (icmp_ln180_fu_152_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_116_p4;
    select_ln306_fu_158_p3 <= 
        ap_const_lv9_0 when (icmp_ln180_fu_152_p2(0) = '1') else 
        i_0_i_reg_123;
        sext_ln19_2_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln19_reg_320),64));

    t_fu_228_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_3802001) * signed(trunc_ln18_reg_310))), 32));
    tmp_fu_174_p3 <= (select_ln306_1_fu_166_p3 & ap_const_lv8_0);
    trunc_ln18_fu_224_p1 <= mul_ln181_fu_218_p2(32 - 1 downto 0);
    v_vec_coeffs_address0 <= zext_ln181_7_fu_201_p1(10 - 1 downto 0);

    v_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            v_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln181_5_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_174_p3),12));
    zext_ln181_6_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln306_fu_158_p3),12));
    zext_ln181_7_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln181_fu_195_p2),64));
    zext_ln181_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln306_fu_158_p3),64));
end behav;
