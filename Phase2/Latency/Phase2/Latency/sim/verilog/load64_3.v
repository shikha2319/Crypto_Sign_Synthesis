// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load64_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_q0,
        x_address1,
        x_ce1,
        x_q1,
        x_offset,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] x_address0;
output   x_ce0;
input  [7:0] x_q0;
output  [12:0] x_address1;
output   x_ce1;
input  [7:0] x_q1;
input  [63:0] x_offset;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] x_address0;
reg x_ce0;
reg[12:0] x_address1;
reg x_ce1;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] trunc_ln31_fu_104_p1;
reg   [13:0] trunc_ln31_reg_198;
reg   [7:0] x_load_reg_213;
wire    ap_CS_fsm_state2;
reg   [7:0] x_load_1_reg_218;
reg   [7:0] x_load_2_reg_233;
wire    ap_CS_fsm_state3;
reg   [7:0] x_load_3_reg_238;
reg   [7:0] x_load_4_reg_253;
wire    ap_CS_fsm_state4;
reg   [7:0] x_load_5_reg_258;
wire   [63:0] zext_ln31_fu_114_p1;
wire   [63:0] zext_ln31_25_fu_124_p1;
wire   [63:0] zext_ln31_26_fu_134_p1;
wire   [63:0] zext_ln31_27_fu_144_p1;
wire   [63:0] zext_ln31_28_fu_154_p1;
wire   [63:0] zext_ln31_29_fu_164_p1;
wire   [63:0] zext_ln31_30_fu_174_p1;
wire   [13:0] add_ln31_fu_108_p2;
wire   [13:0] add_ln31_1_fu_119_p2;
wire   [13:0] add_ln31_2_fu_129_p2;
wire   [13:0] add_ln31_3_fu_139_p2;
wire   [13:0] add_ln31_4_fu_149_p2;
wire   [13:0] add_ln31_5_fu_159_p2;
wire   [13:0] add_ln31_6_fu_169_p2;
wire    ap_CS_fsm_state5;
wire   [63:0] r_7_fu_179_p9;
reg   [63:0] ap_return_preg;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_return_preg = 64'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_preg <= r_7_fu_179_p9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        trunc_ln31_reg_198 <= trunc_ln31_fu_104_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_load_1_reg_218 <= x_q1;
        x_load_reg_213 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_load_2_reg_233 <= x_q0;
        x_load_3_reg_238 <= x_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_load_4_reg_253 <= x_q0;
        x_load_5_reg_258 <= x_q1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return = r_7_fu_179_p9;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_address0 = zext_ln31_29_fu_164_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address0 = zext_ln31_27_fu_144_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_address0 = zext_ln31_25_fu_124_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_address0 = x_offset;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_address1 = zext_ln31_30_fu_174_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address1 = zext_ln31_28_fu_154_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_address1 = zext_ln31_26_fu_134_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_address1 = zext_ln31_fu_114_p1;
    end else begin
        x_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        x_ce1 = 1'b1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_1_fu_119_p2 = (14'd2 + trunc_ln31_reg_198);

assign add_ln31_2_fu_129_p2 = (14'd3 + trunc_ln31_reg_198);

assign add_ln31_3_fu_139_p2 = (14'd4 + trunc_ln31_reg_198);

assign add_ln31_4_fu_149_p2 = (14'd5 + trunc_ln31_reg_198);

assign add_ln31_5_fu_159_p2 = (14'd6 + trunc_ln31_reg_198);

assign add_ln31_6_fu_169_p2 = (14'd7 + trunc_ln31_reg_198);

assign add_ln31_fu_108_p2 = (14'd1 + trunc_ln31_fu_104_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign r_7_fu_179_p9 = {{{{{{{{x_q1}, {x_q0}}, {x_load_5_reg_258}}, {x_load_4_reg_253}}, {x_load_3_reg_238}}, {x_load_2_reg_233}}, {x_load_1_reg_218}}, {x_load_reg_213}};

assign trunc_ln31_fu_104_p1 = x_offset[13:0];

assign zext_ln31_25_fu_124_p1 = add_ln31_1_fu_119_p2;

assign zext_ln31_26_fu_134_p1 = add_ln31_2_fu_129_p2;

assign zext_ln31_27_fu_144_p1 = add_ln31_3_fu_139_p2;

assign zext_ln31_28_fu_154_p1 = add_ln31_4_fu_149_p2;

assign zext_ln31_29_fu_164_p1 = add_ln31_5_fu_159_p2;

assign zext_ln31_30_fu_174_p1 = add_ln31_6_fu_169_p2;

assign zext_ln31_fu_114_p1 = add_ln31_fu_108_p2;

endmodule //load64_3
