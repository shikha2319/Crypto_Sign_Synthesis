// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pqcrystals_dilithium_21 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        a_offset
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_pp0_stage0 = 14'd4096;
parameter    ap_ST_fsm_state19 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] a_address0;
output   a_ce0;
output   a_we0;
output  [31:0] a_d0;
input  [31:0] a_q0;
output  [9:0] a_address1;
output   a_ce1;
input  [31:0] a_q1;
input  [2:0] a_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] a_address0;
reg a_ce0;
reg a_we0;
reg[31:0] a_d0;
reg[9:0] a_address1;
reg a_ce1;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] zetas_address0;
reg    zetas_ce0;
wire   [22:0] zetas_q0;
reg   [8:0] j_1_reg_169;
reg   [31:0] reg_180;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state13_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_state15_pp0_stage0_iter2;
wire    ap_block_state16_pp0_stage0_iter3;
wire    ap_block_state17_pp0_stage0_iter4;
wire    ap_block_state18_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln95_reg_616;
wire   [11:0] zext_ln77_fu_193_p1;
reg   [11:0] zext_ln77_reg_512;
wire   [0:0] tmp_4_fu_202_p3;
wire    ap_CS_fsm_state2;
wire   [9:0] zext_ln83_fu_210_p1;
reg   [9:0] zext_ln83_reg_523;
wire   [31:0] k_fu_233_p2;
reg   [31:0] k_reg_532;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln84_fu_224_p2;
wire   [8:0] len_fu_244_p2;
wire   [31:0] zext_ln84_fu_250_p1;
wire    ap_CS_fsm_state4;
wire   [31:0] zext_ln86_fu_265_p1;
reg   [31:0] zext_ln86_reg_552;
wire   [9:0] zext_ln84_1_fu_293_p1;
reg   [9:0] zext_ln84_1_reg_557;
wire  signed [53:0] sext_ln86_fu_297_p1;
reg  signed [53:0] sext_ln86_reg_562;
reg   [9:0] a_addr_reg_570;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln86_fu_301_p2;
reg   [9:0] a_addr_2_reg_575;
wire   [31:0] j_3_fu_344_p2;
reg   [31:0] j_3_reg_581;
wire   [9:0] add_ln84_fu_350_p2;
wire   [31:0] sub_ln89_fu_365_p2;
reg   [31:0] sub_ln89_reg_591;
wire    ap_CS_fsm_state8;
wire  signed [53:0] mul_ln90_fu_374_p2;
reg  signed [53:0] mul_ln90_reg_596;
wire    ap_CS_fsm_state9;
wire  signed [31:0] trunc_ln18_1_fu_379_p1;
reg  signed [31:0] trunc_ln18_1_reg_601;
wire   [31:0] t_7_fu_383_p2;
reg   [31:0] t_7_reg_606;
wire    ap_CS_fsm_state10;
wire   [54:0] mul_ln19_1_fu_391_p2;
reg   [54:0] mul_ln19_1_reg_611;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln95_fu_424_p2;
reg   [0:0] icmp_ln95_reg_616_pp0_iter1_reg;
reg   [0:0] icmp_ln95_reg_616_pp0_iter2_reg;
reg   [0:0] icmp_ln95_reg_616_pp0_iter3_reg;
reg   [0:0] icmp_ln95_reg_616_pp0_iter4_reg;
wire   [8:0] j_2_fu_430_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [9:0] a_addr_1_reg_625;
reg   [9:0] a_addr_1_reg_625_pp0_iter1_reg;
reg   [9:0] a_addr_1_reg_625_pp0_iter2_reg;
reg   [9:0] a_addr_1_reg_625_pp0_iter3_reg;
reg   [9:0] a_addr_1_reg_625_pp0_iter4_reg;
wire  signed [48:0] mul_ln96_fu_454_p2;
reg  signed [48:0] mul_ln96_reg_631;
reg  signed [48:0] mul_ln96_reg_631_pp0_iter3_reg;
reg  signed [48:0] mul_ln96_reg_631_pp0_iter4_reg;
wire  signed [31:0] trunc_ln18_fu_460_p1;
reg  signed [31:0] trunc_ln18_reg_636;
wire   [31:0] t_5_fu_464_p2;
reg   [31:0] t_5_reg_641;
wire   [54:0] mul_ln19_fu_472_p2;
reg   [54:0] mul_ln19_reg_646;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state13;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [8:0] len_0_reg_136;
reg   [9:0] j_reg_148;
reg   [31:0] j_0_reg_160;
wire    ap_CS_fsm_state12;
wire   [63:0] zext_ln85_fu_239_p1;
wire   [63:0] zext_ln87_fu_315_p1;
wire   [63:0] zext_ln88_1_fu_339_p1;
wire   [63:0] zext_ln96_1_fu_445_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] k_1_fu_80;
wire   [31:0] add_ln88_1_fu_358_p2;
wire    ap_CS_fsm_state7;
wire  signed [31:0] t_8_fu_419_p1;
wire  signed [31:0] t_6_fu_500_p1;
wire   [10:0] tmp_fu_185_p3;
wire   [1:0] tmp_5_fu_214_p4;
wire   [9:0] add_ln86_fu_260_p2;
wire   [8:0] trunc_ln84_fu_275_p1;
wire   [0:0] empty_fu_269_p2;
wire   [8:0] add_ln84_1_fu_279_p2;
wire   [8:0] start_fu_285_p3;
wire   [22:0] zeta_fu_254_p2;
wire   [11:0] trunc_ln87_fu_306_p1;
wire   [11:0] add_ln87_fu_310_p2;
wire   [11:0] zext_ln88_fu_324_p1;
wire   [11:0] trunc_ln88_fu_320_p1;
wire   [11:0] add_ln88_fu_328_p2;
wire   [11:0] add_ln88_2_fu_334_p2;
wire  signed [22:0] mul_ln90_fu_374_p0;
wire  signed [31:0] mul_ln90_fu_374_p1;
wire  signed [31:0] mul_ln19_1_fu_391_p1;
wire  signed [55:0] sext_ln90_1_fu_397_p1;
wire  signed [55:0] sext_ln19_6_fu_400_p1;
wire   [55:0] add_ln19_1_fu_403_p2;
wire   [23:0] trunc_ln19_1_fu_409_p4;
wire   [11:0] zext_ln96_fu_436_p1;
wire   [11:0] add_ln96_fu_440_p2;
wire  signed [31:0] sext_ln96_fu_450_p0;
wire  signed [31:0] mul_ln96_fu_454_p1;
wire  signed [31:0] mul_ln19_fu_472_p1;
wire  signed [55:0] sext_ln19_3_fu_481_p1;
wire  signed [55:0] sext_ln96_1_fu_478_p1;
wire   [55:0] add_ln19_fu_484_p2;
wire   [23:0] trunc_ln_fu_490_p4;
wire    ap_CS_fsm_state19;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

pqcrystals_dilithg8j #(
    .DataWidth( 23 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
zetas_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(zetas_address0),
    .ce0(zetas_ce0),
    .q0(zetas_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state13))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_4_fu_202_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state13)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((tmp_4_fu_202_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_0_reg_160 <= j_3_reg_581;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_160 <= zext_ln84_fu_250_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_202_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_1_reg_169 <= 9'd0;
    end else if (((icmp_ln95_fu_424_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_1_reg_169 <= j_2_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_148 <= add_ln84_fu_350_p2;
    end else if (((tmp_4_fu_202_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_148 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k_1_fu_80 <= k_reg_532;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_1_fu_80 <= 32'd256;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        len_0_reg_136 <= len_fu_244_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        len_0_reg_136 <= 9'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_reg_616 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_180 <= a_q1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_180 <= a_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_fu_424_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_addr_1_reg_625 <= zext_ln96_1_fu_445_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_addr_1_reg_625_pp0_iter1_reg <= a_addr_1_reg_625;
        icmp_ln95_reg_616 <= icmp_ln95_fu_424_p2;
        icmp_ln95_reg_616_pp0_iter1_reg <= icmp_ln95_reg_616;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        a_addr_1_reg_625_pp0_iter2_reg <= a_addr_1_reg_625_pp0_iter1_reg;
        a_addr_1_reg_625_pp0_iter3_reg <= a_addr_1_reg_625_pp0_iter2_reg;
        a_addr_1_reg_625_pp0_iter4_reg <= a_addr_1_reg_625_pp0_iter3_reg;
        icmp_ln95_reg_616_pp0_iter2_reg <= icmp_ln95_reg_616_pp0_iter1_reg;
        icmp_ln95_reg_616_pp0_iter3_reg <= icmp_ln95_reg_616_pp0_iter2_reg;
        icmp_ln95_reg_616_pp0_iter4_reg <= icmp_ln95_reg_616_pp0_iter3_reg;
        mul_ln96_reg_631_pp0_iter3_reg <= mul_ln96_reg_631;
        mul_ln96_reg_631_pp0_iter4_reg <= mul_ln96_reg_631_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln86_fu_301_p2 == 1'd1))) begin
        a_addr_2_reg_575 <= zext_ln88_1_fu_339_p1;
        a_addr_reg_570 <= zext_ln87_fu_315_p1;
        j_3_reg_581 <= j_3_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln84_fu_224_p2 == 1'd1))) begin
        k_reg_532 <= k_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_ln19_1_reg_611 <= mul_ln19_1_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_reg_616_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln19_reg_646 <= mul_ln19_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_ln90_reg_596 <= mul_ln90_fu_374_p2;
        trunc_ln18_1_reg_601 <= trunc_ln18_1_fu_379_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_reg_616_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln96_reg_631 <= mul_ln96_fu_454_p2;
        trunc_ln18_reg_636 <= trunc_ln18_fu_460_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sext_ln86_reg_562 <= sext_ln86_fu_297_p1;
        zext_ln84_1_reg_557[8 : 0] <= zext_ln84_1_fu_293_p1[8 : 0];
        zext_ln86_reg_552[9 : 0] <= zext_ln86_fu_265_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sub_ln89_reg_591 <= sub_ln89_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_reg_616_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_5_reg_641 <= t_5_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        t_7_reg_606 <= t_7_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        zext_ln77_reg_512[10 : 8] <= zext_ln77_fu_193_p1[10 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_202_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln83_reg_523[8 : 0] <= zext_ln83_fu_210_p1[8 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        a_address0 = a_addr_1_reg_625_pp0_iter4_reg;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        a_address0 = a_addr_2_reg_575;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a_address0 = a_addr_reg_570;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address0 = zext_ln87_fu_315_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        a_address1 = zext_ln96_1_fu_445_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        a_address1 = a_addr_2_reg_575;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address1 = zext_ln88_1_fu_339_p1;
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        a_d0 = t_6_fu_500_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        a_d0 = t_8_fu_419_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a_d0 = add_ln88_1_fu_358_p2;
    end else begin
        a_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12) | ((icmp_ln95_reg_616_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln95_fu_424_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zetas_ce0 = 1'b1;
    end else begin
        zetas_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_4_fu_202_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln84_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln86_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln95_fu_424_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln95_fu_424_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_1_fu_403_p2 = ($signed(sext_ln90_1_fu_397_p1) + $signed(sext_ln19_6_fu_400_p1));

assign add_ln19_fu_484_p2 = ($signed(sext_ln19_3_fu_481_p1) + $signed(sext_ln96_1_fu_478_p1));

assign add_ln84_1_fu_279_p2 = (trunc_ln84_fu_275_p1 + len_0_reg_136);

assign add_ln84_fu_350_p2 = (zext_ln84_1_reg_557 + zext_ln83_reg_523);

assign add_ln86_fu_260_p2 = (zext_ln83_reg_523 + j_reg_148);

assign add_ln87_fu_310_p2 = (zext_ln77_reg_512 + trunc_ln87_fu_306_p1);

assign add_ln88_1_fu_358_p2 = (a_q0 + a_q1);

assign add_ln88_2_fu_334_p2 = (zext_ln77_reg_512 + add_ln88_fu_328_p2);

assign add_ln88_fu_328_p2 = (zext_ln88_fu_324_p1 + trunc_ln88_fu_320_p1);

assign add_ln96_fu_440_p2 = (zext_ln96_fu_436_p1 + zext_ln77_reg_512);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_fu_269_p2 = ((j_reg_148 > add_ln86_fu_260_p2) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_224_p2 = ((tmp_5_fu_214_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_301_p2 = ((j_0_reg_160 < zext_ln86_reg_552) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_424_p2 = ((j_1_reg_169 == 9'd256) ? 1'b1 : 1'b0);

assign j_2_fu_430_p2 = (j_1_reg_169 + 9'd1);

assign j_3_fu_344_p2 = (32'd1 + j_0_reg_160);

assign k_fu_233_p2 = ($signed(32'd4294967295) + $signed(k_1_fu_80));

assign len_fu_244_p2 = len_0_reg_136 << 9'd1;

assign mul_ln19_1_fu_391_p1 = t_7_reg_606;

assign mul_ln19_1_fu_391_p2 = ($signed(55'd36028797010583551) * $signed(mul_ln19_1_fu_391_p1));

assign mul_ln19_fu_472_p1 = t_5_reg_641;

assign mul_ln19_fu_472_p2 = ($signed(55'd36028797010583551) * $signed(mul_ln19_fu_472_p1));

assign mul_ln90_fu_374_p0 = sext_ln86_reg_562;

assign mul_ln90_fu_374_p1 = sub_ln89_reg_591;

assign mul_ln90_fu_374_p2 = ($signed(mul_ln90_fu_374_p0) * $signed(mul_ln90_fu_374_p1));

assign mul_ln96_fu_454_p1 = sext_ln96_fu_450_p0;

assign mul_ln96_fu_454_p2 = ($signed({{1'b0}, {49'd41978}}) * $signed(mul_ln96_fu_454_p1));

assign sext_ln19_3_fu_481_p1 = $signed(mul_ln19_reg_646);

assign sext_ln19_6_fu_400_p1 = $signed(mul_ln19_1_reg_611);

assign sext_ln86_fu_297_p1 = $signed(zeta_fu_254_p2);

assign sext_ln90_1_fu_397_p1 = mul_ln90_reg_596;

assign sext_ln96_1_fu_478_p1 = mul_ln96_reg_631_pp0_iter4_reg;

assign sext_ln96_fu_450_p0 = reg_180;

assign start_fu_285_p3 = ((empty_fu_269_p2[0:0] === 1'b1) ? trunc_ln84_fu_275_p1 : add_ln84_1_fu_279_p2);

assign sub_ln89_fu_365_p2 = (reg_180 - a_q1);

assign t_5_fu_464_p2 = ($signed({{1'b0}, {32'd58728449}}) * $signed(trunc_ln18_reg_636));

assign t_6_fu_500_p1 = $signed(trunc_ln_fu_490_p4);

assign t_7_fu_383_p2 = ($signed({{1'b0}, {32'd58728449}}) * $signed(trunc_ln18_1_reg_601));

assign t_8_fu_419_p1 = $signed(trunc_ln19_1_fu_409_p4);

assign tmp_4_fu_202_p3 = len_0_reg_136[32'd8];

assign tmp_5_fu_214_p4 = {{j_reg_148[9:8]}};

assign tmp_fu_185_p3 = {{a_offset}, {8'd0}};

assign trunc_ln18_1_fu_379_p1 = mul_ln90_fu_374_p2[31:0];

assign trunc_ln18_fu_460_p1 = mul_ln96_fu_454_p2[31:0];

assign trunc_ln19_1_fu_409_p4 = {{add_ln19_1_fu_403_p2[55:32]}};

assign trunc_ln84_fu_275_p1 = j_reg_148[8:0];

assign trunc_ln87_fu_306_p1 = j_0_reg_160[11:0];

assign trunc_ln88_fu_320_p1 = j_0_reg_160[11:0];

assign trunc_ln_fu_490_p4 = {{add_ln19_fu_484_p2[55:32]}};

assign zeta_fu_254_p2 = (23'd0 - zetas_q0);

assign zetas_address0 = zext_ln85_fu_239_p1;

assign zext_ln77_fu_193_p1 = tmp_fu_185_p3;

assign zext_ln83_fu_210_p1 = len_0_reg_136;

assign zext_ln84_1_fu_293_p1 = start_fu_285_p3;

assign zext_ln84_fu_250_p1 = j_reg_148;

assign zext_ln85_fu_239_p1 = k_fu_233_p2;

assign zext_ln86_fu_265_p1 = add_ln86_fu_260_p2;

assign zext_ln87_fu_315_p1 = add_ln87_fu_310_p2;

assign zext_ln88_1_fu_339_p1 = add_ln88_2_fu_334_p2;

assign zext_ln88_fu_324_p1 = len_0_reg_136;

assign zext_ln96_1_fu_445_p1 = add_ln96_fu_440_p2;

assign zext_ln96_fu_436_p1 = j_1_reg_169;

always @ (posedge ap_clk) begin
    zext_ln77_reg_512[7:0] <= 8'b00000000;
    zext_ln77_reg_512[11] <= 1'b0;
    zext_ln83_reg_523[9] <= 1'b0;
    zext_ln86_reg_552[31:10] <= 22'b0000000000000000000000;
    zext_ln84_1_reg_557[9] <= 1'b0;
end

endmodule //pqcrystals_dilithium_21
